---
source: duvet/src/ietf.rs
expression: "Tokenizer::new(&rfc2616).collect::<Vec<_>>()"

---
[
      BREAK#0,
      BREAK#1,
      BREAK#2,
      BREAK#3,
      BREAK#4,
      BREAK#5,
    CONTENT#10(                                                              J. Mogul),
    CONTENT#11(                                                                Compaq),
    CONTENT#12(                                                            H. Frystyk),
    CONTENT#13(                                                               W3C/MIT),
    CONTENT#14(                                                           L. Masinter),
    CONTENT#15(                                                                 Xerox),
    CONTENT#16(                                                              P. Leach),
    CONTENT#17(                                                             Microsoft),
    CONTENT#18(                                                        T. Berners-Lee),
    CONTENT#19(                                                               W3C/MIT),
    CONTENT#20(                                                             June 1999),
      BREAK#21,
      BREAK#22,
    CONTENT#23(                Hypertext Transfer Protocol -- HTTP/1.1),
      BREAK#24,
      BREAK#26,
    CONTENT#27(   This document specifies an Internet standards track protocol for the),
    CONTENT#28(   Internet community, and requests discussion and suggestions for),
    CONTENT#29(   improvements.  Please refer to the current edition of the "Internet),
    CONTENT#30(   Official Protocol Standards" (STD 1) for the standardization state),
    CONTENT#31(   and status of this protocol.  Distribution of this memo is unlimited.),
      BREAK#32,
      BREAK#34,
    CONTENT#35(   Copyright (C) The Internet Society (1999).  All Rights Reserved.),
      BREAK#36,
      BREAK#38,
    CONTENT#39(   The Hypertext Transfer Protocol (HTTP) is an application-level),
    CONTENT#40(   protocol for distributed, collaborative, hypermedia information),
    CONTENT#41(   systems. It is a generic, stateless, protocol which can be used for),
    CONTENT#42(   many tasks beyond its use for hypertext, such as name servers and),
    CONTENT#43(   distributed object management systems, through extension of its),
    CONTENT#44(   request methods, error codes and headers [47]. A feature of HTTP is),
    CONTENT#45(   the typing and negotiation of data representation, allowing systems),
    CONTENT#46(   to be built independently of the data being transferred.),
      BREAK#47,
    CONTENT#48(   HTTP has been in use by the World-Wide Web global information),
    CONTENT#49(   initiative since 1990. This specification defines the protocol),
    CONTENT#50(   referred to as "HTTP/1.1", and is an update to RFC 2068 [33].),
      BREAK#51,
      BREAK#52,
      BREAK#53,
      BREAK#54,
      BREAK#55,
      BREAK#56,
      BREAK#58,
      BREAK#60,
      BREAK#61,
      BREAK#63,
    CONTENT#64(   1   Introduction ...................................................7),
    CONTENT#65(   1.1    Purpose......................................................7),
    CONTENT#66(   1.2   Requirements .................................................8),
    CONTENT#67(   1.3   Terminology ..................................................8),
    CONTENT#68(   1.4   Overall Operation ...........................................12),
    CONTENT#69(   2   Notational Conventions and Generic Grammar ....................14),
    CONTENT#70(   2.1   Augmented BNF ...............................................14),
    CONTENT#71(   2.2   Basic Rules .................................................15),
    CONTENT#72(   3   Protocol Parameters ...........................................17),
    CONTENT#73(   3.1   HTTP Version ................................................17),
    CONTENT#74(   3.2   Uniform Resource Identifiers ................................18),
    CONTENT#75(   3.2.1    General Syntax ...........................................19),
    CONTENT#76(   3.2.2    http URL .................................................19),
    CONTENT#77(   3.2.3    URI Comparison ...........................................20),
    CONTENT#78(   3.3   Date/Time Formats ...........................................20),
    CONTENT#79(   3.3.1    Full Date ................................................20),
    CONTENT#80(   3.3.2    Delta Seconds ............................................21),
    CONTENT#81(   3.4   Character Sets ..............................................21),
    CONTENT#82(   3.4.1    Missing Charset ..........................................22),
    CONTENT#83(   3.5   Content Codings .............................................23),
    CONTENT#84(   3.6   Transfer Codings ............................................24),
    CONTENT#85(   3.6.1    Chunked Transfer Coding ..................................25),
    CONTENT#86(   3.7   Media Types .................................................26),
    CONTENT#87(   3.7.1    Canonicalization and Text Defaults .......................27),
    CONTENT#88(   3.7.2    Multipart Types ..........................................27),
    CONTENT#89(   3.8   Product Tokens ..............................................28),
    CONTENT#90(   3.9   Quality Values ..............................................29),
    CONTENT#91(   3.10  Language Tags ...............................................29),
    CONTENT#92(   3.11  Entity Tags .................................................30),
    CONTENT#93(   3.12  Range Units .................................................30),
    CONTENT#94(   4   HTTP Message ..................................................31),
    CONTENT#95(   4.1   Message Types ...............................................31),
    CONTENT#96(   4.2   Message Headers .............................................31),
    CONTENT#97(   4.3   Message Body ................................................32),
    CONTENT#98(   4.4   Message Length ..............................................33),
    CONTENT#99(   4.5   General Header Fields .......................................34),
    CONTENT#100(   5   Request .......................................................35),
    CONTENT#101(   5.1   Request-Line ................................................35),
    CONTENT#102(   5.1.1    Method ...................................................36),
    CONTENT#103(   5.1.2    Request-URI ..............................................36),
    CONTENT#104(   5.2   The Resource Identified by a Request ........................38),
    CONTENT#105(   5.3   Request Header Fields .......................................38),
    CONTENT#106(   6   Response ......................................................39),
    CONTENT#107(   6.1   Status-Line .................................................39),
    CONTENT#108(   6.1.1    Status Code and Reason Phrase ............................39),
    CONTENT#109(   6.2   Response Header Fields ......................................41),
      BREAK#110,
      BREAK#111,
      BREAK#112,
      BREAK#114,
      BREAK#116,
      BREAK#117,
    CONTENT#118(   7   Entity ........................................................42),
    CONTENT#119(   7.1   Entity Header Fields ........................................42),
    CONTENT#120(   7.2   Entity Body .................................................43),
    CONTENT#121(   7.2.1    Type .....................................................43),
    CONTENT#122(   7.2.2    Entity Length ............................................43),
    CONTENT#123(   8   Connections ...................................................44),
    CONTENT#124(   8.1   Persistent Connections ......................................44),
    CONTENT#125(   8.1.1    Purpose ..................................................44),
    CONTENT#126(   8.1.2    Overall Operation ........................................45),
    CONTENT#127(   8.1.3    Proxy Servers ............................................46),
    CONTENT#128(   8.1.4    Practical Considerations .................................46),
    CONTENT#129(   8.2   Message Transmission Requirements ...........................47),
    CONTENT#130(   8.2.1    Persistent Connections and Flow Control ..................47),
    CONTENT#131(   8.2.2    Monitoring Connections for Error Status Messages .........48),
    CONTENT#132(   8.2.3    Use of the 100 (Continue) Status .........................48),
    CONTENT#133(   8.2.4    Client Behavior if Server Prematurely Closes Connection ..50),
    CONTENT#134(   9   Method Definitions ............................................51),
    CONTENT#135(   9.1   Safe and Idempotent Methods .................................51),
    CONTENT#136(   9.1.1    Safe Methods .............................................51),
    CONTENT#137(   9.1.2    Idempotent Methods .......................................51),
    CONTENT#138(   9.2   OPTIONS .....................................................52),
    CONTENT#139(   9.3   GET .........................................................53),
    CONTENT#140(   9.4   HEAD ........................................................54),
    CONTENT#141(   9.5   POST ........................................................54),
    CONTENT#142(   9.6   PUT .........................................................55),
    CONTENT#143(   9.7   DELETE ......................................................56),
    CONTENT#144(   9.8   TRACE .......................................................56),
    CONTENT#145(   9.9   CONNECT .....................................................57),
    CONTENT#146(   10   Status Code Definitions ......................................57),
    CONTENT#147(   10.1  Informational 1xx ...........................................57),
    CONTENT#148(   10.1.1   100 Continue .............................................58),
    CONTENT#149(   10.1.2   101 Switching Protocols ..................................58),
    CONTENT#150(   10.2  Successful 2xx ..............................................58),
    CONTENT#151(   10.2.1   200 OK ...................................................58),
    CONTENT#152(   10.2.2   201 Created ..............................................59),
    CONTENT#153(   10.2.3   202 Accepted .............................................59),
    CONTENT#154(   10.2.4   203 Non-Authoritative Information ........................59),
    CONTENT#155(   10.2.5   204 No Content ...........................................60),
    CONTENT#156(   10.2.6   205 Reset Content ........................................60),
    CONTENT#157(   10.2.7   206 Partial Content ......................................60),
    CONTENT#158(   10.3  Redirection 3xx .............................................61),
    CONTENT#159(   10.3.1   300 Multiple Choices .....................................61),
    CONTENT#160(   10.3.2   301 Moved Permanently ....................................62),
    CONTENT#161(   10.3.3   302 Found ................................................62),
    CONTENT#162(   10.3.4   303 See Other ............................................63),
    CONTENT#163(   10.3.5   304 Not Modified .........................................63),
    CONTENT#164(   10.3.6   305 Use Proxy ............................................64),
    CONTENT#165(   10.3.7   306 (Unused) .............................................64),
      BREAK#166,
      BREAK#167,
      BREAK#168,
      BREAK#170,
      BREAK#172,
      BREAK#173,
    CONTENT#174(   10.3.8   307 Temporary Redirect ...................................65),
    CONTENT#175(   10.4  Client Error 4xx ............................................65),
    CONTENT#176(   10.4.1    400 Bad Request .........................................65),
    CONTENT#177(   10.4.2    401 Unauthorized ........................................66),
    CONTENT#178(   10.4.3    402 Payment Required ....................................66),
    CONTENT#179(   10.4.4    403 Forbidden ...........................................66),
    CONTENT#180(   10.4.5    404 Not Found ...........................................66),
    CONTENT#181(   10.4.6    405 Method Not Allowed ..................................66),
    CONTENT#182(   10.4.7    406 Not Acceptable ......................................67),
    CONTENT#183(   10.4.8    407 Proxy Authentication Required .......................67),
    CONTENT#184(   10.4.9    408 Request Timeout .....................................67),
    CONTENT#185(   10.4.10   409 Conflict ............................................67),
    CONTENT#186(   10.4.11   410 Gone ................................................68),
    CONTENT#187(   10.4.12   411 Length Required .....................................68),
    CONTENT#188(   10.4.13   412 Precondition Failed .................................68),
    CONTENT#189(   10.4.14   413 Request Entity Too Large ............................69),
    CONTENT#190(   10.4.15   414 Request-URI Too Long ................................69),
    CONTENT#191(   10.4.16   415 Unsupported Media Type ..............................69),
    CONTENT#192(   10.4.17   416 Requested Range Not Satisfiable .....................69),
    CONTENT#193(   10.4.18   417 Expectation Failed ..................................70),
    CONTENT#194(   10.5  Server Error 5xx ............................................70),
    CONTENT#195(   10.5.1   500 Internal Server Error ................................70),
    CONTENT#196(   10.5.2   501 Not Implemented ......................................70),
    CONTENT#197(   10.5.3   502 Bad Gateway ..........................................70),
    CONTENT#198(   10.5.4   503 Service Unavailable ..................................70),
    CONTENT#199(   10.5.5   504 Gateway Timeout ......................................71),
    CONTENT#200(   10.5.6   505 HTTP Version Not Supported ...........................71),
    CONTENT#201(   11   Access Authentication ........................................71),
    CONTENT#202(   12   Content Negotiation ..........................................71),
    CONTENT#203(   12.1  Server-driven Negotiation ...................................72),
    CONTENT#204(   12.2  Agent-driven Negotiation ....................................73),
    CONTENT#205(   12.3  Transparent Negotiation .....................................74),
    CONTENT#206(   13   Caching in HTTP ..............................................74),
    CONTENT#207(   13.1.1   Cache Correctness ........................................75),
    CONTENT#208(   13.1.2   Warnings .................................................76),
    CONTENT#209(   13.1.3   Cache-control Mechanisms .................................77),
    CONTENT#210(   13.1.4   Explicit User Agent Warnings .............................78),
    CONTENT#211(   13.1.5   Exceptions to the Rules and Warnings .....................78),
    CONTENT#212(   13.1.6   Client-controlled Behavior ...............................79),
    CONTENT#213(   13.2  Expiration Model ............................................79),
    CONTENT#214(   13.2.1   Server-Specified Expiration ..............................79),
    CONTENT#215(   13.2.2   Heuristic Expiration .....................................80),
    CONTENT#216(   13.2.3   Age Calculations .........................................80),
    CONTENT#217(   13.2.4   Expiration Calculations ..................................83),
    CONTENT#218(   13.2.5   Disambiguating Expiration Values .........................84),
    CONTENT#219(   13.2.6   Disambiguating Multiple Responses ........................84),
    CONTENT#220(   13.3  Validation Model ............................................85),
    CONTENT#221(   13.3.1   Last-Modified Dates ......................................86),
      BREAK#222,
      BREAK#223,
      BREAK#224,
      BREAK#226,
      BREAK#228,
      BREAK#229,
    CONTENT#230(   13.3.2   Entity Tag Cache Validators ..............................86),
    CONTENT#231(   13.3.3   Weak and Strong Validators ...............................86),
    CONTENT#232(   13.3.4   Rules for When to Use Entity Tags and Last-Modified Dates.89),
    CONTENT#233(   13.3.5   Non-validating Conditionals ..............................90),
    CONTENT#234(   13.4  Response Cacheability .......................................91),
    CONTENT#235(   13.5  Constructing Responses From Caches ..........................92),
    CONTENT#236(   13.5.1   End-to-end and Hop-by-hop Headers ........................92),
    CONTENT#237(   13.5.2   Non-modifiable Headers ...................................92),
    CONTENT#238(   13.5.3   Combining Headers ........................................94),
    CONTENT#239(   13.5.4   Combining Byte Ranges ....................................95),
    CONTENT#240(   13.6  Caching Negotiated Responses ................................95),
    CONTENT#241(   13.7  Shared and Non-Shared Caches ................................96),
    CONTENT#242(   13.8  Errors or Incomplete Response Cache Behavior ................97),
    CONTENT#243(   13.9  Side Effects of GET and HEAD ................................97),
    CONTENT#244(   13.10   Invalidation After Updates or Deletions ...................97),
    CONTENT#245(   13.11   Write-Through Mandatory ...................................98),
    CONTENT#246(   13.12   Cache Replacement .........................................99),
    CONTENT#247(   13.13   History Lists .............................................99),
    CONTENT#248(   14   Header Field Definitions ....................................100),
    CONTENT#249(   14.1  Accept .....................................................100),
    CONTENT#250(   14.2  Accept-Charset .............................................102),
    CONTENT#251(   14.3  Accept-Encoding ............................................102),
    CONTENT#252(   14.4  Accept-Language ............................................104),
    CONTENT#253(   14.5  Accept-Ranges ..............................................105),
    CONTENT#254(   14.6  Age ........................................................106),
    CONTENT#255(   14.7  Allow ......................................................106),
    CONTENT#256(   14.8  Authorization ..............................................107),
    CONTENT#257(   14.9  Cache-Control ..............................................108),
    CONTENT#258(   14.9.1   What is Cacheable .......................................109),
    CONTENT#259(   14.9.2   What May be Stored by Caches ............................110),
    CONTENT#260(   14.9.3   Modifications of the Basic Expiration Mechanism .........111),
    CONTENT#261(   14.9.4   Cache Revalidation and Reload Controls ..................113),
    CONTENT#262(   14.9.5   No-Transform Directive ..................................115),
    CONTENT#263(   14.9.6   Cache Control Extensions ................................116),
    CONTENT#264(   14.10   Connection ...............................................117),
    CONTENT#265(   14.11   Content-Encoding .........................................118),
    CONTENT#266(   14.12   Content-Language .........................................118),
    CONTENT#267(   14.13   Content-Length ...........................................119),
    CONTENT#268(   14.14   Content-Location .........................................120),
    CONTENT#269(   14.15   Content-MD5 ..............................................121),
    CONTENT#270(   14.16   Content-Range ............................................122),
    CONTENT#271(   14.17   Content-Type .............................................124),
    CONTENT#272(   14.18   Date .....................................................124),
    CONTENT#273(   14.18.1   Clockless Origin Server Operation ......................125),
    CONTENT#274(   14.19   ETag .....................................................126),
    CONTENT#275(   14.20   Expect ...................................................126),
    CONTENT#276(   14.21   Expires ..................................................127),
    CONTENT#277(   14.22   From .....................................................128),
      BREAK#278,
      BREAK#279,
      BREAK#280,
      BREAK#282,
      BREAK#284,
      BREAK#285,
    CONTENT#286(   14.23   Host .....................................................128),
    CONTENT#287(   14.24   If-Match .................................................129),
    CONTENT#288(   14.25   If-Modified-Since ........................................130),
    CONTENT#289(   14.26   If-None-Match ............................................132),
    CONTENT#290(   14.27   If-Range .................................................133),
    CONTENT#291(   14.28   If-Unmodified-Since ......................................134),
    CONTENT#292(   14.29   Last-Modified ............................................134),
    CONTENT#293(   14.30   Location .................................................135),
    CONTENT#294(   14.31   Max-Forwards .............................................136),
    CONTENT#295(   14.32   Pragma ...................................................136),
    CONTENT#296(   14.33   Proxy-Authenticate .......................................137),
    CONTENT#297(   14.34   Proxy-Authorization ......................................137),
    CONTENT#298(   14.35   Range ....................................................138),
    CONTENT#299(   14.35.1    Byte Ranges ...........................................138),
    CONTENT#300(   14.35.2    Range Retrieval Requests ..............................139),
    CONTENT#301(   14.36   Referer ..................................................140),
    CONTENT#302(   14.37   Retry-After ..............................................141),
    CONTENT#303(   14.38   Server ...................................................141),
    CONTENT#304(   14.39   TE .......................................................142),
    CONTENT#305(   14.40   Trailer ..................................................143),
    CONTENT#306(   14.41  Transfer-Encoding..........................................143),
    CONTENT#307(   14.42   Upgrade ..................................................144),
    CONTENT#308(   14.43   User-Agent ...............................................145),
    CONTENT#309(   14.44   Vary .....................................................145),
    CONTENT#310(   14.45   Via ......................................................146),
    CONTENT#311(   14.46   Warning ..................................................148),
    CONTENT#312(   14.47   WWW-Authenticate .........................................150),
    CONTENT#313(   15 Security Considerations .......................................150),
    CONTENT#314(   15.1      Personal Information....................................151),
    CONTENT#315(   15.1.1   Abuse of Server Log Information .........................151),
    CONTENT#316(   15.1.2   Transfer of Sensitive Information .......................151),
    CONTENT#317(   15.1.3   Encoding Sensitive Information in URI's .................152),
    CONTENT#318(   15.1.4   Privacy Issues Connected to Accept Headers ..............152),
    CONTENT#319(   15.2  Attacks Based On File and Path Names .......................153),
    CONTENT#320(   15.3  DNS Spoofing ...............................................154),
    CONTENT#321(   15.4  Location Headers and Spoofing ..............................154),
    CONTENT#322(   15.5  Content-Disposition Issues .................................154),
    CONTENT#323(   15.6  Authentication Credentials and Idle Clients ................155),
    CONTENT#324(   15.7  Proxies and Caching ........................................155),
    CONTENT#325(   15.7.1    Denial of Service Attacks on Proxies....................156),
    CONTENT#326(   16   Acknowledgments .............................................156),
    CONTENT#327(   17   References ..................................................158),
    CONTENT#328(   18   Authors' Addresses ..........................................162),
    CONTENT#329(   19   Appendices ..................................................164),
    CONTENT#330(   19.1  Internet Media Type message/http and application/http ......164),
    CONTENT#331(   19.2  Internet Media Type multipart/byteranges ...................165),
    CONTENT#332(   19.3  Tolerant Applications ......................................166),
    CONTENT#333(   19.4  Differences Between HTTP Entities and RFC 2045 Entities ....167),
      BREAK#334,
      BREAK#335,
      BREAK#336,
      BREAK#338,
      BREAK#340,
      BREAK#341,
    CONTENT#342(   19.4.1   MIME-Version ............................................167),
    CONTENT#343(   19.4.2   Conversion to Canonical Form ............................167),
    CONTENT#344(   19.4.3   Conversion of Date Formats ..............................168),
    CONTENT#345(   19.4.4   Introduction of Content-Encoding ........................168),
    CONTENT#346(   19.4.5   No Content-Transfer-Encoding ............................168),
    CONTENT#347(   19.4.6   Introduction of Transfer-Encoding .......................169),
    CONTENT#348(   19.4.7   MHTML and Line Length Limitations .......................169),
    CONTENT#349(   19.5  Additional Features ........................................169),
    CONTENT#350(   19.5.1   Content-Disposition .....................................170),
    CONTENT#351(   19.6  Compatibility with Previous Versions .......................170),
    CONTENT#352(   19.6.1   Changes from HTTP/1.0 ...................................171),
    CONTENT#353(   19.6.2   Compatibility with HTTP/1.0 Persistent Connections ......172),
    CONTENT#354(   19.6.3   Changes from RFC 2068 ...................................172),
    CONTENT#355(   20   Index .......................................................175),
    CONTENT#356(   21   Full Copyright Statement ....................................176),
      BREAK#357,
    SECTION#358(id=1, title=Introduction),
      BREAK#359,
    SECTION#360(id=1.1, title=Purpose),
      BREAK#361,
    CONTENT#362(   The Hypertext Transfer Protocol (HTTP) is an application-level),
    CONTENT#363(   protocol for distributed, collaborative, hypermedia information),
    CONTENT#364(   systems. HTTP has been in use by the World-Wide Web global),
    CONTENT#365(   information initiative since 1990. The first version of HTTP,),
    CONTENT#366(   referred to as HTTP/0.9, was a simple protocol for raw data transfer),
    CONTENT#367(   across the Internet. HTTP/1.0, as defined by RFC 1945 [6], improved),
    CONTENT#368(   the protocol by allowing messages to be in the format of MIME-like),
    CONTENT#369(   messages, containing metainformation about the data transferred and),
    CONTENT#370(   modifiers on the request/response semantics. However, HTTP/1.0 does),
    CONTENT#371(   not sufficiently take into consideration the effects of hierarchical),
    CONTENT#372(   proxies, caching, the need for persistent connections, or virtual),
    CONTENT#373(   hosts. In addition, the proliferation of incompletely-implemented),
    CONTENT#374(   applications calling themselves "HTTP/1.0" has necessitated a),
    CONTENT#375(   protocol version change in order for two communicating applications),
    CONTENT#376(   to determine each other's true capabilities.),
      BREAK#377,
    CONTENT#378(   This specification defines the protocol referred to as "HTTP/1.1".),
    CONTENT#379(   This protocol includes more stringent requirements than HTTP/1.0 in),
    CONTENT#380(   order to ensure reliable implementation of its features.),
      BREAK#381,
    CONTENT#382(   Practical information systems require more functionality than simple),
    CONTENT#383(   retrieval, including search, front-end update, and annotation. HTTP),
    CONTENT#384(   allows an open-ended set of methods and headers that indicate the),
    CONTENT#385(   purpose of a request [47]. It builds on the discipline of reference),
    CONTENT#386(   provided by the Uniform Resource Identifier (URI) [3], as a location),
    CONTENT#387(   (URL) [4] or name (URN) [20], for indicating the resource to which a),
      BREAK#388,
      BREAK#389,
      BREAK#390,
      BREAK#391,
      BREAK#392,
      BREAK#394,
      BREAK#396,
      BREAK#397,
    CONTENT#398(   method is to be applied. Messages are passed in a format similar to),
    CONTENT#399(   that used by Internet mail [9] as defined by the Multipurpose),
    CONTENT#400(   Internet Mail Extensions (MIME) [7].),
      BREAK#401,
    CONTENT#402(   HTTP is also used as a generic protocol for communication between),
    CONTENT#403(   user agents and proxies/gateways to other Internet systems, including),
    CONTENT#404(   those supported by the SMTP [16], NNTP [13], FTP [18], Gopher [2],),
    CONTENT#405(   and WAIS [10] protocols. In this way, HTTP allows basic hypermedia),
    CONTENT#406(   access to resources available from diverse applications.),
      BREAK#407,
    SECTION#408(id=1.2, title=Requirements),
      BREAK#409,
    CONTENT#410(   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",),
    CONTENT#411(   "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this),
    CONTENT#412(   document are to be interpreted as described in RFC 2119 [34].),
      BREAK#413,
    CONTENT#414(   An implementation is not compliant if it fails to satisfy one or more),
    CONTENT#415(   of the MUST or REQUIRED level requirements for the protocols it),
    CONTENT#416(   implements. An implementation that satisfies all the MUST or REQUIRED),
    CONTENT#417(   level and all the SHOULD level requirements for its protocols is said),
    CONTENT#418(   to be "unconditionally compliant"; one that satisfies all the MUST),
    CONTENT#419(   level requirements but not all the SHOULD level requirements for its),
    CONTENT#420(   protocols is said to be "conditionally compliant."),
      BREAK#421,
    SECTION#422(id=1.3, title=Terminology),
      BREAK#423,
    CONTENT#424(   This specification uses a number of terms to refer to the roles),
    CONTENT#425(   played by participants in, and objects of, the HTTP communication.),
      BREAK#426,
    CONTENT#427(   connection),
    CONTENT#428(      A transport layer virtual circuit established between two programs),
    CONTENT#429(      for the purpose of communication.),
      BREAK#430,
    CONTENT#431(   message),
    CONTENT#432(      The basic unit of HTTP communication, consisting of a structured),
    CONTENT#433(      sequence of octets matching the syntax defined in section 4 and),
    CONTENT#434(      transmitted via the connection.),
      BREAK#435,
    CONTENT#436(   request),
    CONTENT#437(      An HTTP request message, as defined in section 5.),
      BREAK#438,
    CONTENT#439(   response),
    CONTENT#440(      An HTTP response message, as defined in section 6.),
      BREAK#441,
      BREAK#442,
      BREAK#443,
      BREAK#444,
      BREAK#445,
      BREAK#446,
      BREAK#447,
      BREAK#448,
      BREAK#450,
      BREAK#452,
      BREAK#453,
    CONTENT#454(   resource),
    CONTENT#455(      A network data object or service that can be identified by a URI,),
    CONTENT#456(      as defined in section 3.2. Resources may be available in multiple),
    CONTENT#457(      representations (e.g. multiple languages, data formats, size, and),
    CONTENT#458(      resolutions) or vary in other ways.),
      BREAK#459,
    CONTENT#460(   entity),
    CONTENT#461(      The information transferred as the payload of a request or),
    CONTENT#462(      response. An entity consists of metainformation in the form of),
    CONTENT#463(      entity-header fields and content in the form of an entity-body, as),
    CONTENT#464(      described in section 7.),
      BREAK#465,
    CONTENT#466(   representation),
    CONTENT#467(      An entity included with a response that is subject to content),
    CONTENT#468(      negotiation, as described in section 12. There may exist multiple),
    CONTENT#469(      representations associated with a particular response status.),
      BREAK#470,
    CONTENT#471(   content negotiation),
    CONTENT#472(      The mechanism for selecting the appropriate representation when),
    CONTENT#473(      servicing a request, as described in section 12. The),
    CONTENT#474(      representation of entities in any response can be negotiated),
    CONTENT#475(      (including error responses).),
      BREAK#476,
    CONTENT#477(   variant),
    CONTENT#478(      A resource may have one, or more than one, representation(s)),
    CONTENT#479(      associated with it at any given instant. Each of these),
    CONTENT#480(      representations is termed a `varriant'.  Use of the term `variant'),
    CONTENT#481(      does not necessarily imply that the resource is subject to content),
    CONTENT#482(      negotiation.),
      BREAK#483,
    CONTENT#484(   client),
    CONTENT#485(      A program that establishes connections for the purpose of sending),
    CONTENT#486(      requests.),
      BREAK#487,
    CONTENT#488(   user agent),
    CONTENT#489(      The client which initiates a request. These are often browsers,),
    CONTENT#490(      editors, spiders (web-traversing robots), or other end user tools.),
      BREAK#491,
    CONTENT#492(   server),
    CONTENT#493(      An application program that accepts connections in order to),
    CONTENT#494(      service requests by sending back responses. Any given program may),
    CONTENT#495(      be capable of being both a client and a server; our use of these),
    CONTENT#496(      terms refers only to the role being performed by the program for a),
    CONTENT#497(      particular connection, rather than to the program's capabilities),
    CONTENT#498(      in general. Likewise, any server may act as an origin server,),
    CONTENT#499(      proxy, gateway, or tunnel, switching behavior based on the nature),
    CONTENT#500(      of each request.),
      BREAK#501,
      BREAK#502,
      BREAK#503,
      BREAK#504,
      BREAK#506,
      BREAK#508,
      BREAK#509,
    CONTENT#510(   origin server),
    CONTENT#511(      The server on which a given resource resides or is to be created.),
      BREAK#512,
    CONTENT#513(   proxy),
    CONTENT#514(      An intermediary program which acts as both a server and a client),
    CONTENT#515(      for the purpose of making requests on behalf of other clients.),
    CONTENT#516(      Requests are serviced internally or by passing them on, with),
    CONTENT#517(      possible translation, to other servers. A proxy MUST implement),
    CONTENT#518(      both the client and server requirements of this specification. A),
    CONTENT#519(      "transparent proxy" is a proxy that does not modify the request or),
    CONTENT#520(      response beyond what is required for proxy authentication and),
    CONTENT#521(      identification. A "non-transparent proxy" is a proxy that modifies),
    CONTENT#522(      the request or response in order to provide some added service to),
    CONTENT#523(      the user agent, such as group annotation services, media type),
    CONTENT#524(      transformation, protocol reduction, or anonymity filtering. Except),
    CONTENT#525(      where either transparent or non-transparent behavior is explicitly),
    CONTENT#526(      stated, the HTTP proxy requirements apply to both types of),
    CONTENT#527(      proxies.),
      BREAK#528,
    CONTENT#529(   gateway),
    CONTENT#530(      A server which acts as an intermediary for some other server.),
    CONTENT#531(      Unlike a proxy, a gateway receives requests as if it were the),
    CONTENT#532(      origin server for the requested resource; the requesting client),
    CONTENT#533(      may not be aware that it is communicating with a gateway.),
      BREAK#534,
    CONTENT#535(   tunnel),
    CONTENT#536(      An intermediary program which is acting as a blind relay between),
    CONTENT#537(      two connections. Once active, a tunnel is not considered a party),
    CONTENT#538(      to the HTTP communication, though the tunnel may have been),
    CONTENT#539(      initiated by an HTTP request. The tunnel ceases to exist when both),
    CONTENT#540(      ends of the relayed connections are closed.),
      BREAK#541,
    CONTENT#542(   cache),
    CONTENT#543(      A program's local store of response messages and the subsystem),
    CONTENT#544(      that controls its message storage, retrieval, and deletion. A),
    CONTENT#545(      cache stores cacheable responses in order to reduce the response),
    CONTENT#546(      time and network bandwidth consumption on future, equivalent),
    CONTENT#547(      requests. Any client or server may include a cache, though a cache),
    CONTENT#548(      cannot be used by a server that is acting as a tunnel.),
      BREAK#549,
    CONTENT#550(   cacheable),
    CONTENT#551(      A response is cacheable if a cache is allowed to store a copy of),
    CONTENT#552(      the response message for use in answering subsequent requests. The),
    CONTENT#553(      rules for determining the cacheability of HTTP responses are),
    CONTENT#554(      defined in section 13. Even if a resource is cacheable, there may),
    CONTENT#555(      be additional constraints on whether a cache can use the cached),
    CONTENT#556(      copy for a particular request.),
      BREAK#557,
      BREAK#558,
      BREAK#559,
      BREAK#560,
      BREAK#562,
      BREAK#564,
      BREAK#565,
    CONTENT#566(   first-hand),
    CONTENT#567(      A response is first-hand if it comes directly and without),
    CONTENT#568(      unnecessary delay from the origin server, perhaps via one or more),
    CONTENT#569(      proxies. A response is also first-hand if its validity has just),
    CONTENT#570(      been checked directly with the origin server.),
      BREAK#571,
    CONTENT#572(   explicit expiration time),
    CONTENT#573(      The time at which the origin server intends that an entity should),
    CONTENT#574(      no longer be returned by a cache without further validation.),
      BREAK#575,
    CONTENT#576(   heuristic expiration time),
    CONTENT#577(      An expiration time assigned by a cache when no explicit expiration),
    CONTENT#578(      time is available.),
      BREAK#579,
    CONTENT#580(   age),
    CONTENT#581(      The age of a response is the time since it was sent by, or),
    CONTENT#582(      successfully validated with, the origin server.),
      BREAK#583,
    CONTENT#584(   freshness lifetime),
    CONTENT#585(      The length of time between the generation of a response and its),
    CONTENT#586(      expiration time.),
      BREAK#587,
    CONTENT#588(   fresh),
    CONTENT#589(      A response is fresh if its age has not yet exceeded its freshness),
    CONTENT#590(      lifetime.),
      BREAK#591,
    CONTENT#592(   stale),
    CONTENT#593(      A response is stale if its age has passed its freshness lifetime.),
      BREAK#594,
    CONTENT#595(   semantically transparent),
    CONTENT#596(      A cache behaves in a "semantically transparent" manner, with),
    CONTENT#597(      respect to a particular response, when its use affects neither the),
    CONTENT#598(      requesting client nor the origin server, except to improve),
    CONTENT#599(      performance. When a cache is semantically transparent, the client),
    CONTENT#600(      receives exactly the same response (except for hop-by-hop headers)),
    CONTENT#601(      that it would have received had its request been handled directly),
    CONTENT#602(      by the origin server.),
      BREAK#603,
    CONTENT#604(   validator),
    CONTENT#605(      A protocol element (e.g., an entity tag or a Last-Modified time)),
    CONTENT#606(      that is used to find out whether a cache entry is an equivalent),
    CONTENT#607(      copy of an entity.),
      BREAK#608,
    CONTENT#609(   upstream/downstream),
    CONTENT#610(      Upstream and downstream describe the flow of a message: all),
    CONTENT#611(      messages flow from upstream to downstream.),
      BREAK#612,
      BREAK#613,
      BREAK#614,
      BREAK#615,
      BREAK#616,
      BREAK#618,
      BREAK#620,
      BREAK#621,
    CONTENT#622(   inbound/outbound),
    CONTENT#623(      Inbound and outbound refer to the request and response paths for),
    CONTENT#624(      messages: "inbound" means "traveling toward the origin server",),
    CONTENT#625(      and "outbound" means "traveling toward the user agent"),
      BREAK#626,
    SECTION#627(id=1.4, title=Overall Operation),
      BREAK#628,
    CONTENT#629(   The HTTP protocol is a request/response protocol. A client sends a),
    CONTENT#630(   request to the server in the form of a request method, URI, and),
    CONTENT#631(   protocol version, followed by a MIME-like message containing request),
    CONTENT#632(   modifiers, client information, and possible body content over a),
    CONTENT#633(   connection with a server. The server responds with a status line,),
    CONTENT#634(   including the message's protocol version and a success or error code,),
    CONTENT#635(   followed by a MIME-like message containing server information, entity),
    CONTENT#636(   metainformation, and possible entity-body content. The relationship),
    CONTENT#637(   between HTTP and MIME is described in appendix 19.4.),
      BREAK#638,
    CONTENT#639(   Most HTTP communication is initiated by a user agent and consists of),
    CONTENT#640(   a request to be applied to a resource on some origin server. In the),
    CONTENT#641(   simplest case, this may be accomplished via a single connection (v)),
    CONTENT#642(   between the user agent (UA) and the origin server (O).),
      BREAK#643,
    CONTENT#644(          request chain ------------------------>),
    CONTENT#645(       UA -------------------v------------------- O),
    CONTENT#646(          <----------------------- response chain),
      BREAK#647,
    CONTENT#648(   A more complicated situation occurs when one or more intermediaries),
    CONTENT#649(   are present in the request/response chain. There are three common),
    CONTENT#650(   forms of intermediary: proxy, gateway, and tunnel. A proxy is a),
    CONTENT#651(   forwarding agent, receiving requests for a URI in its absolute form,),
    CONTENT#652(   rewriting all or part of the message, and forwarding the reformatted),
    CONTENT#653(   request toward the server identified by the URI. A gateway is a),
    CONTENT#654(   receiving agent, acting as a layer above some other server(s) and, if),
    CONTENT#655(   necessary, translating the requests to the underlying server's),
    CONTENT#656(   protocol. A tunnel acts as a relay point between two connections),
    CONTENT#657(   without changing the messages; tunnels are used when the),
    CONTENT#658(   communication needs to pass through an intermediary (such as a),
    CONTENT#659(   firewall) even when the intermediary cannot understand the contents),
    CONTENT#660(   of the messages.),
      BREAK#661,
    CONTENT#662(          request chain -------------------------------------->),
    CONTENT#663(       UA -----v----- A -----v----- B -----v----- C -----v----- O),
    CONTENT#664(          <------------------------------------- response chain),
      BREAK#665,
    CONTENT#666(   The figure above shows three intermediaries (A, B, and C) between the),
    CONTENT#667(   user agent and origin server. A request or response message that),
    CONTENT#668(   travels the whole chain will pass through four separate connections.),
    CONTENT#669(   This distinction is important because some HTTP communication options),
      BREAK#670,
      BREAK#671,
      BREAK#672,
      BREAK#674,
      BREAK#676,
      BREAK#677,
    CONTENT#678(   may apply only to the connection with the nearest, non-tunnel),
    CONTENT#679(   neighbor, only to the end-points of the chain, or to all connections),
    CONTENT#680(   along the chain. Although the diagram is linear, each participant may),
    CONTENT#681(   be engaged in multiple, simultaneous communications. For example, B),
    CONTENT#682(   may be receiving requests from many clients other than A, and/or),
    CONTENT#683(   forwarding requests to servers other than C, at the same time that it),
    CONTENT#684(   is handling A's request.),
      BREAK#685,
    CONTENT#686(   Any party to the communication which is not acting as a tunnel may),
    CONTENT#687(   employ an internal cache for handling requests. The effect of a cache),
    CONTENT#688(   is that the request/response chain is shortened if one of the),
    CONTENT#689(   participants along the chain has a cached response applicable to that),
    CONTENT#690(   request. The following illustrates the resulting chain if B has a),
    CONTENT#691(   cached copy of an earlier response from O (via C) for a request which),
    CONTENT#692(   has not been cached by UA or A.),
      BREAK#693,
    CONTENT#694(          request chain ---------->),
    CONTENT#695(       UA -----v----- A -----v----- B - - - - - - C - - - - - - O),
    CONTENT#696(          <--------- response chain),
      BREAK#697,
    CONTENT#698(   Not all responses are usefully cacheable, and some requests may),
    CONTENT#699(   contain modifiers which place special requirements on cache behavior.),
    CONTENT#700(   HTTP requirements for cache behavior and cacheable responses are),
    CONTENT#701(   defined in section 13.),
      BREAK#702,
    CONTENT#703(   In fact, there are a wide variety of architectures and configurations),
    CONTENT#704(   of caches and proxies currently being experimented with or deployed),
    CONTENT#705(   across the World Wide Web. These systems include national hierarchies),
    CONTENT#706(   of proxy caches to save transoceanic bandwidth, systems that),
    CONTENT#707(   broadcast or multicast cache entries, organizations that distribute),
    CONTENT#708(   subsets of cached data via CD-ROM, and so on. HTTP systems are used),
    CONTENT#709(   in corporate intranets over high-bandwidth links, and for access via),
    CONTENT#710(   PDAs with low-power radio links and intermittent connectivity. The),
    CONTENT#711(   goal of HTTP/1.1 is to support the wide diversity of configurations),
    CONTENT#712(   already deployed while introducing protocol constructs that meet the),
    CONTENT#713(   needs of those who build web applications that require high),
    CONTENT#714(   reliability and, failing that, at least reliable indications of),
    CONTENT#715(   failure.),
      BREAK#716,
    CONTENT#717(   HTTP communication usually takes place over TCP/IP connections. The),
    CONTENT#718(   default port is TCP 80 [19], but other ports can be used. This does),
    CONTENT#719(   not preclude HTTP from being implemented on top of any other protocol),
    CONTENT#720(   on the Internet, or on other networks. HTTP only presumes a reliable),
    CONTENT#721(   transport; any protocol that provides such guarantees can be used;),
    CONTENT#722(   the mapping of the HTTP/1.1 request and response structures onto the),
    CONTENT#723(   transport data units of the protocol in question is outside the scope),
    CONTENT#724(   of this specification.),
      BREAK#725,
      BREAK#726,
      BREAK#727,
      BREAK#728,
      BREAK#730,
      BREAK#732,
      BREAK#733,
    CONTENT#734(   In HTTP/1.0, most implementations used a new connection for each),
    CONTENT#735(   request/response exchange. In HTTP/1.1, a connection may be used for),
    CONTENT#736(   one or more request/response exchanges, although connections may be),
    CONTENT#737(   closed for a variety of reasons (see section 8.1).),
      BREAK#738,
    SECTION#739(id=2, title=Notational Conventions and Generic Grammar),
      BREAK#740,
    SECTION#741(id=2.1, title=Augmented BNF),
      BREAK#742,
    CONTENT#743(   All of the mechanisms specified in this document are described in),
    CONTENT#744(   both prose and an augmented Backus-Naur Form (BNF) similar to that),
    CONTENT#745(   used by RFC 822 [9]. Implementors will need to be familiar with the),
    CONTENT#746(   notation in order to understand this specification. The augmented BNF),
    CONTENT#747(   includes the following constructs:),
      BREAK#748,
    CONTENT#749(   name = definition),
    CONTENT#750(      The name of a rule is simply the name itself (without any),
    CONTENT#751(      enclosing "<" and ">") and is separated from its definition by the),
    CONTENT#752(      equal "=" character. White space is only significant in that),
    CONTENT#753(      indentation of continuation lines is used to indicate a rule),
    CONTENT#754(      definition that spans more than one line. Certain basic rules are),
    CONTENT#755(      in uppercase, such as SP, LWS, HT, CRLF, DIGIT, ALPHA, etc. Angle),
    CONTENT#756(      brackets are used within definitions whenever their presence will),
    CONTENT#757(      facilitate discerning the use of rule names.),
      BREAK#758,
    CONTENT#759(   "literal"),
    CONTENT#760(      Quotation marks surround literal text. Unless stated otherwise,),
    CONTENT#761(      the text is case-insensitive.),
      BREAK#762,
    CONTENT#763(   rule1 | rule2),
    CONTENT#764(      Elements separated by a bar ("|") are alternatives, e.g., "yes |),
    CONTENT#765(      no" will accept yes or no.),
      BREAK#766,
    CONTENT#767(   (rule1 rule2)),
    CONTENT#768(      Elements enclosed in parentheses are treated as a single element.),
    CONTENT#769(      Thus, "(elem (foo | bar) elem)" allows the token sequences "elem),
    CONTENT#770(      foo elem" and "elem bar elem".),
      BREAK#771,
    CONTENT#772(   *rule),
    CONTENT#773(      The character "*" preceding an element indicates repetition. The),
    CONTENT#774(      full form is "<n>*<m>element" indicating at least <n> and at most),
    CONTENT#775(      <m> occurrences of element. Default values are 0 and infinity so),
    CONTENT#776(      that "*(element)" allows any number, including zero; "1*element"),
    CONTENT#777(      requires at least one; and "1*2element" allows one or two.),
      BREAK#778,
    CONTENT#779(   [rule]),
    CONTENT#780(      Square brackets enclose optional elements; "[foo bar]" is),
    CONTENT#781(      equivalent to "*1(foo bar)".),
      BREAK#782,
      BREAK#783,
      BREAK#784,
      BREAK#786,
      BREAK#788,
      BREAK#789,
    CONTENT#790(   N rule),
    CONTENT#791(      Specific repetition: "<n>(element)" is equivalent to),
    CONTENT#792(      "<n>*<n>(element)"; that is, exactly <n> occurrences of (element).),
    CONTENT#793(      Thus 2DIGIT is a 2-digit number, and 3ALPHA is a string of three),
    CONTENT#794(      alphabetic characters.),
      BREAK#795,
    CONTENT#796(   #rule),
    CONTENT#797(      A construct "#" is defined, similar to "*", for defining lists of),
    CONTENT#798(      elements. The full form is "<n>#<m>element" indicating at least),
    CONTENT#799(      <n> and at most <m> elements, each separated by one or more commas),
    CONTENT#800(      (",") and OPTIONAL linear white space (LWS). This makes the usual),
    CONTENT#801(      form of lists very easy; a rule such as),
    CONTENT#802(         ( *LWS element *( *LWS "," *LWS element ))),
    CONTENT#803(      can be shown as),
    CONTENT#804(         1#element),
    CONTENT#805(      Wherever this construct is used, null elements are allowed, but do),
    CONTENT#806(      not contribute to the count of elements present. That is,),
    CONTENT#807(      "(element), , (element) " is permitted, but counts as only two),
    CONTENT#808(      elements. Therefore, where at least one element is required, at),
    CONTENT#809(      least one non-null element MUST be present. Default values are 0),
    CONTENT#810(      and infinity so that "#element" allows any number, including zero;),
    CONTENT#811(      "1#element" requires at least one; and "1#2element" allows one or),
    CONTENT#812(      two.),
      BREAK#813,
    CONTENT#814(   ; comment),
    CONTENT#815(      A semi-colon, set off some distance to the right of rule text,),
    CONTENT#816(      starts a comment that continues to the end of line. This is a),
    CONTENT#817(      simple way of including useful notes in parallel with the),
    CONTENT#818(      specifications.),
      BREAK#819,
    CONTENT#820(   implied *LWS),
    CONTENT#821(      The grammar described by this specification is word-based. Except),
    CONTENT#822(      where noted otherwise, linear white space (LWS) can be included),
    CONTENT#823(      between any two adjacent words (token or quoted-string), and),
    CONTENT#824(      between adjacent words and separators, without changing the),
    CONTENT#825(      interpretation of a field. At least one delimiter (LWS and/or),
      BREAK#826,
    CONTENT#827(      separators) MUST exist between any two tokens (for the definition),
    CONTENT#828(      of "token" below), since they would otherwise be interpreted as a),
    CONTENT#829(      single token.),
      BREAK#830,
    SECTION#831(id=2.2, title=Basic Rules),
      BREAK#832,
    CONTENT#833(   The following rules are used throughout this specification to),
    CONTENT#834(   describe basic parsing constructs. The US-ASCII coded character set),
    CONTENT#835(   is defined by ANSI X3.4-1986 [21].),
      BREAK#836,
      BREAK#837,
      BREAK#838,
      BREAK#839,
      BREAK#840,
      BREAK#842,
      BREAK#844,
      BREAK#845,
    CONTENT#846(       OCTET          = <any 8-bit sequence of data>),
    CONTENT#847(       CHAR           = <any US-ASCII character (octets 0 - 127)>),
    CONTENT#848(       UPALPHA        = <any US-ASCII uppercase letter "A".."Z">),
    CONTENT#849(       LOALPHA        = <any US-ASCII lowercase letter "a".."z">),
    CONTENT#850(       ALPHA          = UPALPHA | LOALPHA),
    CONTENT#851(       DIGIT          = <any US-ASCII digit "0".."9">),
    CONTENT#852(       CTL            = <any US-ASCII control character),
    CONTENT#853(                        (octets 0 - 31) and DEL (127)>),
    CONTENT#854(       CR             = <US-ASCII CR, carriage return (13)>),
    CONTENT#855(       LF             = <US-ASCII LF, linefeed (10)>),
    CONTENT#856(       SP             = <US-ASCII SP, space (32)>),
    CONTENT#857(       HT             = <US-ASCII HT, horizontal-tab (9)>),
    CONTENT#858(       <">            = <US-ASCII double-quote mark (34)>),
      BREAK#859,
    CONTENT#860(   HTTP/1.1 defines the sequence CR LF as the end-of-line marker for all),
    CONTENT#861(   protocol elements except the entity-body (see appendix 19.3 for),
    CONTENT#862(   tolerant applications). The end-of-line marker within an entity-body),
    CONTENT#863(   is defined by its associated media type, as described in section 3.7.),
      BREAK#864,
    CONTENT#865(       CRLF           = CR LF),
      BREAK#866,
    CONTENT#867(   HTTP/1.1 header field values can be folded onto multiple lines if the),
    CONTENT#868(   continuation line begins with a space or horizontal tab. All linear),
    CONTENT#869(   white space, including folding, has the same semantics as SP. A),
    CONTENT#870(   recipient MAY replace any linear white space with a single SP before),
    CONTENT#871(   interpreting the field value or forwarding the message downstream.),
      BREAK#872,
    CONTENT#873(       LWS            = [CRLF] 1*( SP | HT )),
      BREAK#874,
    CONTENT#875(   The TEXT rule is only used for descriptive field contents and values),
    CONTENT#876(   that are not intended to be interpreted by the message parser. Words),
    CONTENT#877(   of *TEXT MAY contain characters from character sets other than ISO-),
    CONTENT#878(   8859-1 [22] only when encoded according to the rules of RFC 2047),
    CONTENT#879(   [14].),
      BREAK#880,
    CONTENT#881(       TEXT           = <any OCTET except CTLs,),
    CONTENT#882(                        but including LWS>),
      BREAK#883,
    CONTENT#884(   A CRLF is allowed in the definition of TEXT only as part of a header),
    CONTENT#885(   field continuation. It is expected that the folding LWS will be),
    CONTENT#886(   replaced with a single SP before interpretation of the TEXT value.),
      BREAK#887,
    CONTENT#888(   Hexadecimal numeric characters are used in several protocol elements.),
      BREAK#889,
    CONTENT#890(       HEX            = "A" | "B" | "C" | "D" | "E" | "F"),
    CONTENT#891(                      | "a" | "b" | "c" | "d" | "e" | "f" | DIGIT),
      BREAK#892,
      BREAK#893,
      BREAK#894,
      BREAK#895,
      BREAK#896,
      BREAK#898,
      BREAK#900,
      BREAK#901,
    CONTENT#902(   Many HTTP/1.1 header field values consist of words separated by LWS),
    CONTENT#903(   or special characters. These special characters MUST be in a quoted),
    CONTENT#904(   string to be used within a parameter value (as defined in section),
    CONTENT#905(   3.6).),
      BREAK#906,
    CONTENT#907(       token          = 1*<any CHAR except CTLs or separators>),
    CONTENT#908(       separators     = "(" | ")" | "<" | ">" | "@"),
    CONTENT#909(                      | "," | ";" | ":" | "\" | <">),
    CONTENT#910(                      | "/" | "[" | "]" | "?" | "="),
    CONTENT#911(                      | "{" | "}" | SP | HT),
      BREAK#912,
    CONTENT#913(   Comments can be included in some HTTP header fields by surrounding),
    CONTENT#914(   the comment text with parentheses. Comments are only allowed in),
    CONTENT#915(   fields containing "comment" as part of their field value definition.),
    CONTENT#916(   In all other fields, parentheses are considered part of the field),
    CONTENT#917(   value.),
      BREAK#918,
    CONTENT#919(       comment        = "(" *( ctext | quoted-pair | comment ) ")"),
    CONTENT#920(       ctext          = <any TEXT excluding "(" and ")">),
      BREAK#921,
    CONTENT#922(   A string of text is parsed as a single word if it is quoted using),
    CONTENT#923(   double-quote marks.),
      BREAK#924,
    CONTENT#925(       quoted-string  = ( <"> *(qdtext | quoted-pair ) <"> )),
    CONTENT#926(       qdtext         = <any TEXT except <">>),
      BREAK#927,
    CONTENT#928(   The backslash character ("\") MAY be used as a single-character),
    CONTENT#929(   quoting mechanism only within quoted-string and comment constructs.),
      BREAK#930,
    CONTENT#931(       quoted-pair    = "\" CHAR),
      BREAK#932,
    SECTION#933(id=3, title=Protocol Parameters),
      BREAK#934,
    SECTION#935(id=3.1, title=HTTP Version),
      BREAK#936,
    CONTENT#937(   HTTP uses a "<major>.<minor>" numbering scheme to indicate versions),
    CONTENT#938(   of the protocol. The protocol versioning policy is intended to allow),
    CONTENT#939(   the sender to indicate the format of a message and its capacity for),
    CONTENT#940(   understanding further HTTP communication, rather than the features),
    CONTENT#941(   obtained via that communication. No change is made to the version),
    CONTENT#942(   number for the addition of message components which do not affect),
    CONTENT#943(   communication behavior or which only add to extensible field values.),
    CONTENT#944(   The <minor> number is incremented when the changes made to the),
    CONTENT#945(   protocol add features which do not change the general message parsing),
    CONTENT#946(   algorithm, but which may add to the message semantics and imply),
    CONTENT#947(   additional capabilities of the sender. The <major> number is),
    CONTENT#948(   incremented when the format of a message within the protocol is),
    CONTENT#949(   changed. See RFC 2145 [36] for a fuller explanation.),
      BREAK#950,
      BREAK#951,
      BREAK#952,
      BREAK#954,
      BREAK#956,
      BREAK#957,
    CONTENT#958(   The version of an HTTP message is indicated by an HTTP-Version field),
    CONTENT#959(   in the first line of the message.),
      BREAK#960,
    CONTENT#961(       HTTP-Version   = "HTTP" "/" 1*DIGIT "." 1*DIGIT),
      BREAK#962,
    CONTENT#963(   Note that the major and minor numbers MUST be treated as separate),
    CONTENT#964(   integers and that each MAY be incremented higher than a single digit.),
    CONTENT#965(   Thus, HTTP/2.4 is a lower version than HTTP/2.13, which in turn is),
    CONTENT#966(   lower than HTTP/12.3. Leading zeros MUST be ignored by recipients and),
    CONTENT#967(   MUST NOT be sent.),
      BREAK#968,
    CONTENT#969(   An application that sends a request or response message that includes),
    CONTENT#970(   HTTP-Version of "HTTP/1.1" MUST be at least conditionally compliant),
    CONTENT#971(   with this specification. Applications that are at least conditionally),
    CONTENT#972(   compliant with this specification SHOULD use an HTTP-Version of),
    CONTENT#973(   "HTTP/1.1" in their messages, and MUST do so for any message that is),
    CONTENT#974(   not compatible with HTTP/1.0. For more details on when to send),
    CONTENT#975(   specific HTTP-Version values, see RFC 2145 [36].),
      BREAK#976,
    CONTENT#977(   The HTTP version of an application is the highest HTTP version for),
    CONTENT#978(   which the application is at least conditionally compliant.),
      BREAK#979,
    CONTENT#980(   Proxy and gateway applications need to be careful when forwarding),
    CONTENT#981(   messages in protocol versions different from that of the application.),
    CONTENT#982(   Since the protocol version indicates the protocol capability of the),
    CONTENT#983(   sender, a proxy/gateway MUST NOT send a message with a version),
    CONTENT#984(   indicator which is greater than its actual version. If a higher),
    CONTENT#985(   version request is received, the proxy/gateway MUST either downgrade),
    CONTENT#986(   the request version, or respond with an error, or switch to tunnel),
    CONTENT#987(   behavior.),
      BREAK#988,
    CONTENT#989(   Due to interoperability problems with HTTP/1.0 proxies discovered),
    CONTENT#990(   since the publication of RFC 2068[33], caching proxies MUST, gateways),
    CONTENT#991(   MAY, and tunnels MUST NOT upgrade the request to the highest version),
    CONTENT#992(   they support. The proxy/gateway's response to that request MUST be in),
    CONTENT#993(   the same major version as the request.),
      BREAK#994,
    CONTENT#995(      Note: Converting between versions of HTTP may involve modification),
    CONTENT#996(      of header fields required or forbidden by the versions involved.),
      BREAK#997,
    SECTION#998(id=3.2, title=Uniform Resource Identifiers),
      BREAK#999,
    CONTENT#1000(   URIs have been known by many names: WWW addresses, Universal Document),
    CONTENT#1001(   Identifiers, Universal Resource Identifiers [3], and finally the),
    CONTENT#1002(   combination of Uniform Resource Locators (URL) [4] and Names (URN)),
    CONTENT#1003(   [20]. As far as HTTP is concerned, Uniform Resource Identifiers are),
    CONTENT#1004(   simply formatted strings which identify--via name, location, or any),
    CONTENT#1005(   other characteristic--a resource.),
      BREAK#1006,
      BREAK#1007,
      BREAK#1008,
      BREAK#1010,
      BREAK#1012,
      BREAK#1013,
    SECTION#1014(id=3.2.1, title=General Syntax),
      BREAK#1015,
    CONTENT#1016(   URIs in HTTP can be represented in absolute form or relative to some),
    CONTENT#1017(   known base URI [11], depending upon the context of their use. The two),
    CONTENT#1018(   forms are differentiated by the fact that absolute URIs always begin),
    CONTENT#1019(   with a scheme name followed by a colon. For definitive information on),
    CONTENT#1020(   URL syntax and semantics, see "Uniform Resource Identifiers (URI):),
    CONTENT#1021(   Generic Syntax and Semantics," RFC 2396 [42] (which replaces RFCs),
    CONTENT#1022(   1738 [4] and RFC 1808 [11]). This specification adopts the),
    CONTENT#1023(   definitions of "URI-reference", "absoluteURI", "relativeURI", "port",),
    CONTENT#1024(   "host","abs_path", "rel_path", and "authority" from that),
    CONTENT#1025(   specification.),
      BREAK#1026,
    CONTENT#1027(   The HTTP protocol does not place any a priori limit on the length of),
    CONTENT#1028(   a URI. Servers MUST be able to handle the URI of any resource they),
    CONTENT#1029(   serve, and SHOULD be able to handle URIs of unbounded length if they),
    CONTENT#1030(   provide GET-based forms that could generate such URIs. A server),
    CONTENT#1031(   SHOULD return 414 (Request-URI Too Long) status if a URI is longer),
    CONTENT#1032(   than the server can handle (see section 10.4.15).),
      BREAK#1033,
    CONTENT#1034(      Note: Servers ought to be cautious about depending on URI lengths),
    CONTENT#1035(      above 255 bytes, because some older client or proxy),
    CONTENT#1036(      implementations might not properly support these lengths.),
      BREAK#1037,
    SECTION#1038(id=3.2.2, title=http URL),
      BREAK#1039,
    CONTENT#1040(   The "http" scheme is used to locate network resources via the HTTP),
    CONTENT#1041(   protocol. This section defines the scheme-specific syntax and),
    CONTENT#1042(   semantics for http URLs.),
      BREAK#1043,
    CONTENT#1044(   http_URL = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]]),
      BREAK#1045,
    CONTENT#1046(   If the port is empty or not given, port 80 is assumed. The semantics),
    CONTENT#1047(   are that the identified resource is located at the server listening),
    CONTENT#1048(   for TCP connections on that port of that host, and the Request-URI),
    CONTENT#1049(   for the resource is abs_path (section 5.1.2). The use of IP addresses),
    CONTENT#1050(   in URLs SHOULD be avoided whenever possible (see RFC 1900 [24]). If),
    CONTENT#1051(   the abs_path is not present in the URL, it MUST be given as "/" when),
    CONTENT#1052(   used as a Request-URI for a resource (section 5.1.2). If a proxy),
    CONTENT#1053(   receives a host name which is not a fully qualified domain name, it),
    CONTENT#1054(   MAY add its domain to the host name it received. If a proxy receives),
    CONTENT#1055(   a fully qualified domain name, the proxy MUST NOT change the host),
    CONTENT#1056(   name.),
      BREAK#1057,
      BREAK#1058,
      BREAK#1059,
      BREAK#1060,
      BREAK#1061,
      BREAK#1062,
      BREAK#1063,
      BREAK#1064,
      BREAK#1066,
      BREAK#1068,
      BREAK#1069,
    SECTION#1070(id=3.2.3, title=URI Comparison),
      BREAK#1071,
    CONTENT#1072(   When comparing two URIs to decide if they match or not, a client),
    CONTENT#1073(   SHOULD use a case-sensitive octet-by-octet comparison of the entire),
    CONTENT#1074(   URIs, with these exceptions:),
      BREAK#1075,
    CONTENT#1076(      - A port that is empty or not given is equivalent to the default),
    CONTENT#1077(        port for that URI-reference;),
      BREAK#1078,
    CONTENT#1079(        - Comparisons of host names MUST be case-insensitive;),
      BREAK#1080,
    CONTENT#1081(        - Comparisons of scheme names MUST be case-insensitive;),
      BREAK#1082,
    CONTENT#1083(        - An empty abs_path is equivalent to an abs_path of "/".),
      BREAK#1084,
    CONTENT#1085(   Characters other than those in the "reserved" and "unsafe" sets (see),
    CONTENT#1086(   RFC 2396 [42]) are equivalent to their ""%" HEX HEX" encoding.),
      BREAK#1087,
    CONTENT#1088(   For example, the following three URIs are equivalent:),
      BREAK#1089,
    CONTENT#1090(      http://abc.com:80/~smith/home.html),
    CONTENT#1091(      http://ABC.com/%7Esmith/home.html),
    CONTENT#1092(      http://ABC.com:/%7esmith/home.html),
      BREAK#1093,
    SECTION#1094(id=3.3, title=Date/Time Formats),
      BREAK#1095,
    SECTION#1096(id=3.3.1, title=Full Date),
      BREAK#1097,
    CONTENT#1098(   HTTP applications have historically allowed three different formats),
    CONTENT#1099(   for the representation of date/time stamps:),
      BREAK#1100,
    CONTENT#1101(      Sun, 06 Nov 1994 08:49:37 GMT  ; RFC 822, updated by RFC 1123),
    CONTENT#1102(      Sunday, 06-Nov-94 08:49:37 GMT ; RFC 850, obsoleted by RFC 1036),
    CONTENT#1103(      Sun Nov  6 08:49:37 1994       ; ANSI C's asctime() format),
      BREAK#1104,
    CONTENT#1105(   The first format is preferred as an Internet standard and represents),
    CONTENT#1106(   a fixed-length subset of that defined by RFC 1123 [8] (an update to),
    CONTENT#1107(   RFC 822 [9]). The second format is in common use, but is based on the),
    CONTENT#1108(   obsolete RFC 850 [12] date format and lacks a four-digit year.),
    CONTENT#1109(   HTTP/1.1 clients and servers that parse the date value MUST accept),
    CONTENT#1110(   all three formats (for compatibility with HTTP/1.0), though they MUST),
    CONTENT#1111(   only generate the RFC 1123 format for representing HTTP-date values),
    CONTENT#1112(   in header fields. See section 19.3 for further information.),
      BREAK#1113,
    CONTENT#1114(      Note: Recipients of date values are encouraged to be robust in),
    CONTENT#1115(      accepting date values that may have been sent by non-HTTP),
    CONTENT#1116(      applications, as is sometimes the case when retrieving or posting),
    CONTENT#1117(      messages via proxies/gateways to SMTP or NNTP.),
      BREAK#1118,
      BREAK#1119,
      BREAK#1120,
      BREAK#1122,
      BREAK#1124,
      BREAK#1125,
    CONTENT#1126(   All HTTP date/time stamps MUST be represented in Greenwich Mean Time),
    CONTENT#1127(   (GMT), without exception. For the purposes of HTTP, GMT is exactly),
    CONTENT#1128(   equal to UTC (Coordinated Universal Time). This is indicated in the),
    CONTENT#1129(   first two formats by the inclusion of "GMT" as the three-letter),
    CONTENT#1130(   abbreviation for time zone, and MUST be assumed when reading the),
    CONTENT#1131(   asctime format. HTTP-date is case sensitive and MUST NOT include),
    CONTENT#1132(   additional LWS beyond that specifically included as SP in the),
    CONTENT#1133(   grammar.),
      BREAK#1134,
    CONTENT#1135(       HTTP-date    = rfc1123-date | rfc850-date | asctime-date),
    CONTENT#1136(       rfc1123-date = wkday "," SP date1 SP time SP "GMT"),
    CONTENT#1137(       rfc850-date  = weekday "," SP date2 SP time SP "GMT"),
    CONTENT#1138(       asctime-date = wkday SP date3 SP time SP 4DIGIT),
    CONTENT#1139(       date1        = 2DIGIT SP month SP 4DIGIT),
    CONTENT#1140(                      ; day month year (e.g., 02 Jun 1982)),
    CONTENT#1141(       date2        = 2DIGIT "-" month "-" 2DIGIT),
    CONTENT#1142(                      ; day-month-year (e.g., 02-Jun-82)),
    CONTENT#1143(       date3        = month SP ( 2DIGIT | ( SP 1DIGIT ))),
    CONTENT#1144(                      ; month day (e.g., Jun  2)),
    CONTENT#1145(       time         = 2DIGIT ":" 2DIGIT ":" 2DIGIT),
    CONTENT#1146(                      ; 00:00:00 - 23:59:59),
    CONTENT#1147(       wkday        = "Mon" | "Tue" | "Wed"),
    CONTENT#1148(                    | "Thu" | "Fri" | "Sat" | "Sun"),
    CONTENT#1149(       weekday      = "Monday" | "Tuesday" | "Wednesday"),
    CONTENT#1150(                    | "Thursday" | "Friday" | "Saturday" | "Sunday"),
    CONTENT#1151(       month        = "Jan" | "Feb" | "Mar" | "Apr"),
    CONTENT#1152(                    | "May" | "Jun" | "Jul" | "Aug"),
    CONTENT#1153(                    | "Sep" | "Oct" | "Nov" | "Dec"),
      BREAK#1154,
    CONTENT#1155(      Note: HTTP requirements for the date/time stamp format apply only),
    CONTENT#1156(      to their usage within the protocol stream. Clients and servers are),
    CONTENT#1157(      not required to use these formats for user presentation, request),
    CONTENT#1158(      logging, etc.),
      BREAK#1159,
    SECTION#1160(id=3.3.2, title=Delta Seconds),
      BREAK#1161,
    CONTENT#1162(   Some HTTP header fields allow a time value to be specified as an),
    CONTENT#1163(   integer number of seconds, represented in decimal, after the time),
    CONTENT#1164(   that the message was received.),
      BREAK#1165,
    CONTENT#1166(       delta-seconds  = 1*DIGIT),
      BREAK#1167,
    SECTION#1168(id=3.4, title=Character Sets),
      BREAK#1169,
    CONTENT#1170(   HTTP uses the same definition of the term "character set" as that),
    CONTENT#1171(   described for MIME:),
      BREAK#1172,
      BREAK#1173,
      BREAK#1174,
      BREAK#1175,
      BREAK#1176,
      BREAK#1178,
      BREAK#1180,
      BREAK#1181,
    CONTENT#1182(   The term "character set" is used in this document to refer to a),
    CONTENT#1183(   method used with one or more tables to convert a sequence of octets),
    CONTENT#1184(   into a sequence of characters. Note that unconditional conversion in),
    CONTENT#1185(   the other direction is not required, in that not all characters may),
    CONTENT#1186(   be available in a given character set and a character set may provide),
    CONTENT#1187(   more than one sequence of octets to represent a particular character.),
    CONTENT#1188(   This definition is intended to allow various kinds of character),
    CONTENT#1189(   encoding, from simple single-table mappings such as US-ASCII to),
    CONTENT#1190(   complex table switching methods such as those that use ISO-2022's),
    CONTENT#1191(   techniques. However, the definition associated with a MIME character),
    CONTENT#1192(   set name MUST fully specify the mapping to be performed from octets),
    CONTENT#1193(   to characters. In particular, use of external profiling information),
    CONTENT#1194(   to determine the exact mapping is not permitted.),
      BREAK#1195,
    CONTENT#1196(      Note: This use of the term "character set" is more commonly),
    CONTENT#1197(      referred to as a "character encoding." However, since HTTP and),
    CONTENT#1198(      MIME share the same registry, it is important that the terminology),
    CONTENT#1199(      also be shared.),
      BREAK#1200,
    CONTENT#1201(   HTTP character sets are identified by case-insensitive tokens. The),
    CONTENT#1202(   complete set of tokens is defined by the IANA Character Set registry),
    CONTENT#1203(   [19].),
      BREAK#1204,
    CONTENT#1205(       charset = token),
      BREAK#1206,
    CONTENT#1207(   Although HTTP allows an arbitrary token to be used as a charset),
    CONTENT#1208(   value, any token that has a predefined value within the IANA),
    CONTENT#1209(   Character Set registry [19] MUST represent the character set defined),
    CONTENT#1210(   by that registry. Applications SHOULD limit their use of character),
    CONTENT#1211(   sets to those defined by the IANA registry.),
      BREAK#1212,
    CONTENT#1213(   Implementors should be aware of IETF character set requirements [38]),
    CONTENT#1214(   [41].),
      BREAK#1215,
    SECTION#1216(id=3.4.1, title=Missing Charset),
      BREAK#1217,
    CONTENT#1218(   Some HTTP/1.0 software has interpreted a Content-Type header without),
    CONTENT#1219(   charset parameter incorrectly to mean "recipient should guess."),
    CONTENT#1220(   Senders wishing to defeat this behavior MAY include a charset),
    CONTENT#1221(   parameter even when the charset is ISO-8859-1 and SHOULD do so when),
    CONTENT#1222(   it is known that it will not confuse the recipient.),
      BREAK#1223,
    CONTENT#1224(   Unfortunately, some older HTTP/1.0 clients did not deal properly with),
    CONTENT#1225(   an explicit charset parameter. HTTP/1.1 recipients MUST respect the),
    CONTENT#1226(   charset label provided by the sender; and those user agents that have),
    CONTENT#1227(   a provision to "guess" a charset MUST use the charset from the),
      BREAK#1228,
      BREAK#1229,
      BREAK#1230,
      BREAK#1231,
      BREAK#1232,
      BREAK#1234,
      BREAK#1236,
      BREAK#1237,
    CONTENT#1238(   content-type field if they support that charset, rather than the),
    CONTENT#1239(   recipient's preference, when initially displaying a document. See),
    CONTENT#1240(   section 3.7.1.),
      BREAK#1241,
    SECTION#1242(id=3.5, title=Content Codings),
      BREAK#1243,
    CONTENT#1244(   Content coding values indicate an encoding transformation that has),
    CONTENT#1245(   been or can be applied to an entity. Content codings are primarily),
    CONTENT#1246(   used to allow a document to be compressed or otherwise usefully),
    CONTENT#1247(   transformed without losing the identity of its underlying media type),
    CONTENT#1248(   and without loss of information. Frequently, the entity is stored in),
    CONTENT#1249(   coded form, transmitted directly, and only decoded by the recipient.),
      BREAK#1250,
    CONTENT#1251(       content-coding   = token),
      BREAK#1252,
    CONTENT#1253(   All content-coding values are case-insensitive. HTTP/1.1 uses),
    CONTENT#1254(   content-coding values in the Accept-Encoding (section 14.3) and),
    CONTENT#1255(   Content-Encoding (section 14.11) header fields. Although the value),
    CONTENT#1256(   describes the content-coding, what is more important is that it),
    CONTENT#1257(   indicates what decoding mechanism will be required to remove the),
    CONTENT#1258(   encoding.),
      BREAK#1259,
    CONTENT#1260(   The Internet Assigned Numbers Authority (IANA) acts as a registry for),
    CONTENT#1261(   content-coding value tokens. Initially, the registry contains the),
    CONTENT#1262(   following tokens:),
      BREAK#1263,
    CONTENT#1264(   gzip An encoding format produced by the file compression program),
    CONTENT#1265(        "gzip" (GNU zip) as described in RFC 1952 [25]. This format is a),
    CONTENT#1266(        Lempel-Ziv coding (LZ77) with a 32 bit CRC.),
      BREAK#1267,
    CONTENT#1268(   compress),
    CONTENT#1269(        The encoding format produced by the common UNIX file compression),
    CONTENT#1270(        program "compress". This format is an adaptive Lempel-Ziv-Welch),
    CONTENT#1271(        coding (LZW).),
      BREAK#1272,
    CONTENT#1273(        Use of program names for the identification of encoding formats),
    CONTENT#1274(        is not desirable and is discouraged for future encodings. Their),
    CONTENT#1275(        use here is representative of historical practice, not good),
    CONTENT#1276(        design. For compatibility with previous implementations of HTTP,),
    CONTENT#1277(        applications SHOULD consider "x-gzip" and "x-compress" to be),
    CONTENT#1278(        equivalent to "gzip" and "compress" respectively.),
      BREAK#1279,
    CONTENT#1280(   deflate),
    CONTENT#1281(        The "zlib" format defined in RFC 1950 [31] in combination with),
    CONTENT#1282(        the "deflate" compression mechanism described in RFC 1951 [29].),
      BREAK#1283,
      BREAK#1284,
      BREAK#1285,
      BREAK#1286,
      BREAK#1287,
      BREAK#1288,
      BREAK#1290,
      BREAK#1292,
      BREAK#1293,
    CONTENT#1294(   identity),
    CONTENT#1295(        The default (identity) encoding; the use of no transformation),
    CONTENT#1296(        whatsoever. This content-coding is used only in the Accept-),
    CONTENT#1297(        Encoding header, and SHOULD NOT be used in the Content-Encoding),
    CONTENT#1298(        header.),
      BREAK#1299,
    CONTENT#1300(   New content-coding value tokens SHOULD be registered; to allow),
    CONTENT#1301(   interoperability between clients and servers, specifications of the),
    CONTENT#1302(   content coding algorithms needed to implement a new value SHOULD be),
    CONTENT#1303(   publicly available and adequate for independent implementation, and),
    CONTENT#1304(   conform to the purpose of content coding defined in this section.),
      BREAK#1305,
    SECTION#1306(id=3.6, title=Transfer Codings),
      BREAK#1307,
    CONTENT#1308(   Transfer-coding values are used to indicate an encoding),
    CONTENT#1309(   transformation that has been, can be, or may need to be applied to an),
    CONTENT#1310(   entity-body in order to ensure "safe transport" through the network.),
    CONTENT#1311(   This differs from a content coding in that the transfer-coding is a),
    CONTENT#1312(   property of the message, not of the original entity.),
      BREAK#1313,
    CONTENT#1314(       transfer-coding         = "chunked" | transfer-extension),
    CONTENT#1315(       transfer-extension      = token *( ";" parameter )),
      BREAK#1316,
    CONTENT#1317(   Parameters are in  the form of attribute/value pairs.),
      BREAK#1318,
    CONTENT#1319(       parameter               = attribute "=" value),
    CONTENT#1320(       attribute               = token),
    CONTENT#1321(       value                   = token | quoted-string),
      BREAK#1322,
    CONTENT#1323(   All transfer-coding values are case-insensitive. HTTP/1.1 uses),
    CONTENT#1324(   transfer-coding values in the TE header field (section 14.39) and in),
    CONTENT#1325(   the Transfer-Encoding header field (section 14.41).),
      BREAK#1326,
    CONTENT#1327(   Whenever a transfer-coding is applied to a message-body, the set of),
    CONTENT#1328(   transfer-codings MUST include "chunked", unless the message is),
    CONTENT#1329(   terminated by closing the connection. When the "chunked" transfer-),
    CONTENT#1330(   coding is used, it MUST be the last transfer-coding applied to the),
    CONTENT#1331(   message-body. The "chunked" transfer-coding MUST NOT be applied more),
    CONTENT#1332(   than once to a message-body. These rules allow the recipient to),
    CONTENT#1333(   determine the transfer-length of the message (section 4.4).),
      BREAK#1334,
    CONTENT#1335(   Transfer-codings are analogous to the Content-Transfer-Encoding),
    CONTENT#1336(   values of MIME [7], which were designed to enable safe transport of),
    CONTENT#1337(   binary data over a 7-bit transport service. However, safe transport),
    CONTENT#1338(   has a different focus for an 8bit-clean transfer protocol. In HTTP,),
    CONTENT#1339(   the only unsafe characteristic of message-bodies is the difficulty in),
    CONTENT#1340(   determining the exact body length (section 7.2.2), or the desire to),
    CONTENT#1341(   encrypt data over a shared transport.),
      BREAK#1342,
      BREAK#1343,
      BREAK#1344,
      BREAK#1346,
      BREAK#1348,
      BREAK#1349,
    CONTENT#1350(   The Internet Assigned Numbers Authority (IANA) acts as a registry for),
    CONTENT#1351(   transfer-coding value tokens. Initially, the registry contains the),
    CONTENT#1352(   following tokens: "chunked" (section 3.6.1), "identity" (section),
    CONTENT#1353(   3.6.2), "gzip" (section 3.5), "compress" (section 3.5), and "deflate"),
    CONTENT#1354(   (section 3.5).),
      BREAK#1355,
    CONTENT#1356(   New transfer-coding value tokens SHOULD be registered in the same way),
    CONTENT#1357(   as new content-coding value tokens (section 3.5).),
      BREAK#1358,
    CONTENT#1359(   A server which receives an entity-body with a transfer-coding it does),
    CONTENT#1360(   not understand SHOULD return 501 (Unimplemented), and close the),
    CONTENT#1361(   connection. A server MUST NOT send transfer-codings to an HTTP/1.0),
    CONTENT#1362(   client.),
      BREAK#1363,
    SECTION#1364(id=3.6.1, title=Chunked Transfer Coding),
      BREAK#1365,
    CONTENT#1366(   The chunked encoding modifies the body of a message in order to),
    CONTENT#1367(   transfer it as a series of chunks, each with its own size indicator,),
    CONTENT#1368(   followed by an OPTIONAL trailer containing entity-header fields. This),
    CONTENT#1369(   allows dynamically produced content to be transferred along with the),
    CONTENT#1370(   information necessary for the recipient to verify that it has),
    CONTENT#1371(   received the full message.),
      BREAK#1372,
    CONTENT#1373(       Chunked-Body   = *chunk),
    CONTENT#1374(                        last-chunk),
    CONTENT#1375(                        trailer),
    CONTENT#1376(                        CRLF),
      BREAK#1377,
    CONTENT#1378(       chunk          = chunk-size [ chunk-extension ] CRLF),
    CONTENT#1379(                        chunk-data CRLF),
    CONTENT#1380(       chunk-size     = 1*HEX),
    CONTENT#1381(       last-chunk     = 1*("0") [ chunk-extension ] CRLF),
      BREAK#1382,
    CONTENT#1383(       chunk-extension= *( ";" chunk-ext-name [ "=" chunk-ext-val ] )),
    CONTENT#1384(       chunk-ext-name = token),
    CONTENT#1385(       chunk-ext-val  = token | quoted-string),
    CONTENT#1386(       chunk-data     = chunk-size(OCTET)),
    CONTENT#1387(       trailer        = *(entity-header CRLF)),
      BREAK#1388,
    CONTENT#1389(   The chunk-size field is a string of hex digits indicating the size of),
    CONTENT#1390(   the chunk. The chunked encoding is ended by any chunk whose size is),
    CONTENT#1391(   zero, followed by the trailer, which is terminated by an empty line.),
      BREAK#1392,
    CONTENT#1393(   The trailer allows the sender to include additional HTTP header),
    CONTENT#1394(   fields at the end of the message. The Trailer header field can be),
    CONTENT#1395(   used to indicate which header fields are included in a trailer (see),
    CONTENT#1396(   section 14.40).),
      BREAK#1397,
      BREAK#1398,
      BREAK#1399,
      BREAK#1400,
      BREAK#1402,
      BREAK#1404,
      BREAK#1405,
    CONTENT#1406(   A server using chunked transfer-coding in a response MUST NOT use the),
    CONTENT#1407(   trailer for any header fields unless at least one of the following is),
    CONTENT#1408(   true:),
      BREAK#1409,
    CONTENT#1410(   a)the request included a TE header field that indicates "trailers" is),
    CONTENT#1411(     acceptable in the transfer-coding of the  response, as described in),
    CONTENT#1412(     section 14.39; or,),
      BREAK#1413,
    CONTENT#1414(   b)the server is the origin server for the response, the trailer),
    CONTENT#1415(     fields consist entirely of optional metadata, and the recipient),
    CONTENT#1416(     could use the message (in a manner acceptable to the origin server)),
    CONTENT#1417(     without receiving this metadata.  In other words, the origin server),
    CONTENT#1418(     is willing to accept the possibility that the trailer fields might),
    CONTENT#1419(     be silently discarded along the path to the client.),
      BREAK#1420,
    CONTENT#1421(   This requirement prevents an interoperability failure when the),
    CONTENT#1422(   message is being received by an HTTP/1.1 (or later) proxy and),
    CONTENT#1423(   forwarded to an HTTP/1.0 recipient. It avoids a situation where),
    CONTENT#1424(   compliance with the protocol would have necessitated a possibly),
    CONTENT#1425(   infinite buffer on the proxy.),
      BREAK#1426,
    CONTENT#1427(   An example process for decoding a Chunked-Body is presented in),
    CONTENT#1428(   appendix 19.4.6.),
      BREAK#1429,
    CONTENT#1430(   All HTTP/1.1 applications MUST be able to receive and decode the),
    CONTENT#1431(   "chunked" transfer-coding, and MUST ignore chunk-extension extensions),
    CONTENT#1432(   they do not understand.),
      BREAK#1433,
    SECTION#1434(id=3.7, title=Media Types),
      BREAK#1435,
    CONTENT#1436(   HTTP uses Internet Media Types [17] in the Content-Type (section),
    CONTENT#1437(   14.17) and Accept (section 14.1) header fields in order to provide),
    CONTENT#1438(   open and extensible data typing and type negotiation.),
      BREAK#1439,
    CONTENT#1440(       media-type     = type "/" subtype *( ";" parameter )),
    CONTENT#1441(       type           = token),
    CONTENT#1442(       subtype        = token),
      BREAK#1443,
    CONTENT#1444(   Parameters MAY follow the type/subtype in the form of attribute/value),
    CONTENT#1445(   pairs (as defined in section 3.6).),
      BREAK#1446,
    CONTENT#1447(   The type, subtype, and parameter attribute names are case-),
    CONTENT#1448(   insensitive. Parameter values might or might not be case-sensitive,),
    CONTENT#1449(   depending on the semantics of the parameter name. Linear white space),
    CONTENT#1450(   (LWS) MUST NOT be used between the type and subtype, nor between an),
    CONTENT#1451(   attribute and its value. The presence or absence of a parameter might),
    CONTENT#1452(   be significant to the processing of a media-type, depending on its),
    CONTENT#1453(   definition within the media type registry.),
      BREAK#1454,
      BREAK#1455,
      BREAK#1456,
      BREAK#1458,
      BREAK#1460,
      BREAK#1461,
    CONTENT#1462(   Note that some older HTTP applications do not recognize media type),
    CONTENT#1463(   parameters. When sending data to older HTTP applications,),
    CONTENT#1464(   implementations SHOULD only use media type parameters when they are),
    CONTENT#1465(   required by that type/subtype definition.),
      BREAK#1466,
    CONTENT#1467(   Media-type values are registered with the Internet Assigned Number),
    CONTENT#1468(   Authority (IANA [19]). The media type registration process is),
    CONTENT#1469(   outlined in RFC 1590 [17]. Use of non-registered media types is),
    CONTENT#1470(   discouraged.),
      BREAK#1471,
    SECTION#1472(id=3.7.1, title=Canonicalization and Text Defaults),
      BREAK#1473,
    CONTENT#1474(   Internet media types are registered with a canonical form. An),
    CONTENT#1475(   entity-body transferred via HTTP messages MUST be represented in the),
    CONTENT#1476(   appropriate canonical form prior to its transmission except for),
    CONTENT#1477(   "text" types, as defined in the next paragraph.),
      BREAK#1478,
    CONTENT#1479(   When in canonical form, media subtypes of the "text" type use CRLF as),
    CONTENT#1480(   the text line break. HTTP relaxes this requirement and allows the),
    CONTENT#1481(   transport of text media with plain CR or LF alone representing a line),
    CONTENT#1482(   break when it is done consistently for an entire entity-body. HTTP),
    CONTENT#1483(   applications MUST accept CRLF, bare CR, and bare LF as being),
    CONTENT#1484(   representative of a line break in text media received via HTTP. In),
    CONTENT#1485(   addition, if the text is represented in a character set that does not),
    CONTENT#1486(   use octets 13 and 10 for CR and LF respectively, as is the case for),
    CONTENT#1487(   some multi-byte character sets, HTTP allows the use of whatever octet),
    CONTENT#1488(   sequences are defined by that character set to represent the),
    CONTENT#1489(   equivalent of CR and LF for line breaks. This flexibility regarding),
    CONTENT#1490(   line breaks applies only to text media in the entity-body; a bare CR),
    CONTENT#1491(   or LF MUST NOT be substituted for CRLF within any of the HTTP control),
    CONTENT#1492(   structures (such as header fields and multipart boundaries).),
      BREAK#1493,
    CONTENT#1494(   If an entity-body is encoded with a content-coding, the underlying),
    CONTENT#1495(   data MUST be in a form defined above prior to being encoded.),
      BREAK#1496,
    CONTENT#1497(   The "charset" parameter is used with some media types to define the),
    CONTENT#1498(   character set (section 3.4) of the data. When no explicit charset),
    CONTENT#1499(   parameter is provided by the sender, media subtypes of the "text"),
    CONTENT#1500(   type are defined to have a default charset value of "ISO-8859-1" when),
    CONTENT#1501(   received via HTTP. Data in character sets other than "ISO-8859-1" or),
    CONTENT#1502(   its subsets MUST be labeled with an appropriate charset value. See),
    CONTENT#1503(   section 3.4.1 for compatibility problems.),
      BREAK#1504,
    SECTION#1505(id=3.7.2, title=Multipart Types),
      BREAK#1506,
    CONTENT#1507(   MIME provides for a number of "multipart" types -- encapsulations of),
    CONTENT#1508(   one or more entities within a single message-body. All multipart),
    CONTENT#1509(   types share a common syntax, as defined in section 5.1.1 of RFC 2046),
      BREAK#1510,
      BREAK#1511,
      BREAK#1512,
      BREAK#1514,
      BREAK#1516,
      BREAK#1517,
    CONTENT#1518(   [40], and MUST include a boundary parameter as part of the media type),
    CONTENT#1519(   value. The message body is itself a protocol element and MUST),
    CONTENT#1520(   therefore use only CRLF to represent line breaks between body-parts.),
    CONTENT#1521(   Unlike in RFC 2046, the epilogue of any multipart message MUST be),
    CONTENT#1522(   empty; HTTP applications MUST NOT transmit the epilogue (even if the),
    CONTENT#1523(   original multipart contains an epilogue). These restrictions exist in),
    CONTENT#1524(   order to preserve the self-delimiting nature of a multipart message-),
    CONTENT#1525(   body, wherein the "end" of the message-body is indicated by the),
    CONTENT#1526(   ending multipart boundary.),
      BREAK#1527,
    CONTENT#1528(   In general, HTTP treats a multipart message-body no differently than),
    CONTENT#1529(   any other media type: strictly as payload. The one exception is the),
    CONTENT#1530(   "multipart/byteranges" type (appendix 19.2) when it appears in a 206),
    CONTENT#1531(   (Partial Content) response, which will be interpreted by some HTTP),
    CONTENT#1532(   caching mechanisms as described in sections 13.5.4 and 14.16. In all),
    CONTENT#1533(   other cases, an HTTP user agent SHOULD follow the same or similar),
    CONTENT#1534(   behavior as a MIME user agent would upon receipt of a multipart type.),
    CONTENT#1535(   The MIME header fields within each body-part of a multipart message-),
    CONTENT#1536(   body do not have any significance to HTTP beyond that defined by),
    CONTENT#1537(   their MIME semantics.),
      BREAK#1538,
    CONTENT#1539(   In general, an HTTP user agent SHOULD follow the same or similar),
    CONTENT#1540(   behavior as a MIME user agent would upon receipt of a multipart type.),
    CONTENT#1541(   If an application receives an unrecognized multipart subtype, the),
    CONTENT#1542(   application MUST treat it as being equivalent to "multipart/mixed".),
      BREAK#1543,
    CONTENT#1544(      Note: The "multipart/form-data" type has been specifically defined),
    CONTENT#1545(      for carrying form data suitable for processing via the POST),
    CONTENT#1546(      request method, as described in RFC 1867 [15].),
      BREAK#1547,
    SECTION#1548(id=3.8, title=Product Tokens),
      BREAK#1549,
    CONTENT#1550(   Product tokens are used to allow communicating applications to),
    CONTENT#1551(   identify themselves by software name and version. Most fields using),
    CONTENT#1552(   product tokens also allow sub-products which form a significant part),
    CONTENT#1553(   of the application to be listed, separated by white space. By),
    CONTENT#1554(   convention, the products are listed in order of their significance),
    CONTENT#1555(   for identifying the application.),
      BREAK#1556,
    CONTENT#1557(       product         = token ["/" product-version]),
    CONTENT#1558(       product-version = token),
      BREAK#1559,
    CONTENT#1560(   Examples:),
      BREAK#1561,
    CONTENT#1562(       User-Agent: CERN-LineMode/2.15 libwww/2.17b3),
    CONTENT#1563(       Server: Apache/0.8.4),
      BREAK#1564,
      BREAK#1565,
      BREAK#1566,
      BREAK#1567,
      BREAK#1568,
      BREAK#1570,
      BREAK#1572,
      BREAK#1573,
    CONTENT#1574(   Product tokens SHOULD be short and to the point. They MUST NOT be),
    CONTENT#1575(   used for advertising or other non-essential information. Although any),
    CONTENT#1576(   token character MAY appear in a product-version, this token SHOULD),
    CONTENT#1577(   only be used for a version identifier (i.e., successive versions of),
    CONTENT#1578(   the same product SHOULD only differ in the product-version portion of),
    CONTENT#1579(   the product value).),
      BREAK#1580,
    SECTION#1581(id=3.9, title=Quality Values),
      BREAK#1582,
    CONTENT#1583(   HTTP content negotiation (section 12) uses short "floating point"),
    CONTENT#1584(   numbers to indicate the relative importance ("weight") of various),
    CONTENT#1585(   negotiable parameters.  A weight is normalized to a real number in),
    CONTENT#1586(   the range 0 through 1, where 0 is the minimum and 1 the maximum),
    CONTENT#1587(   value. If a parameter has a quality value of 0, then content with),
    CONTENT#1588(   this parameter is `not acceptable' for the client. HTTP/1.1),
    CONTENT#1589(   applications MUST NOT generate more than three digits after the),
    CONTENT#1590(   decimal point. User configuration of these values SHOULD also be),
    CONTENT#1591(   limited in this fashion.),
      BREAK#1592,
    CONTENT#1593(       qvalue         = ( "0" [ "." 0*3DIGIT ] )),
    CONTENT#1594(                      | ( "1" [ "." 0*3("0") ] )),
      BREAK#1595,
    CONTENT#1596(   "Quality values" is a misnomer, since these values merely represent),
    CONTENT#1597(   relative degradation in desired quality.),
      BREAK#1598,
    SECTION#1599(id=3.10, title=Language Tags),
      BREAK#1600,
    CONTENT#1601(   A language tag identifies a natural language spoken, written, or),
    CONTENT#1602(   otherwise conveyed by human beings for communication of information),
    CONTENT#1603(   to other human beings. Computer languages are explicitly excluded.),
    CONTENT#1604(   HTTP uses language tags within the Accept-Language and Content-),
    CONTENT#1605(   Language fields.),
      BREAK#1606,
    CONTENT#1607(   The syntax and registry of HTTP language tags is the same as that),
    CONTENT#1608(   defined by RFC 1766 [1]. In summary, a language tag is composed of 1),
    CONTENT#1609(   or more parts: A primary language tag and a possibly empty series of),
    CONTENT#1610(   subtags:),
      BREAK#1611,
    CONTENT#1612(        language-tag  = primary-tag *( "-" subtag )),
    CONTENT#1613(        primary-tag   = 1*8ALPHA),
    CONTENT#1614(        subtag        = 1*8ALPHA),
      BREAK#1615,
    CONTENT#1616(   White space is not allowed within the tag and all tags are case-),
    CONTENT#1617(   insensitive. The name space of language tags is administered by the),
    CONTENT#1618(   IANA. Example tags include:),
      BREAK#1619,
    CONTENT#1620(       en, en-US, en-cockney, i-cherokee, x-pig-latin),
      BREAK#1621,
      BREAK#1622,
      BREAK#1623,
      BREAK#1624,
      BREAK#1626,
      BREAK#1628,
      BREAK#1629,
    CONTENT#1630(   where any two-letter primary-tag is an ISO-639 language abbreviation),
    CONTENT#1631(   and any two-letter initial subtag is an ISO-3166 country code. (The),
    CONTENT#1632(   last three tags above are not registered tags; all but the last are),
    CONTENT#1633(   examples of tags which could be registered in future.)),
      BREAK#1634,
    SECTION#1635(id=3.11, title=Entity Tags),
      BREAK#1636,
    CONTENT#1637(   Entity tags are used for comparing two or more entities from the same),
    CONTENT#1638(   requested resource. HTTP/1.1 uses entity tags in the ETag (section),
    CONTENT#1639(   14.19), If-Match (section 14.24), If-None-Match (section 14.26), and),
    CONTENT#1640(   If-Range (section 14.27) header fields. The definition of how they),
    CONTENT#1641(   are used and compared as cache validators is in section 13.3.3. An),
    CONTENT#1642(   entity tag consists of an opaque quoted string, possibly prefixed by),
    CONTENT#1643(   a weakness indicator.),
      BREAK#1644,
    CONTENT#1645(      entity-tag = [ weak ] opaque-tag),
    CONTENT#1646(      weak       = "W/"),
    CONTENT#1647(      opaque-tag = quoted-string),
      BREAK#1648,
    CONTENT#1649(   A "strong entity tag" MAY be shared by two entities of a resource),
    CONTENT#1650(   only if they are equivalent by octet equality.),
      BREAK#1651,
    CONTENT#1652(   A "weak entity tag," indicated by the "W/" prefix, MAY be shared by),
    CONTENT#1653(   two entities of a resource only if the entities are equivalent and),
    CONTENT#1654(   could be substituted for each other with no significant change in),
    CONTENT#1655(   semantics. A weak entity tag can only be used for weak comparison.),
      BREAK#1656,
    CONTENT#1657(   An entity tag MUST be unique across all versions of all entities),
    CONTENT#1658(   associated with a particular resource. A given entity tag value MAY),
    CONTENT#1659(   be used for entities obtained by requests on different URIs. The use),
    CONTENT#1660(   of the same entity tag value in conjunction with entities obtained by),
    CONTENT#1661(   requests on different URIs does not imply the equivalence of those),
    CONTENT#1662(   entities.),
      BREAK#1663,
    SECTION#1664(id=3.12, title=Range Units),
      BREAK#1665,
    CONTENT#1666(   HTTP/1.1 allows a client to request that only part (a range of) the),
    CONTENT#1667(   response entity be included within the response. HTTP/1.1 uses range),
    CONTENT#1668(   units in the Range (section 14.35) and Content-Range (section 14.16)),
    CONTENT#1669(   header fields. An entity can be broken down into subranges according),
    CONTENT#1670(   to various structural units.),
      BREAK#1671,
    CONTENT#1672(      range-unit       = bytes-unit | other-range-unit),
    CONTENT#1673(      bytes-unit       = "bytes"),
    CONTENT#1674(      other-range-unit = token),
      BREAK#1675,
    CONTENT#1676(   The only range unit defined by HTTP/1.1 is "bytes". HTTP/1.1),
    CONTENT#1677(   implementations MAY ignore ranges specified using other units.),
      BREAK#1678,
      BREAK#1679,
      BREAK#1680,
      BREAK#1682,
      BREAK#1684,
      BREAK#1685,
    CONTENT#1686(   HTTP/1.1 has been designed to allow implementations of applications),
    CONTENT#1687(   that do not depend on knowledge of ranges.),
      BREAK#1688,
    SECTION#1689(id=4, title=HTTP Message),
      BREAK#1690,
    SECTION#1691(id=4.1, title=Message Types),
      BREAK#1692,
    CONTENT#1693(   HTTP messages consist of requests from client to server and responses),
    CONTENT#1694(   from server to client.),
      BREAK#1695,
    CONTENT#1696(       HTTP-message   = Request | Response     ; HTTP/1.1 messages),
      BREAK#1697,
    CONTENT#1698(   Request (section 5) and Response (section 6) messages use the generic),
    CONTENT#1699(   message format of RFC 822 [9] for transferring entities (the payload),
    CONTENT#1700(   of the message). Both types of message consist of a start-line, zero),
    CONTENT#1701(   or more header fields (also known as "headers"), an empty line (i.e.,),
    CONTENT#1702(   a line with nothing preceding the CRLF) indicating the end of the),
    CONTENT#1703(   header fields, and possibly a message-body.),
      BREAK#1704,
    CONTENT#1705(        generic-message = start-line),
    CONTENT#1706(                          *(message-header CRLF)),
    CONTENT#1707(                          CRLF),
    CONTENT#1708(                          [ message-body ]),
    CONTENT#1709(        start-line      = Request-Line | Status-Line),
      BREAK#1710,
    CONTENT#1711(   In the interest of robustness, servers SHOULD ignore any empty),
    CONTENT#1712(   line(s) received where a Request-Line is expected. In other words, if),
    CONTENT#1713(   the server is reading the protocol stream at the beginning of a),
    CONTENT#1714(   message and receives a CRLF first, it should ignore the CRLF.),
      BREAK#1715,
    CONTENT#1716(   Certain buggy HTTP/1.0 client implementations generate extra CRLF's),
    CONTENT#1717(   after a POST request. To restate what is explicitly forbidden by the),
    CONTENT#1718(   BNF, an HTTP/1.1 client MUST NOT preface or follow a request with an),
    CONTENT#1719(   extra CRLF.),
      BREAK#1720,
    SECTION#1721(id=4.2, title=Message Headers),
      BREAK#1722,
    CONTENT#1723(   HTTP header fields, which include general-header (section 4.5),),
    CONTENT#1724(   request-header (section 5.3), response-header (section 6.2), and),
    CONTENT#1725(   entity-header (section 7.1) fields, follow the same generic format as),
    CONTENT#1726(   that given in Section 3.1 of RFC 822 [9]. Each header field consists),
    CONTENT#1727(   of a name followed by a colon (":") and the field value. Field names),
    CONTENT#1728(   are case-insensitive. The field value MAY be preceded by any amount),
    CONTENT#1729(   of LWS, though a single SP is preferred. Header fields can be),
    CONTENT#1730(   extended over multiple lines by preceding each extra line with at),
    CONTENT#1731(   least one SP or HT. Applications ought to follow "common form", where),
    CONTENT#1732(   one is known or indicated, when generating HTTP constructs, since),
    CONTENT#1733(   there might exist some implementations that fail to accept anything),
      BREAK#1734,
      BREAK#1735,
      BREAK#1736,
      BREAK#1738,
      BREAK#1740,
      BREAK#1741,
    CONTENT#1742(   beyond the common forms.),
      BREAK#1743,
    CONTENT#1744(       message-header = field-name ":" [ field-value ]),
    CONTENT#1745(       field-name     = token),
    CONTENT#1746(       field-value    = *( field-content | LWS )),
    CONTENT#1747(       field-content  = <the OCTETs making up the field-value),
    CONTENT#1748(                        and consisting of either *TEXT or combinations),
    CONTENT#1749(                        of token, separators, and quoted-string>),
      BREAK#1750,
    CONTENT#1751(   The field-content does not include any leading or trailing LWS:),
    CONTENT#1752(   linear white space occurring before the first non-whitespace),
    CONTENT#1753(   character of the field-value or after the last non-whitespace),
    CONTENT#1754(   character of the field-value. Such leading or trailing LWS MAY be),
    CONTENT#1755(   removed without changing the semantics of the field value. Any LWS),
    CONTENT#1756(   that occurs between field-content MAY be replaced with a single SP),
    CONTENT#1757(   before interpreting the field value or forwarding the message),
    CONTENT#1758(   downstream.),
      BREAK#1759,
    CONTENT#1760(   The order in which header fields with differing field names are),
    CONTENT#1761(   received is not significant. However, it is "good practice" to send),
    CONTENT#1762(   general-header fields first, followed by request-header or response-),
    CONTENT#1763(   header fields, and ending with the entity-header fields.),
      BREAK#1764,
    CONTENT#1765(   Multiple message-header fields with the same field-name MAY be),
    CONTENT#1766(   present in a message if and only if the entire field-value for that),
    CONTENT#1767(   header field is defined as a comma-separated list [i.e., #(values)].),
    CONTENT#1768(   It MUST be possible to combine the multiple header fields into one),
    CONTENT#1769(   "field-name: field-value" pair, without changing the semantics of the),
    CONTENT#1770(   message, by appending each subsequent field-value to the first, each),
    CONTENT#1771(   separated by a comma. The order in which header fields with the same),
    CONTENT#1772(   field-name are received is therefore significant to the),
    CONTENT#1773(   interpretation of the combined field value, and thus a proxy MUST NOT),
    CONTENT#1774(   change the order of these field values when a message is forwarded.),
      BREAK#1775,
    SECTION#1776(id=4.3, title=Message Body),
      BREAK#1777,
    CONTENT#1778(   The message-body (if any) of an HTTP message is used to carry the),
    CONTENT#1779(   entity-body associated with the request or response. The message-body),
    CONTENT#1780(   differs from the entity-body only when a transfer-coding has been),
    CONTENT#1781(   applied, as indicated by the Transfer-Encoding header field (section),
    CONTENT#1782(   14.41).),
      BREAK#1783,
    CONTENT#1784(       message-body = entity-body),
    CONTENT#1785(                    | <entity-body encoded as per Transfer-Encoding>),
      BREAK#1786,
    CONTENT#1787(   Transfer-Encoding MUST be used to indicate any transfer-codings),
    CONTENT#1788(   applied by an application to ensure safe and proper transfer of the),
    CONTENT#1789(   message. Transfer-Encoding is a property of the message, not of the),
      BREAK#1790,
      BREAK#1791,
      BREAK#1792,
      BREAK#1794,
      BREAK#1796,
      BREAK#1797,
    CONTENT#1798(   entity, and thus MAY be added or removed by any application along the),
    CONTENT#1799(   request/response chain. (However, section 3.6 places restrictions on),
    CONTENT#1800(   when certain transfer-codings may be used.)),
      BREAK#1801,
    CONTENT#1802(   The rules for when a message-body is allowed in a message differ for),
    CONTENT#1803(   requests and responses.),
      BREAK#1804,
    CONTENT#1805(   The presence of a message-body in a request is signaled by the),
    CONTENT#1806(   inclusion of a Content-Length or Transfer-Encoding header field in),
    CONTENT#1807(   the request's message-headers. A message-body MUST NOT be included in),
    CONTENT#1808(   a request if the specification of the request method (section 5.1.1)),
    CONTENT#1809(   does not allow sending an entity-body in requests. A server SHOULD),
    CONTENT#1810(   read and forward a message-body on any request; if the request method),
    CONTENT#1811(   does not include defined semantics for an entity-body, then the),
    CONTENT#1812(   message-body SHOULD be ignored when handling the request.),
      BREAK#1813,
    CONTENT#1814(   For response messages, whether or not a message-body is included with),
    CONTENT#1815(   a message is dependent on both the request method and the response),
    CONTENT#1816(   status code (section 6.1.1). All responses to the HEAD request method),
    CONTENT#1817(   MUST NOT include a message-body, even though the presence of entity-),
    CONTENT#1818(   header fields might lead one to believe they do. All 1xx),
    CONTENT#1819(   (informational), 204 (no content), and 304 (not modified) responses),
    CONTENT#1820(   MUST NOT include a message-body. All other responses do include a),
    CONTENT#1821(   message-body, although it MAY be of zero length.),
      BREAK#1822,
    SECTION#1823(id=4.4, title=Message Length),
      BREAK#1824,
    CONTENT#1825(   The transfer-length of a message is the length of the message-body as),
    CONTENT#1826(   it appears in the message; that is, after any transfer-codings have),
    CONTENT#1827(   been applied. When a message-body is included with a message, the),
    CONTENT#1828(   transfer-length of that body is determined by one of the following),
    CONTENT#1829(   (in order of precedence):),
      BREAK#1830,
    CONTENT#1831(   1.Any response message which "MUST NOT" include a message-body (such),
    CONTENT#1832(     as the 1xx, 204, and 304 responses and any response to a HEAD),
    CONTENT#1833(     request) is always terminated by the first empty line after the),
    CONTENT#1834(     header fields, regardless of the entity-header fields present in),
    CONTENT#1835(     the message.),
      BREAK#1836,
    CONTENT#1837(   2.If a Transfer-Encoding header field (section 14.41) is present and),
    CONTENT#1838(     has any value other than "identity", then the transfer-length is),
    CONTENT#1839(     defined by use of the "chunked" transfer-coding (section 3.6),),
    CONTENT#1840(     unless the message is terminated by closing the connection.),
      BREAK#1841,
    CONTENT#1842(   3.If a Content-Length header field (section 14.13) is present, its),
    CONTENT#1843(     decimal value in OCTETs represents both the entity-length and the),
    CONTENT#1844(     transfer-length. The Content-Length header field MUST NOT be sent),
    CONTENT#1845(     if these two lengths are different (i.e., if a Transfer-Encoding),
      BREAK#1846,
      BREAK#1847,
      BREAK#1848,
      BREAK#1850,
      BREAK#1852,
      BREAK#1853,
    CONTENT#1854(     header field is present). If a message is received with both a),
    CONTENT#1855(     Transfer-Encoding header field and a Content-Length header field,),
    CONTENT#1856(     the latter MUST be ignored.),
      BREAK#1857,
    CONTENT#1858(   4.If the message uses the media type "multipart/byteranges", and the),
    CONTENT#1859(     ransfer-length is not otherwise specified, then this self-),
    CONTENT#1860(     elimiting media type defines the transfer-length. This media type),
    CONTENT#1861(     UST NOT be used unless the sender knows that the recipient can arse),
    CONTENT#1862(     it; the presence in a request of a Range header with ultiple byte-),
    CONTENT#1863(     range specifiers from a 1.1 client implies that the lient can parse),
    CONTENT#1864(     multipart/byteranges responses.),
      BREAK#1865,
    CONTENT#1866(       A range header might be forwarded by a 1.0 proxy that does not),
    CONTENT#1867(       understand multipart/byteranges; in this case the server MUST),
    CONTENT#1868(       delimit the message using methods defined in items 1,3 or 5 of),
    CONTENT#1869(       this section.),
      BREAK#1870,
    CONTENT#1871(   5.By the server closing the connection. (Closing the connection),
    CONTENT#1872(     cannot be used to indicate the end of a request body, since that),
    CONTENT#1873(     would leave no possibility for the server to send back a response.)),
      BREAK#1874,
    CONTENT#1875(   For compatibility with HTTP/1.0 applications, HTTP/1.1 requests),
    CONTENT#1876(   containing a message-body MUST include a valid Content-Length header),
    CONTENT#1877(   field unless the server is known to be HTTP/1.1 compliant. If a),
    CONTENT#1878(   request contains a message-body and a Content-Length is not given,),
    CONTENT#1879(   the server SHOULD respond with 400 (bad request) if it cannot),
    CONTENT#1880(   determine the length of the message, or with 411 (length required) if),
    CONTENT#1881(   it wishes to insist on receiving a valid Content-Length.),
      BREAK#1882,
    CONTENT#1883(   All HTTP/1.1 applications that receive entities MUST accept the),
    CONTENT#1884(   "chunked" transfer-coding (section 3.6), thus allowing this mechanism),
    CONTENT#1885(   to be used for messages when the message length cannot be determined),
    CONTENT#1886(   in advance.),
      BREAK#1887,
    CONTENT#1888(   Messages MUST NOT include both a Content-Length header field and a),
    CONTENT#1889(   non-identity transfer-coding. If the message does include a non-),
    CONTENT#1890(   identity transfer-coding, the Content-Length MUST be ignored.),
      BREAK#1891,
    CONTENT#1892(   When a Content-Length is given in a message where a message-body is),
    CONTENT#1893(   allowed, its field value MUST exactly match the number of OCTETs in),
    CONTENT#1894(   the message-body. HTTP/1.1 user agents MUST notify the user when an),
    CONTENT#1895(   invalid length is received and detected.),
      BREAK#1896,
    SECTION#1897(id=4.5, title=General Header Fields),
      BREAK#1898,
    CONTENT#1899(   There are a few header fields which have general applicability for),
    CONTENT#1900(   both request and response messages, but which do not apply to the),
    CONTENT#1901(   entity being transferred. These header fields apply only to the),
      BREAK#1902,
      BREAK#1903,
      BREAK#1904,
      BREAK#1906,
      BREAK#1908,
      BREAK#1909,
    CONTENT#1910(   message being transmitted.),
      BREAK#1911,
    CONTENT#1912(       general-header = Cache-Control            ; Section 14.9),
    CONTENT#1913(                      | Connection               ; Section 14.10),
    CONTENT#1914(                      | Date                     ; Section 14.18),
    CONTENT#1915(                      | Pragma                   ; Section 14.32),
    CONTENT#1916(                      | Trailer                  ; Section 14.40),
    CONTENT#1917(                      | Transfer-Encoding        ; Section 14.41),
    CONTENT#1918(                      | Upgrade                  ; Section 14.42),
    CONTENT#1919(                      | Via                      ; Section 14.45),
    CONTENT#1920(                      | Warning                  ; Section 14.46),
      BREAK#1921,
    CONTENT#1922(   General-header field names can be extended reliably only in),
    CONTENT#1923(   combination with a change in the protocol version. However, new or),
    CONTENT#1924(   experimental header fields may be given the semantics of general),
    CONTENT#1925(   header fields if all parties in the communication recognize them to),
    CONTENT#1926(   be general-header fields. Unrecognized header fields are treated as),
    CONTENT#1927(   entity-header fields.),
      BREAK#1928,
    SECTION#1929(id=5, title=Request),
      BREAK#1930,
    CONTENT#1931(   A request message from a client to a server includes, within the),
    CONTENT#1932(   first line of that message, the method to be applied to the resource,),
    CONTENT#1933(   the identifier of the resource, and the protocol version in use.),
      BREAK#1934,
    CONTENT#1935(        Request       = Request-Line              ; Section 5.1),
    CONTENT#1936(                        *(( general-header        ; Section 4.5),
    CONTENT#1937(                         | request-header         ; Section 5.3),
    CONTENT#1938(                         | entity-header ) CRLF)  ; Section 7.1),
    CONTENT#1939(                        CRLF),
    CONTENT#1940(                        [ message-body ]          ; Section 4.3),
      BREAK#1941,
    SECTION#1942(id=5.1, title=Request-Line),
      BREAK#1943,
    CONTENT#1944(   The Request-Line begins with a method token, followed by the),
    CONTENT#1945(   Request-URI and the protocol version, and ending with CRLF. The),
    CONTENT#1946(   elements are separated by SP characters. No CR or LF is allowed),
    CONTENT#1947(   except in the final CRLF sequence.),
      BREAK#1948,
    CONTENT#1949(        Request-Line   = Method SP Request-URI SP HTTP-Version CRLF),
      BREAK#1950,
      BREAK#1951,
      BREAK#1952,
      BREAK#1953,
      BREAK#1954,
      BREAK#1955,
      BREAK#1956,
      BREAK#1957,
      BREAK#1958,
      BREAK#1959,
      BREAK#1960,
      BREAK#1962,
      BREAK#1964,
      BREAK#1965,
    SECTION#1966(id=5.1.1, title=Method),
      BREAK#1967,
    CONTENT#1968(   The Method  token indicates the method to be performed on the),
    CONTENT#1969(   resource identified by the Request-URI. The method is case-sensitive.),
      BREAK#1970,
    CONTENT#1971(       Method         = "OPTIONS"                ; Section 9.2),
    CONTENT#1972(                      | "GET"                    ; Section 9.3),
    CONTENT#1973(                      | "HEAD"                   ; Section 9.4),
    CONTENT#1974(                      | "POST"                   ; Section 9.5),
    CONTENT#1975(                      | "PUT"                    ; Section 9.6),
    CONTENT#1976(                      | "DELETE"                 ; Section 9.7),
    CONTENT#1977(                      | "TRACE"                  ; Section 9.8),
    CONTENT#1978(                      | "CONNECT"                ; Section 9.9),
    CONTENT#1979(                      | extension-method),
    CONTENT#1980(       extension-method = token),
      BREAK#1981,
    CONTENT#1982(   The list of methods allowed by a resource can be specified in an),
    CONTENT#1983(   Allow header field (section 14.7). The return code of the response),
    CONTENT#1984(   always notifies the client whether a method is currently allowed on a),
    CONTENT#1985(   resource, since the set of allowed methods can change dynamically. An),
    CONTENT#1986(   origin server SHOULD return the status code 405 (Method Not Allowed)),
    CONTENT#1987(   if the method is known by the origin server but not allowed for the),
    CONTENT#1988(   requested resource, and 501 (Not Implemented) if the method is),
    CONTENT#1989(   unrecognized or not implemented by the origin server. The methods GET),
    CONTENT#1990(   and HEAD MUST be supported by all general-purpose servers. All other),
    CONTENT#1991(   methods are OPTIONAL; however, if the above methods are implemented,),
    CONTENT#1992(   they MUST be implemented with the same semantics as those specified),
    CONTENT#1993(   in section 9.),
      BREAK#1994,
    SECTION#1995(id=5.1.2, title=Request-URI),
      BREAK#1996,
    CONTENT#1997(   The Request-URI is a Uniform Resource Identifier (section 3.2) and),
    CONTENT#1998(   identifies the resource upon which to apply the request.),
      BREAK#1999,
    CONTENT#2000(       Request-URI    = "*" | absoluteURI | abs_path | authority),
      BREAK#2001,
    CONTENT#2002(   The four options for Request-URI are dependent on the nature of the),
    CONTENT#2003(   request. The asterisk "*" means that the request does not apply to a),
    CONTENT#2004(   particular resource, but to the server itself, and is only allowed),
    CONTENT#2005(   when the method used does not necessarily apply to a resource. One),
    CONTENT#2006(   example would be),
      BREAK#2007,
    CONTENT#2008(       OPTIONS * HTTP/1.1),
      BREAK#2009,
    CONTENT#2010(   The absoluteURI form is REQUIRED when the request is being made to a),
    CONTENT#2011(   proxy. The proxy is requested to forward the request or service it),
    CONTENT#2012(   from a valid cache, and return the response. Note that the proxy MAY),
    CONTENT#2013(   forward the request on to another proxy or directly to the server),
      BREAK#2014,
      BREAK#2015,
      BREAK#2016,
      BREAK#2018,
      BREAK#2020,
      BREAK#2021,
    CONTENT#2022(   specified by the absoluteURI. In order to avoid request loops, a),
    CONTENT#2023(   proxy MUST be able to recognize all of its server names, including),
    CONTENT#2024(   any aliases, local variations, and the numeric IP address. An example),
    CONTENT#2025(   Request-Line would be:),
      BREAK#2026,
    CONTENT#2027(       GET http://www.w3.org/pub/WWW/TheProject.html HTTP/1.1),
      BREAK#2028,
    CONTENT#2029(   To allow for transition to absoluteURIs in all requests in future),
    CONTENT#2030(   versions of HTTP, all HTTP/1.1 servers MUST accept the absoluteURI),
    CONTENT#2031(   form in requests, even though HTTP/1.1 clients will only generate),
    CONTENT#2032(   them in requests to proxies.),
      BREAK#2033,
    CONTENT#2034(   The authority form is only used by the CONNECT method (section 9.9).),
      BREAK#2035,
    CONTENT#2036(   The most common form of Request-URI is that used to identify a),
    CONTENT#2037(   resource on an origin server or gateway. In this case the absolute),
    CONTENT#2038(   path of the URI MUST be transmitted (see section 3.2.1, abs_path) as),
    CONTENT#2039(   the Request-URI, and the network location of the URI (authority) MUST),
    CONTENT#2040(   be transmitted in a Host header field. For example, a client wishing),
    CONTENT#2041(   to retrieve the resource above directly from the origin server would),
    CONTENT#2042(   create a TCP connection to port 80 of the host "www.w3.org" and send),
    CONTENT#2043(   the lines:),
      BREAK#2044,
    CONTENT#2045(       GET /pub/WWW/TheProject.html HTTP/1.1),
    CONTENT#2046(       Host: www.w3.org),
      BREAK#2047,
    CONTENT#2048(   followed by the remainder of the Request. Note that the absolute path),
    CONTENT#2049(   cannot be empty; if none is present in the original URI, it MUST be),
    CONTENT#2050(   given as "/" (the server root).),
      BREAK#2051,
    CONTENT#2052(   The Request-URI is transmitted in the format specified in section),
    CONTENT#2053(   3.2.1. If the Request-URI is encoded using the "% HEX HEX" encoding),
    CONTENT#2054(   [42], the origin server MUST decode the Request-URI in order to),
    CONTENT#2055(   properly interpret the request. Servers SHOULD respond to invalid),
    CONTENT#2056(   Request-URIs with an appropriate status code.),
      BREAK#2057,
    CONTENT#2058(   A transparent proxy MUST NOT rewrite the "abs_path" part of the),
    CONTENT#2059(   received Request-URI when forwarding it to the next inbound server,),
    CONTENT#2060(   except as noted above to replace a null abs_path with "/".),
      BREAK#2061,
    CONTENT#2062(      Note: The "no rewrite" rule prevents the proxy from changing the),
    CONTENT#2063(      meaning of the request when the origin server is improperly using),
    CONTENT#2064(      a non-reserved URI character for a reserved purpose.  Implementors),
    CONTENT#2065(      should be aware that some pre-HTTP/1.1 proxies have been known to),
    CONTENT#2066(      rewrite the Request-URI.),
      BREAK#2067,
      BREAK#2068,
      BREAK#2069,
      BREAK#2070,
      BREAK#2071,
      BREAK#2072,
      BREAK#2074,
      BREAK#2076,
      BREAK#2077,
    SECTION#2078(id=5.2, title=The Resource Identified by a Request),
      BREAK#2079,
    CONTENT#2080(   The exact resource identified by an Internet request is determined by),
    CONTENT#2081(   examining both the Request-URI and the Host header field.),
      BREAK#2082,
    CONTENT#2083(   An origin server that does not allow resources to differ by the),
    CONTENT#2084(   requested host MAY ignore the Host header field value when),
    CONTENT#2085(   determining the resource identified by an HTTP/1.1 request. (But see),
    CONTENT#2086(   section 19.6.1.1 for other requirements on Host support in HTTP/1.1.)),
      BREAK#2087,
    CONTENT#2088(   An origin server that does differentiate resources based on the host),
    CONTENT#2089(   requested (sometimes referred to as virtual hosts or vanity host),
    CONTENT#2090(   names) MUST use the following rules for determining the requested),
    CONTENT#2091(   resource on an HTTP/1.1 request:),
      BREAK#2092,
    CONTENT#2093(   1. If Request-URI is an absoluteURI, the host is part of the),
    CONTENT#2094(     Request-URI. Any Host header field value in the request MUST be),
    CONTENT#2095(     ignored.),
      BREAK#2096,
    CONTENT#2097(   2. If the Request-URI is not an absoluteURI, and the request includes),
    CONTENT#2098(     a Host header field, the host is determined by the Host header),
    CONTENT#2099(     field value.),
      BREAK#2100,
    CONTENT#2101(   3. If the host as determined by rule 1 or 2 is not a valid host on),
    CONTENT#2102(     the server, the response MUST be a 400 (Bad Request) error message.),
      BREAK#2103,
    CONTENT#2104(   Recipients of an HTTP/1.0 request that lacks a Host header field MAY),
    CONTENT#2105(   attempt to use heuristics (e.g., examination of the URI path for),
    CONTENT#2106(   something unique to a particular host) in order to determine what),
    CONTENT#2107(   exact resource is being requested.),
      BREAK#2108,
    SECTION#2109(id=5.3, title=Request Header Fields),
      BREAK#2110,
    CONTENT#2111(   The request-header fields allow the client to pass additional),
    CONTENT#2112(   information about the request, and about the client itself, to the),
    CONTENT#2113(   server. These fields act as request modifiers, with semantics),
    CONTENT#2114(   equivalent to the parameters on a programming language method),
    CONTENT#2115(   invocation.),
      BREAK#2116,
    CONTENT#2117(       request-header = Accept                   ; Section 14.1),
    CONTENT#2118(                      | Accept-Charset           ; Section 14.2),
    CONTENT#2119(                      | Accept-Encoding          ; Section 14.3),
    CONTENT#2120(                      | Accept-Language          ; Section 14.4),
    CONTENT#2121(                      | Authorization            ; Section 14.8),
    CONTENT#2122(                      | Expect                   ; Section 14.20),
    CONTENT#2123(                      | From                     ; Section 14.22),
    CONTENT#2124(                      | Host                     ; Section 14.23),
    CONTENT#2125(                      | If-Match                 ; Section 14.24),
      BREAK#2126,
      BREAK#2127,
      BREAK#2128,
      BREAK#2130,
      BREAK#2132,
      BREAK#2133,
    CONTENT#2134(                      | If-Modified-Since        ; Section 14.25),
    CONTENT#2135(                      | If-None-Match            ; Section 14.26),
    CONTENT#2136(                      | If-Range                 ; Section 14.27),
    CONTENT#2137(                      | If-Unmodified-Since      ; Section 14.28),
    CONTENT#2138(                      | Max-Forwards             ; Section 14.31),
    CONTENT#2139(                      | Proxy-Authorization      ; Section 14.34),
    CONTENT#2140(                      | Range                    ; Section 14.35),
    CONTENT#2141(                      | Referer                  ; Section 14.36),
    CONTENT#2142(                      | TE                       ; Section 14.39),
    CONTENT#2143(                      | User-Agent               ; Section 14.43),
      BREAK#2144,
    CONTENT#2145(   Request-header field names can be extended reliably only in),
    CONTENT#2146(   combination with a change in the protocol version. However, new or),
    CONTENT#2147(   experimental header fields MAY be given the semantics of request-),
    CONTENT#2148(   header fields if all parties in the communication recognize them to),
    CONTENT#2149(   be request-header fields. Unrecognized header fields are treated as),
    CONTENT#2150(   entity-header fields.),
      BREAK#2151,
    SECTION#2152(id=6, title=Response),
      BREAK#2153,
    CONTENT#2154(   After receiving and interpreting a request message, a server responds),
    CONTENT#2155(   with an HTTP response message.),
      BREAK#2156,
    CONTENT#2157(       Response      = Status-Line               ; Section 6.1),
    CONTENT#2158(                       *(( general-header        ; Section 4.5),
    CONTENT#2159(                        | response-header        ; Section 6.2),
    CONTENT#2160(                        | entity-header ) CRLF)  ; Section 7.1),
    CONTENT#2161(                       CRLF),
    CONTENT#2162(                       [ message-body ]          ; Section 7.2),
      BREAK#2163,
    SECTION#2164(id=6.1, title=Status-Line),
      BREAK#2165,
    CONTENT#2166(   The first line of a Response message is the Status-Line, consisting),
    CONTENT#2167(   of the protocol version followed by a numeric status code and its),
    CONTENT#2168(   associated textual phrase, with each element separated by SP),
    CONTENT#2169(   characters. No CR or LF is allowed except in the final CRLF sequence.),
      BREAK#2170,
    CONTENT#2171(       Status-Line = HTTP-Version SP Status-Code SP Reason-Phrase CRLF),
      BREAK#2172,
    SECTION#2173(id=6.1.1, title=Status Code and Reason Phrase),
      BREAK#2174,
    CONTENT#2175(   The Status-Code element is a 3-digit integer result code of the),
    CONTENT#2176(   attempt to understand and satisfy the request. These codes are fully),
    CONTENT#2177(   defined in section 10. The Reason-Phrase is intended to give a short),
    CONTENT#2178(   textual description of the Status-Code. The Status-Code is intended),
    CONTENT#2179(   for use by automata and the Reason-Phrase is intended for the human),
    CONTENT#2180(   user. The client is not required to examine or display the Reason-),
    CONTENT#2181(   Phrase.),
      BREAK#2182,
      BREAK#2183,
      BREAK#2184,
      BREAK#2186,
      BREAK#2188,
      BREAK#2189,
    CONTENT#2190(   The first digit of the Status-Code defines the class of response. The),
    CONTENT#2191(   last two digits do not have any categorization role. There are 5),
    CONTENT#2192(   values for the first digit:),
      BREAK#2193,
    CONTENT#2194(      - 1xx: Informational - Request received, continuing process),
      BREAK#2195,
    CONTENT#2196(      - 2xx: Success - The action was successfully received,),
    CONTENT#2197(        understood, and accepted),
      BREAK#2198,
    CONTENT#2199(      - 3xx: Redirection - Further action must be taken in order to),
    CONTENT#2200(        complete the request),
      BREAK#2201,
    CONTENT#2202(      - 4xx: Client Error - The request contains bad syntax or cannot),
    CONTENT#2203(        be fulfilled),
      BREAK#2204,
    CONTENT#2205(      - 5xx: Server Error - The server failed to fulfill an apparently),
    CONTENT#2206(        valid request),
      BREAK#2207,
    CONTENT#2208(   The individual values of the numeric status codes defined for),
    CONTENT#2209(   HTTP/1.1, and an example set of corresponding Reason-Phrase's, are),
    CONTENT#2210(   presented below. The reason phrases listed here are only),
    CONTENT#2211(   recommendations -- they MAY be replaced by local equivalents without),
    CONTENT#2212(   affecting the protocol.),
      BREAK#2213,
    CONTENT#2214(      Status-Code    =),
    CONTENT#2215(            "100"  ; Section 10.1.1: Continue),
    CONTENT#2216(          | "101"  ; Section 10.1.2: Switching Protocols),
    CONTENT#2217(          | "200"  ; Section 10.2.1: OK),
    CONTENT#2218(          | "201"  ; Section 10.2.2: Created),
    CONTENT#2219(          | "202"  ; Section 10.2.3: Accepted),
    CONTENT#2220(          | "203"  ; Section 10.2.4: Non-Authoritative Information),
    CONTENT#2221(          | "204"  ; Section 10.2.5: No Content),
    CONTENT#2222(          | "205"  ; Section 10.2.6: Reset Content),
    CONTENT#2223(          | "206"  ; Section 10.2.7: Partial Content),
    CONTENT#2224(          | "300"  ; Section 10.3.1: Multiple Choices),
    CONTENT#2225(          | "301"  ; Section 10.3.2: Moved Permanently),
    CONTENT#2226(          | "302"  ; Section 10.3.3: Found),
    CONTENT#2227(          | "303"  ; Section 10.3.4: See Other),
    CONTENT#2228(          | "304"  ; Section 10.3.5: Not Modified),
    CONTENT#2229(          | "305"  ; Section 10.3.6: Use Proxy),
    CONTENT#2230(          | "307"  ; Section 10.3.8: Temporary Redirect),
    CONTENT#2231(          | "400"  ; Section 10.4.1: Bad Request),
    CONTENT#2232(          | "401"  ; Section 10.4.2: Unauthorized),
    CONTENT#2233(          | "402"  ; Section 10.4.3: Payment Required),
    CONTENT#2234(          | "403"  ; Section 10.4.4: Forbidden),
    CONTENT#2235(          | "404"  ; Section 10.4.5: Not Found),
    CONTENT#2236(          | "405"  ; Section 10.4.6: Method Not Allowed),
    CONTENT#2237(          | "406"  ; Section 10.4.7: Not Acceptable),
      BREAK#2238,
      BREAK#2239,
      BREAK#2240,
      BREAK#2242,
      BREAK#2244,
      BREAK#2245,
    CONTENT#2246(          | "407"  ; Section 10.4.8: Proxy Authentication Required),
    CONTENT#2247(          | "408"  ; Section 10.4.9: Request Time-out),
    CONTENT#2248(          | "409"  ; Section 10.4.10: Conflict),
    CONTENT#2249(          | "410"  ; Section 10.4.11: Gone),
    CONTENT#2250(          | "411"  ; Section 10.4.12: Length Required),
    CONTENT#2251(          | "412"  ; Section 10.4.13: Precondition Failed),
    CONTENT#2252(          | "413"  ; Section 10.4.14: Request Entity Too Large),
    CONTENT#2253(          | "414"  ; Section 10.4.15: Request-URI Too Large),
    CONTENT#2254(          | "415"  ; Section 10.4.16: Unsupported Media Type),
    CONTENT#2255(          | "416"  ; Section 10.4.17: Requested range not satisfiable),
    CONTENT#2256(          | "417"  ; Section 10.4.18: Expectation Failed),
    CONTENT#2257(          | "500"  ; Section 10.5.1: Internal Server Error),
    CONTENT#2258(          | "501"  ; Section 10.5.2: Not Implemented),
    CONTENT#2259(          | "502"  ; Section 10.5.3: Bad Gateway),
    CONTENT#2260(          | "503"  ; Section 10.5.4: Service Unavailable),
    CONTENT#2261(          | "504"  ; Section 10.5.5: Gateway Time-out),
    CONTENT#2262(          | "505"  ; Section 10.5.6: HTTP Version not supported),
    CONTENT#2263(          | extension-code),
      BREAK#2264,
    CONTENT#2265(      extension-code = 3DIGIT),
    CONTENT#2266(      Reason-Phrase  = *<TEXT, excluding CR, LF>),
      BREAK#2267,
    CONTENT#2268(   HTTP status codes are extensible. HTTP applications are not required),
    CONTENT#2269(   to understand the meaning of all registered status codes, though such),
    CONTENT#2270(   understanding is obviously desirable. However, applications MUST),
    CONTENT#2271(   understand the class of any status code, as indicated by the first),
    CONTENT#2272(   digit, and treat any unrecognized response as being equivalent to the),
    CONTENT#2273(   x00 status code of that class, with the exception that an),
    CONTENT#2274(   unrecognized response MUST NOT be cached. For example, if an),
    CONTENT#2275(   unrecognized status code of 431 is received by the client, it can),
    CONTENT#2276(   safely assume that there was something wrong with its request and),
    CONTENT#2277(   treat the response as if it had received a 400 status code. In such),
    CONTENT#2278(   cases, user agents SHOULD present to the user the entity returned),
    CONTENT#2279(   with the response, since that entity is likely to include human-),
    CONTENT#2280(   readable information which will explain the unusual status.),
      BREAK#2281,
    SECTION#2282(id=6.2, title=Response Header Fields),
      BREAK#2283,
    CONTENT#2284(   The response-header fields allow the server to pass additional),
    CONTENT#2285(   information about the response which cannot be placed in the Status-),
    CONTENT#2286(   Line. These header fields give information about the server and about),
    CONTENT#2287(   further access to the resource identified by the Request-URI.),
      BREAK#2288,
    CONTENT#2289(       response-header = Accept-Ranges           ; Section 14.5),
    CONTENT#2290(                       | Age                     ; Section 14.6),
    CONTENT#2291(                       | ETag                    ; Section 14.19),
    CONTENT#2292(                       | Location                ; Section 14.30),
    CONTENT#2293(                       | Proxy-Authenticate      ; Section 14.33),
      BREAK#2294,
      BREAK#2295,
      BREAK#2296,
      BREAK#2298,
      BREAK#2300,
      BREAK#2301,
    CONTENT#2302(                       | Retry-After             ; Section 14.37),
    CONTENT#2303(                       | Server                  ; Section 14.38),
    CONTENT#2304(                       | Vary                    ; Section 14.44),
    CONTENT#2305(                       | WWW-Authenticate        ; Section 14.47),
      BREAK#2306,
    CONTENT#2307(   Response-header field names can be extended reliably only in),
    CONTENT#2308(   combination with a change in the protocol version. However, new or),
    CONTENT#2309(   experimental header fields MAY be given the semantics of response-),
    CONTENT#2310(   header fields if all parties in the communication recognize them to),
    CONTENT#2311(   be response-header fields. Unrecognized header fields are treated as),
    CONTENT#2312(   entity-header fields.),
      BREAK#2313,
    SECTION#2314(id=7, title=Entity),
      BREAK#2315,
    CONTENT#2316(   Request and Response messages MAY transfer an entity if not otherwise),
    CONTENT#2317(   restricted by the request method or response status code. An entity),
    CONTENT#2318(   consists of entity-header fields and an entity-body, although some),
    CONTENT#2319(   responses will only include the entity-headers.),
      BREAK#2320,
    CONTENT#2321(   In this section, both sender and recipient refer to either the client),
    CONTENT#2322(   or the server, depending on who sends and who receives the entity.),
      BREAK#2323,
    SECTION#2324(id=7.1, title=Entity Header Fields),
      BREAK#2325,
    CONTENT#2326(   Entity-header fields define metainformation about the entity-body or,),
    CONTENT#2327(   if no body is present, about the resource identified by the request.),
    CONTENT#2328(   Some of this metainformation is OPTIONAL; some might be REQUIRED by),
    CONTENT#2329(   portions of this specification.),
      BREAK#2330,
    CONTENT#2331(       entity-header  = Allow                    ; Section 14.7),
    CONTENT#2332(                      | Content-Encoding         ; Section 14.11),
    CONTENT#2333(                      | Content-Language         ; Section 14.12),
    CONTENT#2334(                      | Content-Length           ; Section 14.13),
    CONTENT#2335(                      | Content-Location         ; Section 14.14),
    CONTENT#2336(                      | Content-MD5              ; Section 14.15),
    CONTENT#2337(                      | Content-Range            ; Section 14.16),
    CONTENT#2338(                      | Content-Type             ; Section 14.17),
    CONTENT#2339(                      | Expires                  ; Section 14.21),
    CONTENT#2340(                      | Last-Modified            ; Section 14.29),
    CONTENT#2341(                      | extension-header),
      BREAK#2342,
    CONTENT#2343(       extension-header = message-header),
      BREAK#2344,
    CONTENT#2345(   The extension-header mechanism allows additional entity-header fields),
    CONTENT#2346(   to be defined without changing the protocol, but these fields cannot),
    CONTENT#2347(   be assumed to be recognizable by the recipient. Unrecognized header),
    CONTENT#2348(   fields SHOULD be ignored by the recipient and MUST be forwarded by),
    CONTENT#2349(   transparent proxies.),
      BREAK#2350,
      BREAK#2351,
      BREAK#2352,
      BREAK#2354,
      BREAK#2356,
      BREAK#2357,
    SECTION#2358(id=7.2, title=Entity Body),
      BREAK#2359,
    CONTENT#2360(   The entity-body (if any) sent with an HTTP request or response is in),
    CONTENT#2361(   a format and encoding defined by the entity-header fields.),
      BREAK#2362,
    CONTENT#2363(       entity-body    = *OCTET),
      BREAK#2364,
    CONTENT#2365(   An entity-body is only present in a message when a message-body is),
    CONTENT#2366(   present, as described in section 4.3. The entity-body is obtained),
    CONTENT#2367(   from the message-body by decoding any Transfer-Encoding that might),
    CONTENT#2368(   have been applied to ensure safe and proper transfer of the message.),
      BREAK#2369,
    SECTION#2370(id=7.2.1, title=Type),
      BREAK#2371,
    CONTENT#2372(   When an entity-body is included with a message, the data type of that),
    CONTENT#2373(   body is determined via the header fields Content-Type and Content-),
    CONTENT#2374(   Encoding. These define a two-layer, ordered encoding model:),
      BREAK#2375,
    CONTENT#2376(       entity-body := Content-Encoding( Content-Type( data ) )),
      BREAK#2377,
    CONTENT#2378(   Content-Type specifies the media type of the underlying data.),
    CONTENT#2379(   Content-Encoding may be used to indicate any additional content),
    CONTENT#2380(   codings applied to the data, usually for the purpose of data),
    CONTENT#2381(   compression, that are a property of the requested resource. There is),
    CONTENT#2382(   no default encoding.),
      BREAK#2383,
    CONTENT#2384(   Any HTTP/1.1 message containing an entity-body SHOULD include a),
    CONTENT#2385(   Content-Type header field defining the media type of that body. If),
    CONTENT#2386(   and only if the media type is not given by a Content-Type field, the),
    CONTENT#2387(   recipient MAY attempt to guess the media type via inspection of its),
    CONTENT#2388(   content and/or the name extension(s) of the URI used to identify the),
    CONTENT#2389(   resource. If the media type remains unknown, the recipient SHOULD),
    CONTENT#2390(   treat it as type "application/octet-stream".),
      BREAK#2391,
    SECTION#2392(id=7.2.2, title=Entity Length),
      BREAK#2393,
    CONTENT#2394(   The entity-length of a message is the length of the message-body),
    CONTENT#2395(   before any transfer-codings have been applied. Section 4.4 defines),
    CONTENT#2396(   how the transfer-length of a message-body is determined.),
      BREAK#2397,
      BREAK#2398,
      BREAK#2399,
      BREAK#2400,
      BREAK#2401,
      BREAK#2402,
      BREAK#2403,
      BREAK#2404,
      BREAK#2405,
      BREAK#2406,
      BREAK#2407,
      BREAK#2408,
      BREAK#2410,
      BREAK#2412,
      BREAK#2413,
    SECTION#2414(id=8, title=Connections),
      BREAK#2415,
    SECTION#2416(id=8.1, title=Persistent Connections),
      BREAK#2417,
    SECTION#2418(id=8.1.1, title=Purpose),
      BREAK#2419,
    CONTENT#2420(   Prior to persistent connections, a separate TCP connection was),
    CONTENT#2421(   established to fetch each URL, increasing the load on HTTP servers),
    CONTENT#2422(   and causing congestion on the Internet. The use of inline images and),
    CONTENT#2423(   other associated data often require a client to make multiple),
    CONTENT#2424(   requests of the same server in a short amount of time. Analysis of),
    CONTENT#2425(   these performance problems and results from a prototype),
    CONTENT#2426(   implementation are available [26] [30]. Implementation experience and),
    CONTENT#2427(   measurements of actual HTTP/1.1 (RFC 2068) implementations show good),
    CONTENT#2428(   results [39]. Alternatives have also been explored, for example,),
    CONTENT#2429(   T/TCP [27].),
      BREAK#2430,
    CONTENT#2431(   Persistent HTTP connections have a number of advantages:),
      BREAK#2432,
    CONTENT#2433(      - By opening and closing fewer TCP connections, CPU time is saved),
    CONTENT#2434(        in routers and hosts (clients, servers, proxies, gateways,),
    CONTENT#2435(        tunnels, or caches), and memory used for TCP protocol control),
    CONTENT#2436(        blocks can be saved in hosts.),
      BREAK#2437,
    CONTENT#2438(      - HTTP requests and responses can be pipelined on a connection.),
    CONTENT#2439(        Pipelining allows a client to make multiple requests without),
    CONTENT#2440(        waiting for each response, allowing a single TCP connection to),
    CONTENT#2441(        be used much more efficiently, with much lower elapsed time.),
      BREAK#2442,
    CONTENT#2443(      - Network congestion is reduced by reducing the number of packets),
    CONTENT#2444(        caused by TCP opens, and by allowing TCP sufficient time to),
    CONTENT#2445(        determine the congestion state of the network.),
      BREAK#2446,
    CONTENT#2447(      - Latency on subsequent requests is reduced since there is no time),
    CONTENT#2448(        spent in TCP's connection opening handshake.),
      BREAK#2449,
    CONTENT#2450(      - HTTP can evolve more gracefully, since errors can be reported),
    CONTENT#2451(        without the penalty of closing the TCP connection. Clients using),
    CONTENT#2452(        future versions of HTTP might optimistically try a new feature,),
    CONTENT#2453(        but if communicating with an older server, retry with old),
    CONTENT#2454(        semantics after an error is reported.),
      BREAK#2455,
    CONTENT#2456(   HTTP implementations SHOULD implement persistent connections.),
      BREAK#2457,
      BREAK#2458,
      BREAK#2459,
      BREAK#2460,
      BREAK#2461,
      BREAK#2462,
      BREAK#2463,
      BREAK#2464,
      BREAK#2466,
      BREAK#2468,
      BREAK#2469,
    SECTION#2470(id=8.1.2, title=Overall Operation),
      BREAK#2471,
    CONTENT#2472(   A significant difference between HTTP/1.1 and earlier versions of),
    CONTENT#2473(   HTTP is that persistent connections are the default behavior of any),
    CONTENT#2474(   HTTP connection. That is, unless otherwise indicated, the client),
    CONTENT#2475(   SHOULD assume that the server will maintain a persistent connection,),
    CONTENT#2476(   even after error responses from the server.),
      BREAK#2477,
    CONTENT#2478(   Persistent connections provide a mechanism by which a client and a),
    CONTENT#2479(   server can signal the close of a TCP connection. This signaling takes),
    CONTENT#2480(   place using the Connection header field (section 14.10). Once a close),
    CONTENT#2481(   has been signaled, the client MUST NOT send any more requests on that),
    CONTENT#2482(   connection.),
      BREAK#2483,
    SECTION#2484(id=8.1.2.1, title=Negotiation),
      BREAK#2485,
    CONTENT#2486(   An HTTP/1.1 server MAY assume that a HTTP/1.1 client intends to),
    CONTENT#2487(   maintain a persistent connection unless a Connection header including),
    CONTENT#2488(   the connection-token "close" was sent in the request. If the server),
    CONTENT#2489(   chooses to close the connection immediately after sending the),
    CONTENT#2490(   response, it SHOULD send a Connection header including the),
    CONTENT#2491(   connection-token close.),
      BREAK#2492,
    CONTENT#2493(   An HTTP/1.1 client MAY expect a connection to remain open, but would),
    CONTENT#2494(   decide to keep it open based on whether the response from a server),
    CONTENT#2495(   contains a Connection header with the connection-token close. In case),
    CONTENT#2496(   the client does not want to maintain a connection for more than that),
    CONTENT#2497(   request, it SHOULD send a Connection header including the),
    CONTENT#2498(   connection-token close.),
      BREAK#2499,
    CONTENT#2500(   If either the client or the server sends the close token in the),
    CONTENT#2501(   Connection header, that request becomes the last one for the),
    CONTENT#2502(   connection.),
      BREAK#2503,
    CONTENT#2504(   Clients and servers SHOULD NOT assume that a persistent connection is),
    CONTENT#2505(   maintained for HTTP versions less than 1.1 unless it is explicitly),
    CONTENT#2506(   signaled. See section 19.6.2 for more information on backward),
    CONTENT#2507(   compatibility with HTTP/1.0 clients.),
      BREAK#2508,
    CONTENT#2509(   In order to remain persistent, all messages on the connection MUST),
    CONTENT#2510(   have a self-defined message length (i.e., one not defined by closure),
    CONTENT#2511(   of the connection), as described in section 4.4.),
      BREAK#2512,
      BREAK#2513,
      BREAK#2514,
      BREAK#2515,
      BREAK#2516,
      BREAK#2517,
      BREAK#2518,
      BREAK#2519,
      BREAK#2520,
      BREAK#2522,
      BREAK#2524,
      BREAK#2525,
    SECTION#2526(id=8.1.2.2, title=Pipelining),
      BREAK#2527,
    CONTENT#2528(   A client that supports persistent connections MAY "pipeline" its),
    CONTENT#2529(   requests (i.e., send multiple requests without waiting for each),
    CONTENT#2530(   response). A server MUST send its responses to those requests in the),
    CONTENT#2531(   same order that the requests were received.),
      BREAK#2532,
    CONTENT#2533(   Clients which assume persistent connections and pipeline immediately),
    CONTENT#2534(   after connection establishment SHOULD be prepared to retry their),
    CONTENT#2535(   connection if the first pipelined attempt fails. If a client does),
    CONTENT#2536(   such a retry, it MUST NOT pipeline before it knows the connection is),
    CONTENT#2537(   persistent. Clients MUST also be prepared to resend their requests if),
    CONTENT#2538(   the server closes the connection before sending all of the),
    CONTENT#2539(   corresponding responses.),
      BREAK#2540,
    CONTENT#2541(   Clients SHOULD NOT pipeline requests using non-idempotent methods or),
    CONTENT#2542(   non-idempotent sequences of methods (see section 9.1.2). Otherwise, a),
    CONTENT#2543(   premature termination of the transport connection could lead to),
    CONTENT#2544(   indeterminate results. A client wishing to send a non-idempotent),
    CONTENT#2545(   request SHOULD wait to send that request until it has received the),
    CONTENT#2546(   response status for the previous request.),
      BREAK#2547,
    SECTION#2548(id=8.1.3, title=Proxy Servers),
      BREAK#2549,
    CONTENT#2550(   It is especially important that proxies correctly implement the),
    CONTENT#2551(   properties of the Connection header field as specified in section),
    CONTENT#2552(   14.10.),
      BREAK#2553,
    CONTENT#2554(   The proxy server MUST signal persistent connections separately with),
    CONTENT#2555(   its clients and the origin servers (or other proxy servers) that it),
    CONTENT#2556(   connects to. Each persistent connection applies to only one transport),
    CONTENT#2557(   link.),
      BREAK#2558,
    CONTENT#2559(   A proxy server MUST NOT establish a HTTP/1.1 persistent connection),
    CONTENT#2560(   with an HTTP/1.0 client (but see RFC 2068 [33] for information and),
    CONTENT#2561(   discussion of the problems with the Keep-Alive header implemented by),
    CONTENT#2562(   many HTTP/1.0 clients).),
      BREAK#2563,
    SECTION#2564(id=8.1.4, title=Practical Considerations),
      BREAK#2565,
    CONTENT#2566(   Servers will usually have some time-out value beyond which they will),
    CONTENT#2567(   no longer maintain an inactive connection. Proxy servers might make),
    CONTENT#2568(   this a higher value since it is likely that the client will be making),
    CONTENT#2569(   more connections through the same server. The use of persistent),
    CONTENT#2570(   connections places no requirements on the length (or existence) of),
    CONTENT#2571(   this time-out for either the client or the server.),
      BREAK#2572,
      BREAK#2573,
      BREAK#2574,
      BREAK#2575,
      BREAK#2576,
      BREAK#2578,
      BREAK#2580,
      BREAK#2581,
    CONTENT#2582(   When a client or server wishes to time-out it SHOULD issue a graceful),
    CONTENT#2583(   close on the transport connection. Clients and servers SHOULD both),
    CONTENT#2584(   constantly watch for the other side of the transport close, and),
    CONTENT#2585(   respond to it as appropriate. If a client or server does not detect),
    CONTENT#2586(   the other side's close promptly it could cause unnecessary resource),
    CONTENT#2587(   drain on the network.),
      BREAK#2588,
    CONTENT#2589(   A client, server, or proxy MAY close the transport connection at any),
    CONTENT#2590(   time. For example, a client might have started to send a new request),
    CONTENT#2591(   at the same time that the server has decided to close the "idle"),
    CONTENT#2592(   connection. From the server's point of view, the connection is being),
    CONTENT#2593(   closed while it was idle, but from the client's point of view, a),
    CONTENT#2594(   request is in progress.),
      BREAK#2595,
    CONTENT#2596(   This means that clients, servers, and proxies MUST be able to recover),
    CONTENT#2597(   from asynchronous close events. Client software SHOULD reopen the),
    CONTENT#2598(   transport connection and retransmit the aborted sequence of requests),
    CONTENT#2599(   without user interaction so long as the request sequence is),
    CONTENT#2600(   idempotent (see section 9.1.2). Non-idempotent methods or sequences),
    CONTENT#2601(   MUST NOT be automatically retried, although user agents MAY offer a),
    CONTENT#2602(   human operator the choice of retrying the request(s). Confirmation by),
    CONTENT#2603(   user-agent software with semantic understanding of the application),
    CONTENT#2604(   MAY substitute for user confirmation. The automatic retry SHOULD NOT),
    CONTENT#2605(   be repeated if the second sequence of requests fails.),
      BREAK#2606,
    CONTENT#2607(   Servers SHOULD always respond to at least one request per connection,),
    CONTENT#2608(   if at all possible. Servers SHOULD NOT close a connection in the),
    CONTENT#2609(   middle of transmitting a response, unless a network or client failure),
    CONTENT#2610(   is suspected.),
      BREAK#2611,
    CONTENT#2612(   Clients that use persistent connections SHOULD limit the number of),
    CONTENT#2613(   simultaneous connections that they maintain to a given server. A),
    CONTENT#2614(   single-user client SHOULD NOT maintain more than 2 connections with),
    CONTENT#2615(   any server or proxy. A proxy SHOULD use up to 2*N connections to),
    CONTENT#2616(   another server or proxy, where N is the number of simultaneously),
    CONTENT#2617(   active users. These guidelines are intended to improve HTTP response),
    CONTENT#2618(   times and avoid congestion.),
      BREAK#2619,
    SECTION#2620(id=8.2, title=Message Transmission Requirements),
      BREAK#2621,
    SECTION#2622(id=8.2.1, title=Persistent Connections and Flow Control),
      BREAK#2623,
    CONTENT#2624(   HTTP/1.1 servers SHOULD maintain persistent connections and use TCP's),
    CONTENT#2625(   flow control mechanisms to resolve temporary overloads, rather than),
    CONTENT#2626(   terminating connections with the expectation that clients will retry.),
    CONTENT#2627(   The latter technique can exacerbate network congestion.),
      BREAK#2628,
      BREAK#2629,
      BREAK#2630,
      BREAK#2631,
      BREAK#2632,
      BREAK#2634,
      BREAK#2636,
      BREAK#2637,
    SECTION#2638(id=8.2.2, title=Monitoring Connections for Error Status Messages),
      BREAK#2639,
    CONTENT#2640(   An HTTP/1.1 (or later) client sending a message-body SHOULD monitor),
    CONTENT#2641(   the network connection for an error status while it is transmitting),
    CONTENT#2642(   the request. If the client sees an error status, it SHOULD),
    CONTENT#2643(   immediately cease transmitting the body. If the body is being sent),
    CONTENT#2644(   using a "chunked" encoding (section 3.6), a zero length chunk and),
    CONTENT#2645(   empty trailer MAY be used to prematurely mark the end of the message.),
    CONTENT#2646(   If the body was preceded by a Content-Length header, the client MUST),
    CONTENT#2647(   close the connection.),
      BREAK#2648,
    SECTION#2649(id=8.2.3, title=Use of the 100 (Continue) Status),
      BREAK#2650,
    CONTENT#2651(   The purpose of the 100 (Continue) status (see section 10.1.1) is to),
    CONTENT#2652(   allow a client that is sending a request message with a request body),
    CONTENT#2653(   to determine if the origin server is willing to accept the request),
    CONTENT#2654(   (based on the request headers) before the client sends the request),
    CONTENT#2655(   body. In some cases, it might either be inappropriate or highly),
    CONTENT#2656(   inefficient for the client to send the body if the server will reject),
    CONTENT#2657(   the message without looking at the body.),
      BREAK#2658,
    CONTENT#2659(   Requirements for HTTP/1.1 clients:),
      BREAK#2660,
    CONTENT#2661(      - If a client will wait for a 100 (Continue) response before),
    CONTENT#2662(        sending the request body, it MUST send an Expect request-header),
    CONTENT#2663(        field (section 14.20) with the "100-continue" expectation.),
      BREAK#2664,
    CONTENT#2665(      - A client MUST NOT send an Expect request-header field (section),
    CONTENT#2666(        14.20) with the "100-continue" expectation if it does not intend),
    CONTENT#2667(        to send a request body.),
      BREAK#2668,
    CONTENT#2669(   Because of the presence of older implementations, the protocol allows),
    CONTENT#2670(   ambiguous situations in which a client may send "Expect: 100-),
    CONTENT#2671(   continue" without receiving either a 417 (Expectation Failed) status),
    CONTENT#2672(   or a 100 (Continue) status. Therefore, when a client sends this),
    CONTENT#2673(   header field to an origin server (possibly via a proxy) from which it),
    CONTENT#2674(   has never seen a 100 (Continue) status, the client SHOULD NOT wait),
    CONTENT#2675(   for an indefinite period before sending the request body.),
      BREAK#2676,
    CONTENT#2677(   Requirements for HTTP/1.1 origin servers:),
      BREAK#2678,
    CONTENT#2679(      - Upon receiving a request which includes an Expect request-header),
    CONTENT#2680(        field with the "100-continue" expectation, an origin server MUST),
    CONTENT#2681(        either respond with 100 (Continue) status and continue to read),
    CONTENT#2682(        from the input stream, or respond with a final status code. The),
    CONTENT#2683(        origin server MUST NOT wait for the request body before sending),
    CONTENT#2684(        the 100 (Continue) response. If it responds with a final status),
    CONTENT#2685(        code, it MAY close the transport connection or it MAY continue),
      BREAK#2686,
      BREAK#2687,
      BREAK#2688,
      BREAK#2690,
      BREAK#2692,
      BREAK#2693,
    CONTENT#2694(        to read and discard the rest of the request.  It MUST NOT),
    CONTENT#2695(        perform the requested method if it returns a final status code.),
      BREAK#2696,
    CONTENT#2697(      - An origin server SHOULD NOT send a 100 (Continue) response if),
    CONTENT#2698(        the request message does not include an Expect request-header),
    CONTENT#2699(        field with the "100-continue" expectation, and MUST NOT send a),
    CONTENT#2700(        100 (Continue) response if such a request comes from an HTTP/1.0),
    CONTENT#2701(        (or earlier) client. There is an exception to this rule: for),
    CONTENT#2702(        compatibility with RFC 2068, a server MAY send a 100 (Continue)),
    CONTENT#2703(        status in response to an HTTP/1.1 PUT or POST request that does),
    CONTENT#2704(        not include an Expect request-header field with the "100-),
    CONTENT#2705(        continue" expectation. This exception, the purpose of which is),
    CONTENT#2706(        to minimize any client processing delays associated with an),
    CONTENT#2707(        undeclared wait for 100 (Continue) status, applies only to),
    CONTENT#2708(        HTTP/1.1 requests, and not to requests with any other HTTP-),
    CONTENT#2709(        version value.),
      BREAK#2710,
    CONTENT#2711(      - An origin server MAY omit a 100 (Continue) response if it has),
    CONTENT#2712(        already received some or all of the request body for the),
    CONTENT#2713(        corresponding request.),
      BREAK#2714,
    CONTENT#2715(      - An origin server that sends a 100 (Continue) response MUST),
    CONTENT#2716(        ultimately send a final status code, once the request body is),
    CONTENT#2717(        received and processed, unless it terminates the transport),
    CONTENT#2718(        connection prematurely.),
      BREAK#2719,
    CONTENT#2720(      - If an origin server receives a request that does not include an),
    CONTENT#2721(        Expect request-header field with the "100-continue" expectation,),
    CONTENT#2722(        the request includes a request body, and the server responds),
    CONTENT#2723(        with a final status code before reading the entire request body),
    CONTENT#2724(        from the transport connection, then the server SHOULD NOT close),
    CONTENT#2725(        the transport connection until it has read the entire request,),
    CONTENT#2726(        or until the client closes the connection. Otherwise, the client),
    CONTENT#2727(        might not reliably receive the response message. However, this),
    CONTENT#2728(        requirement is not be construed as preventing a server from),
    CONTENT#2729(        defending itself against denial-of-service attacks, or from),
    CONTENT#2730(        badly broken client implementations.),
      BREAK#2731,
    CONTENT#2732(   Requirements for HTTP/1.1 proxies:),
      BREAK#2733,
    CONTENT#2734(      - If a proxy receives a request that includes an Expect request-),
    CONTENT#2735(        header field with the "100-continue" expectation, and the proxy),
    CONTENT#2736(        either knows that the next-hop server complies with HTTP/1.1 or),
    CONTENT#2737(        higher, or does not know the HTTP version of the next-hop),
    CONTENT#2738(        server, it MUST forward the request, including the Expect header),
    CONTENT#2739(        field.),
      BREAK#2740,
      BREAK#2741,
      BREAK#2742,
      BREAK#2743,
      BREAK#2744,
      BREAK#2746,
      BREAK#2748,
      BREAK#2749,
    CONTENT#2750(      - If the proxy knows that the version of the next-hop server is),
    CONTENT#2751(        HTTP/1.0 or lower, it MUST NOT forward the request, and it MUST),
    CONTENT#2752(        respond with a 417 (Expectation Failed) status.),
      BREAK#2753,
    CONTENT#2754(      - Proxies SHOULD maintain a cache recording the HTTP version),
    CONTENT#2755(        numbers received from recently-referenced next-hop servers.),
      BREAK#2756,
    CONTENT#2757(      - A proxy MUST NOT forward a 100 (Continue) response if the),
    CONTENT#2758(        request message was received from an HTTP/1.0 (or earlier)),
    CONTENT#2759(        client and did not include an Expect request-header field with),
    CONTENT#2760(        the "100-continue" expectation. This requirement overrides the),
    CONTENT#2761(        general rule for forwarding of 1xx responses (see section 10.1).),
      BREAK#2762,
    SECTION#2763(id=8.2.4, title=Client Behavior if Server Prematurely Closes Connection),
      BREAK#2764,
    CONTENT#2765(   If an HTTP/1.1 client sends a request which includes a request body,),
    CONTENT#2766(   but which does not include an Expect request-header field with the),
    CONTENT#2767(   "100-continue" expectation, and if the client is not directly),
    CONTENT#2768(   connected to an HTTP/1.1 origin server, and if the client sees the),
    CONTENT#2769(   connection close before receiving any status from the server, the),
    CONTENT#2770(   client SHOULD retry the request.  If the client does retry this),
    CONTENT#2771(   request, it MAY use the following "binary exponential backoff"),
    CONTENT#2772(   algorithm to be assured of obtaining a reliable response:),
      BREAK#2773,
    CONTENT#2774(      1. Initiate a new connection to the server),
      BREAK#2775,
    CONTENT#2776(      2. Transmit the request-headers),
      BREAK#2777,
    CONTENT#2778(      3. Initialize a variable R to the estimated round-trip time to the),
    CONTENT#2779(         server (e.g., based on the time it took to establish the),
    CONTENT#2780(         connection), or to a constant value of 5 seconds if the round-),
    CONTENT#2781(         trip time is not available.),
      BREAK#2782,
    CONTENT#2783(      4. Compute T = R * (2**N), where N is the number of previous),
    CONTENT#2784(         retries of this request.),
      BREAK#2785,
    CONTENT#2786(      5. Wait either for an error response from the server, or for T),
    CONTENT#2787(         seconds (whichever comes first)),
      BREAK#2788,
    CONTENT#2789(      6. If no error response is received, after T seconds transmit the),
    CONTENT#2790(         body of the request.),
      BREAK#2791,
    CONTENT#2792(      7. If client sees that the connection is closed prematurely,),
    CONTENT#2793(         repeat from step 1 until the request is accepted, an error),
    CONTENT#2794(         response is received, or the user becomes impatient and),
    CONTENT#2795(         terminates the retry process.),
      BREAK#2796,
      BREAK#2797,
      BREAK#2798,
      BREAK#2799,
      BREAK#2800,
      BREAK#2802,
      BREAK#2804,
      BREAK#2805,
    CONTENT#2806(   If at any point an error status is received, the client),
      BREAK#2807,
    CONTENT#2808(      - SHOULD NOT continue and),
      BREAK#2809,
    CONTENT#2810(      - SHOULD close the connection if it has not completed sending the),
    CONTENT#2811(        request message.),
      BREAK#2812,
    SECTION#2813(id=9, title=Method Definitions),
      BREAK#2814,
    CONTENT#2815(   The set of common methods for HTTP/1.1 is defined below. Although),
    CONTENT#2816(   this set can be expanded, additional methods cannot be assumed to),
    CONTENT#2817(   share the same semantics for separately extended clients and servers.),
      BREAK#2818,
    CONTENT#2819(   The Host request-header field (section 14.23) MUST accompany all),
    CONTENT#2820(   HTTP/1.1 requests.),
      BREAK#2821,
    SECTION#2822(id=9.1, title=Safe and Idempotent Methods),
      BREAK#2823,
    SECTION#2824(id=9.1.1, title=Safe Methods),
      BREAK#2825,
    CONTENT#2826(   Implementors should be aware that the software represents the user in),
    CONTENT#2827(   their interactions over the Internet, and should be careful to allow),
    CONTENT#2828(   the user to be aware of any actions they might take which may have an),
    CONTENT#2829(   unexpected significance to themselves or others.),
      BREAK#2830,
    CONTENT#2831(   In particular, the convention has been established that the GET and),
    CONTENT#2832(   HEAD methods SHOULD NOT have the significance of taking an action),
    CONTENT#2833(   other than retrieval. These methods ought to be considered "safe".),
    CONTENT#2834(   This allows user agents to represent other methods, such as POST, PUT),
    CONTENT#2835(   and DELETE, in a special way, so that the user is made aware of the),
    CONTENT#2836(   fact that a possibly unsafe action is being requested.),
      BREAK#2837,
    CONTENT#2838(   Naturally, it is not possible to ensure that the server does not),
    CONTENT#2839(   generate side-effects as a result of performing a GET request; in),
    CONTENT#2840(   fact, some dynamic resources consider that a feature. The important),
    CONTENT#2841(   distinction here is that the user did not request the side-effects,),
    CONTENT#2842(   so therefore cannot be held accountable for them.),
      BREAK#2843,
    SECTION#2844(id=9.1.2, title=Idempotent Methods),
      BREAK#2845,
    CONTENT#2846(   Methods can also have the property of "idempotence" in that (aside),
    CONTENT#2847(   from error or expiration issues) the side-effects of N > 0 identical),
    CONTENT#2848(   requests is the same as for a single request. The methods GET, HEAD,),
    CONTENT#2849(   PUT and DELETE share this property. Also, the methods OPTIONS and),
    CONTENT#2850(   TRACE SHOULD NOT have side effects, and so are inherently idempotent.),
      BREAK#2851,
      BREAK#2852,
      BREAK#2853,
      BREAK#2854,
      BREAK#2855,
      BREAK#2856,
      BREAK#2858,
      BREAK#2860,
      BREAK#2861,
    CONTENT#2862(   However, it is possible that a sequence of several requests is non-),
    CONTENT#2863(   idempotent, even if all of the methods executed in that sequence are),
    CONTENT#2864(   idempotent. (A sequence is idempotent if a single execution of the),
    CONTENT#2865(   entire sequence always yields a result that is not changed by a),
    CONTENT#2866(   reexecution of all, or part, of that sequence.) For example, a),
    CONTENT#2867(   sequence is non-idempotent if its result depends on a value that is),
    CONTENT#2868(   later modified in the same sequence.),
      BREAK#2869,
    CONTENT#2870(   A sequence that never has side effects is idempotent, by definition),
    CONTENT#2871(   (provided that no concurrent operations are being executed on the),
    CONTENT#2872(   same set of resources).),
      BREAK#2873,
    SECTION#2874(id=9.2, title=OPTIONS),
      BREAK#2875,
    CONTENT#2876(   The OPTIONS method represents a request for information about the),
    CONTENT#2877(   communication options available on the request/response chain),
    CONTENT#2878(   identified by the Request-URI. This method allows the client to),
    CONTENT#2879(   determine the options and/or requirements associated with a resource,),
    CONTENT#2880(   or the capabilities of a server, without implying a resource action),
    CONTENT#2881(   or initiating a resource retrieval.),
      BREAK#2882,
    CONTENT#2883(   Responses to this method are not cacheable.),
      BREAK#2884,
    CONTENT#2885(   If the OPTIONS request includes an entity-body (as indicated by the),
    CONTENT#2886(   presence of Content-Length or Transfer-Encoding), then the media type),
    CONTENT#2887(   MUST be indicated by a Content-Type field. Although this),
    CONTENT#2888(   specification does not define any use for such a body, future),
    CONTENT#2889(   extensions to HTTP might use the OPTIONS body to make more detailed),
    CONTENT#2890(   queries on the server. A server that does not support such an),
    CONTENT#2891(   extension MAY discard the request body.),
      BREAK#2892,
    CONTENT#2893(   If the Request-URI is an asterisk ("*"), the OPTIONS request is),
    CONTENT#2894(   intended to apply to the server in general rather than to a specific),
    CONTENT#2895(   resource. Since a server's communication options typically depend on),
    CONTENT#2896(   the resource, the "*" request is only useful as a "ping" or "no-op"),
    CONTENT#2897(   type of method; it does nothing beyond allowing the client to test),
    CONTENT#2898(   the capabilities of the server. For example, this can be used to test),
    CONTENT#2899(   a proxy for HTTP/1.1 compliance (or lack thereof).),
      BREAK#2900,
    CONTENT#2901(   If the Request-URI is not an asterisk, the OPTIONS request applies),
    CONTENT#2902(   only to the options that are available when communicating with that),
    CONTENT#2903(   resource.),
      BREAK#2904,
    CONTENT#2905(   A 200 response SHOULD include any header fields that indicate),
    CONTENT#2906(   optional features implemented by the server and applicable to that),
    CONTENT#2907(   resource (e.g., Allow), possibly including extensions not defined by),
    CONTENT#2908(   this specification. The response body, if any, SHOULD also include),
    CONTENT#2909(   information about the communication options. The format for such a),
      BREAK#2910,
      BREAK#2911,
      BREAK#2912,
      BREAK#2914,
      BREAK#2916,
      BREAK#2917,
    CONTENT#2918(   body is not defined by this specification, but might be defined by),
    CONTENT#2919(   future extensions to HTTP. Content negotiation MAY be used to select),
    CONTENT#2920(   the appropriate response format. If no response body is included, the),
    CONTENT#2921(   response MUST include a Content-Length field with a field-value of),
    CONTENT#2922(   "0".),
      BREAK#2923,
    CONTENT#2924(   The Max-Forwards request-header field MAY be used to target a),
    CONTENT#2925(   specific proxy in the request chain. When a proxy receives an OPTIONS),
    CONTENT#2926(   request on an absoluteURI for which request forwarding is permitted,),
    CONTENT#2927(   the proxy MUST check for a Max-Forwards field. If the Max-Forwards),
    CONTENT#2928(   field-value is zero ("0"), the proxy MUST NOT forward the message;),
    CONTENT#2929(   instead, the proxy SHOULD respond with its own communication options.),
    CONTENT#2930(   If the Max-Forwards field-value is an integer greater than zero, the),
    CONTENT#2931(   proxy MUST decrement the field-value when it forwards the request. If),
    CONTENT#2932(   no Max-Forwards field is present in the request, then the forwarded),
    CONTENT#2933(   request MUST NOT include a Max-Forwards field.),
      BREAK#2934,
    SECTION#2935(id=9.3, title=GET),
      BREAK#2936,
    CONTENT#2937(   The GET method means retrieve whatever information (in the form of an),
    CONTENT#2938(   entity) is identified by the Request-URI. If the Request-URI refers),
    CONTENT#2939(   to a data-producing process, it is the produced data which shall be),
    CONTENT#2940(   returned as the entity in the response and not the source text of the),
    CONTENT#2941(   process, unless that text happens to be the output of the process.),
      BREAK#2942,
    CONTENT#2943(   The semantics of the GET method change to a "conditional GET" if the),
    CONTENT#2944(   request message includes an If-Modified-Since, If-Unmodified-Since,),
    CONTENT#2945(   If-Match, If-None-Match, or If-Range header field. A conditional GET),
    CONTENT#2946(   method requests that the entity be transferred only under the),
    CONTENT#2947(   circumstances described by the conditional header field(s). The),
    CONTENT#2948(   conditional GET method is intended to reduce unnecessary network),
    CONTENT#2949(   usage by allowing cached entities to be refreshed without requiring),
    CONTENT#2950(   multiple requests or transferring data already held by the client.),
      BREAK#2951,
    CONTENT#2952(   The semantics of the GET method change to a "partial GET" if the),
    CONTENT#2953(   request message includes a Range header field. A partial GET requests),
    CONTENT#2954(   that only part of the entity be transferred, as described in section),
    CONTENT#2955(   14.35. The partial GET method is intended to reduce unnecessary),
    CONTENT#2956(   network usage by allowing partially-retrieved entities to be),
    CONTENT#2957(   completed without transferring data already held by the client.),
      BREAK#2958,
    CONTENT#2959(   The response to a GET request is cacheable if and only if it meets),
    CONTENT#2960(   the requirements for HTTP caching described in section 13.),
      BREAK#2961,
    CONTENT#2962(   See section 15.1.3 for security considerations when used for forms.),
      BREAK#2963,
      BREAK#2964,
      BREAK#2965,
      BREAK#2966,
      BREAK#2967,
      BREAK#2968,
      BREAK#2970,
      BREAK#2972,
      BREAK#2973,
    SECTION#2974(id=9.4, title=HEAD),
      BREAK#2975,
    CONTENT#2976(   The HEAD method is identical to GET except that the server MUST NOT),
    CONTENT#2977(   return a message-body in the response. The metainformation contained),
    CONTENT#2978(   in the HTTP headers in response to a HEAD request SHOULD be identical),
    CONTENT#2979(   to the information sent in response to a GET request. This method can),
    CONTENT#2980(   be used for obtaining metainformation about the entity implied by the),
    CONTENT#2981(   request without transferring the entity-body itself. This method is),
    CONTENT#2982(   often used for testing hypertext links for validity, accessibility,),
    CONTENT#2983(   and recent modification.),
      BREAK#2984,
    CONTENT#2985(   The response to a HEAD request MAY be cacheable in the sense that the),
    CONTENT#2986(   information contained in the response MAY be used to update a),
    CONTENT#2987(   previously cached entity from that resource. If the new field values),
    CONTENT#2988(   indicate that the cached entity differs from the current entity (as),
    CONTENT#2989(   would be indicated by a change in Content-Length, Content-MD5, ETag),
    CONTENT#2990(   or Last-Modified), then the cache MUST treat the cache entry as),
    CONTENT#2991(   stale.),
      BREAK#2992,
    SECTION#2993(id=9.5, title=POST),
      BREAK#2994,
    CONTENT#2995(   The POST method is used to request that the origin server accept the),
    CONTENT#2996(   entity enclosed in the request as a new subordinate of the resource),
    CONTENT#2997(   identified by the Request-URI in the Request-Line. POST is designed),
    CONTENT#2998(   to allow a uniform method to cover the following functions:),
      BREAK#2999,
    CONTENT#3000(      - Annotation of existing resources;),
      BREAK#3001,
    CONTENT#3002(      - Posting a message to a bulletin board, newsgroup, mailing list,),
    CONTENT#3003(        or similar group of articles;),
      BREAK#3004,
    CONTENT#3005(      - Providing a block of data, such as the result of submitting a),
    CONTENT#3006(        form, to a data-handling process;),
      BREAK#3007,
    CONTENT#3008(      - Extending a database through an append operation.),
      BREAK#3009,
    CONTENT#3010(   The actual function performed by the POST method is determined by the),
    CONTENT#3011(   server and is usually dependent on the Request-URI. The posted entity),
    CONTENT#3012(   is subordinate to that URI in the same way that a file is subordinate),
    CONTENT#3013(   to a directory containing it, a news article is subordinate to a),
    CONTENT#3014(   newsgroup to which it is posted, or a record is subordinate to a),
    CONTENT#3015(   database.),
      BREAK#3016,
    CONTENT#3017(   The action performed by the POST method might not result in a),
    CONTENT#3018(   resource that can be identified by a URI. In this case, either 200),
    CONTENT#3019(   (OK) or 204 (No Content) is the appropriate response status,),
    CONTENT#3020(   depending on whether or not the response includes an entity that),
    CONTENT#3021(   describes the result.),
      BREAK#3022,
      BREAK#3023,
      BREAK#3024,
      BREAK#3026,
      BREAK#3028,
      BREAK#3029,
    CONTENT#3030(   If a resource has been created on the origin server, the response),
    CONTENT#3031(   SHOULD be 201 (Created) and contain an entity which describes the),
    CONTENT#3032(   status of the request and refers to the new resource, and a Location),
    CONTENT#3033(   header (see section 14.30).),
      BREAK#3034,
    CONTENT#3035(   Responses to this method are not cacheable, unless the response),
    CONTENT#3036(   includes appropriate Cache-Control or Expires header fields. However,),
    CONTENT#3037(   the 303 (See Other) response can be used to direct the user agent to),
    CONTENT#3038(   retrieve a cacheable resource.),
      BREAK#3039,
    CONTENT#3040(   POST requests MUST obey the message transmission requirements set out),
    CONTENT#3041(   in section 8.2.),
      BREAK#3042,
    CONTENT#3043(   See section 15.1.3 for security considerations.),
      BREAK#3044,
    SECTION#3045(id=9.6, title=PUT),
      BREAK#3046,
    CONTENT#3047(   The PUT method requests that the enclosed entity be stored under the),
    CONTENT#3048(   supplied Request-URI. If the Request-URI refers to an already),
    CONTENT#3049(   existing resource, the enclosed entity SHOULD be considered as a),
    CONTENT#3050(   modified version of the one residing on the origin server. If the),
    CONTENT#3051(   Request-URI does not point to an existing resource, and that URI is),
    CONTENT#3052(   capable of being defined as a new resource by the requesting user),
    CONTENT#3053(   agent, the origin server can create the resource with that URI. If a),
    CONTENT#3054(   new resource is created, the origin server MUST inform the user agent),
    CONTENT#3055(   via the 201 (Created) response. If an existing resource is modified,),
    CONTENT#3056(   either the 200 (OK) or 204 (No Content) response codes SHOULD be sent),
    CONTENT#3057(   to indicate successful completion of the request. If the resource),
    CONTENT#3058(   could not be created or modified with the Request-URI, an appropriate),
    CONTENT#3059(   error response SHOULD be given that reflects the nature of the),
    CONTENT#3060(   problem. The recipient of the entity MUST NOT ignore any Content-*),
    CONTENT#3061(   (e.g. Content-Range) headers that it does not understand or implement),
    CONTENT#3062(   and MUST return a 501 (Not Implemented) response in such cases.),
      BREAK#3063,
    CONTENT#3064(   If the request passes through a cache and the Request-URI identifies),
    CONTENT#3065(   one or more currently cached entities, those entries SHOULD be),
    CONTENT#3066(   treated as stale. Responses to this method are not cacheable.),
      BREAK#3067,
    CONTENT#3068(   The fundamental difference between the POST and PUT requests is),
    CONTENT#3069(   reflected in the different meaning of the Request-URI. The URI in a),
    CONTENT#3070(   POST request identifies the resource that will handle the enclosed),
    CONTENT#3071(   entity. That resource might be a data-accepting process, a gateway to),
    CONTENT#3072(   some other protocol, or a separate entity that accepts annotations.),
    CONTENT#3073(   In contrast, the URI in a PUT request identifies the entity enclosed),
    CONTENT#3074(   with the request -- the user agent knows what URI is intended and the),
    CONTENT#3075(   server MUST NOT attempt to apply the request to some other resource.),
    CONTENT#3076(   If the server desires that the request be applied to a different URI,),
      BREAK#3077,
      BREAK#3078,
      BREAK#3079,
      BREAK#3080,
      BREAK#3082,
      BREAK#3084,
      BREAK#3085,
    CONTENT#3086(   it MUST send a 301 (Moved Permanently) response; the user agent MAY),
    CONTENT#3087(   then make its own decision regarding whether or not to redirect the),
    CONTENT#3088(   request.),
      BREAK#3089,
    CONTENT#3090(   A single resource MAY be identified by many different URIs. For),
    CONTENT#3091(   example, an article might have a URI for identifying "the current),
    CONTENT#3092(   version" which is separate from the URI identifying each particular),
    CONTENT#3093(   version. In this case, a PUT request on a general URI might result in),
    CONTENT#3094(   several other URIs being defined by the origin server.),
      BREAK#3095,
    CONTENT#3096(   HTTP/1.1 does not define how a PUT method affects the state of an),
    CONTENT#3097(   origin server.),
      BREAK#3098,
    CONTENT#3099(   PUT requests MUST obey the message transmission requirements set out),
    CONTENT#3100(   in section 8.2.),
      BREAK#3101,
    CONTENT#3102(   Unless otherwise specified for a particular entity-header, the),
    CONTENT#3103(   entity-headers in the PUT request SHOULD be applied to the resource),
    CONTENT#3104(   created or modified by the PUT.),
      BREAK#3105,
    SECTION#3106(id=9.7, title=DELETE),
      BREAK#3107,
    CONTENT#3108(   The DELETE method requests that the origin server delete the resource),
    CONTENT#3109(   identified by the Request-URI. This method MAY be overridden by human),
    CONTENT#3110(   intervention (or other means) on the origin server. The client cannot),
    CONTENT#3111(   be guaranteed that the operation has been carried out, even if the),
    CONTENT#3112(   status code returned from the origin server indicates that the action),
    CONTENT#3113(   has been completed successfully. However, the server SHOULD NOT),
    CONTENT#3114(   indicate success unless, at the time the response is given, it),
    CONTENT#3115(   intends to delete the resource or move it to an inaccessible),
    CONTENT#3116(   location.),
      BREAK#3117,
    CONTENT#3118(   A successful response SHOULD be 200 (OK) if the response includes an),
    CONTENT#3119(   entity describing the status, 202 (Accepted) if the action has not),
    CONTENT#3120(   yet been enacted, or 204 (No Content) if the action has been enacted),
    CONTENT#3121(   but the response does not include an entity.),
      BREAK#3122,
    CONTENT#3123(   If the request passes through a cache and the Request-URI identifies),
    CONTENT#3124(   one or more currently cached entities, those entries SHOULD be),
    CONTENT#3125(   treated as stale. Responses to this method are not cacheable.),
      BREAK#3126,
    SECTION#3127(id=9.8, title=TRACE),
      BREAK#3128,
    CONTENT#3129(   The TRACE method is used to invoke a remote, application-layer loop-),
    CONTENT#3130(   back of the request message. The final recipient of the request),
    CONTENT#3131(   SHOULD reflect the message received back to the client as the),
    CONTENT#3132(   entity-body of a 200 (OK) response. The final recipient is either the),
      BREAK#3133,
      BREAK#3134,
      BREAK#3135,
      BREAK#3136,
      BREAK#3138,
      BREAK#3140,
      BREAK#3141,
    CONTENT#3142(   origin server or the first proxy or gateway to receive a Max-Forwards),
    CONTENT#3143(   value of zero (0) in the request (see section 14.31). A TRACE request),
    CONTENT#3144(   MUST NOT include an entity.),
      BREAK#3145,
    CONTENT#3146(   TRACE allows the client to see what is being received at the other),
    CONTENT#3147(   end of the request chain and use that data for testing or diagnostic),
    CONTENT#3148(   information. The value of the Via header field (section 14.45) is of),
    CONTENT#3149(   particular interest, since it acts as a trace of the request chain.),
    CONTENT#3150(   Use of the Max-Forwards header field allows the client to limit the),
    CONTENT#3151(   length of the request chain, which is useful for testing a chain of),
    CONTENT#3152(   proxies forwarding messages in an infinite loop.),
      BREAK#3153,
    CONTENT#3154(   If the request is valid, the response SHOULD contain the entire),
    CONTENT#3155(   request message in the entity-body, with a Content-Type of),
    CONTENT#3156(   "message/http". Responses to this method MUST NOT be cached.),
      BREAK#3157,
    SECTION#3158(id=9.9, title=CONNECT),
      BREAK#3159,
    CONTENT#3160(   This specification reserves the method name CONNECT for use with a),
    CONTENT#3161(   proxy that can dynamically switch to being a tunnel (e.g. SSL),
    CONTENT#3162(   tunneling [44]).),
      BREAK#3163,
    SECTION#3164(id=10, title=Status Code Definitions),
      BREAK#3165,
    CONTENT#3166(   Each Status-Code is described below, including a description of which),
    CONTENT#3167(   method(s) it can follow and any metainformation required in the),
    CONTENT#3168(   response.),
      BREAK#3169,
    SECTION#3170(id=10.1, title=Informational 1xx),
      BREAK#3171,
    CONTENT#3172(   This class of status code indicates a provisional response,),
    CONTENT#3173(   consisting only of the Status-Line and optional headers, and is),
    CONTENT#3174(   terminated by an empty line. There are no required headers for this),
    CONTENT#3175(   class of status code. Since HTTP/1.0 did not define any 1xx status),
    CONTENT#3176(   codes, servers MUST NOT send a 1xx response to an HTTP/1.0 client),
    CONTENT#3177(   except under experimental conditions.),
      BREAK#3178,
    CONTENT#3179(   A client MUST be prepared to accept one or more 1xx status responses),
    CONTENT#3180(   prior to a regular response, even if the client does not expect a 100),
    CONTENT#3181(   (Continue) status message. Unexpected 1xx status responses MAY be),
    CONTENT#3182(   ignored by a user agent.),
      BREAK#3183,
    CONTENT#3184(   Proxies MUST forward 1xx responses, unless the connection between the),
    CONTENT#3185(   proxy and its client has been closed, or unless the proxy itself),
    CONTENT#3186(   requested the generation of the 1xx response. (For example, if a),
      BREAK#3187,
      BREAK#3188,
      BREAK#3189,
      BREAK#3190,
      BREAK#3191,
      BREAK#3192,
      BREAK#3194,
      BREAK#3196,
      BREAK#3197,
    CONTENT#3198(   proxy adds a "Expect: 100-continue" field when it forwards a request,),
    CONTENT#3199(   then it need not forward the corresponding 100 (Continue)),
    CONTENT#3200(   response(s).)),
      BREAK#3201,
    SECTION#3202(id=10.1.1, title=100 Continue),
      BREAK#3203,
    CONTENT#3204(   The client SHOULD continue with its request. This interim response is),
    CONTENT#3205(   used to inform the client that the initial part of the request has),
    CONTENT#3206(   been received and has not yet been rejected by the server. The client),
    CONTENT#3207(   SHOULD continue by sending the remainder of the request or, if the),
    CONTENT#3208(   request has already been completed, ignore this response. The server),
    CONTENT#3209(   MUST send a final response after the request has been completed. See),
    CONTENT#3210(   section 8.2.3 for detailed discussion of the use and handling of this),
    CONTENT#3211(   status code.),
      BREAK#3212,
    SECTION#3213(id=10.1.2, title=101 Switching Protocols),
      BREAK#3214,
    CONTENT#3215(   The server understands and is willing to comply with the client's),
    CONTENT#3216(   request, via the Upgrade message header field (section 14.42), for a),
    CONTENT#3217(   change in the application protocol being used on this connection. The),
    CONTENT#3218(   server will switch protocols to those defined by the response's),
    CONTENT#3219(   Upgrade header field immediately after the empty line which),
    CONTENT#3220(   terminates the 101 response.),
      BREAK#3221,
    CONTENT#3222(   The protocol SHOULD be switched only when it is advantageous to do),
    CONTENT#3223(   so. For example, switching to a newer version of HTTP is advantageous),
    CONTENT#3224(   over older versions, and switching to a real-time, synchronous),
    CONTENT#3225(   protocol might be advantageous when delivering resources that use),
    CONTENT#3226(   such features.),
      BREAK#3227,
    SECTION#3228(id=10.2, title=Successful 2xx),
      BREAK#3229,
    CONTENT#3230(   This class of status code indicates that the client's request was),
    CONTENT#3231(   successfully received, understood, and accepted.),
      BREAK#3232,
    SECTION#3233(id=10.2.1, title=200 OK),
      BREAK#3234,
    CONTENT#3235(   The request has succeeded. The information returned with the response),
    CONTENT#3236(   is dependent on the method used in the request, for example:),
      BREAK#3237,
    CONTENT#3238(   GET    an entity corresponding to the requested resource is sent in),
    CONTENT#3239(          the response;),
      BREAK#3240,
    CONTENT#3241(   HEAD   the entity-header fields corresponding to the requested),
    CONTENT#3242(          resource are sent in the response without any message-body;),
      BREAK#3243,
    CONTENT#3244(   POST   an entity describing or containing the result of the action;),
      BREAK#3245,
      BREAK#3246,
      BREAK#3247,
      BREAK#3248,
      BREAK#3250,
      BREAK#3252,
      BREAK#3253,
    CONTENT#3254(   TRACE  an entity containing the request message as received by the),
    CONTENT#3255(          end server.),
      BREAK#3256,
    SECTION#3257(id=10.2.2, title=201 Created),
      BREAK#3258,
    CONTENT#3259(   The request has been fulfilled and resulted in a new resource being),
    CONTENT#3260(   created. The newly created resource can be referenced by the URI(s)),
    CONTENT#3261(   returned in the entity of the response, with the most specific URI),
    CONTENT#3262(   for the resource given by a Location header field. The response),
    CONTENT#3263(   SHOULD include an entity containing a list of resource),
    CONTENT#3264(   characteristics and location(s) from which the user or user agent can),
    CONTENT#3265(   choose the one most appropriate. The entity format is specified by),
    CONTENT#3266(   the media type given in the Content-Type header field. The origin),
    CONTENT#3267(   server MUST create the resource before returning the 201 status code.),
    CONTENT#3268(   If the action cannot be carried out immediately, the server SHOULD),
    CONTENT#3269(   respond with 202 (Accepted) response instead.),
      BREAK#3270,
    CONTENT#3271(   A 201 response MAY contain an ETag response header field indicating),
    CONTENT#3272(   the current value of the entity tag for the requested variant just),
    CONTENT#3273(   created, see section 14.19.),
      BREAK#3274,
    SECTION#3275(id=10.2.3, title=202 Accepted),
      BREAK#3276,
    CONTENT#3277(   The request has been accepted for processing, but the processing has),
    CONTENT#3278(   not been completed.  The request might or might not eventually be),
    CONTENT#3279(   acted upon, as it might be disallowed when processing actually takes),
    CONTENT#3280(   place. There is no facility for re-sending a status code from an),
    CONTENT#3281(   asynchronous operation such as this.),
      BREAK#3282,
    CONTENT#3283(   The 202 response is intentionally non-committal. Its purpose is to),
    CONTENT#3284(   allow a server to accept a request for some other process (perhaps a),
    CONTENT#3285(   batch-oriented process that is only run once per day) without),
    CONTENT#3286(   requiring that the user agent's connection to the server persist),
    CONTENT#3287(   until the process is completed. The entity returned with this),
    CONTENT#3288(   response SHOULD include an indication of the request's current status),
    CONTENT#3289(   and either a pointer to a status monitor or some estimate of when the),
    CONTENT#3290(   user can expect the request to be fulfilled.),
      BREAK#3291,
    SECTION#3292(id=10.2.4, title=203 Non-Authoritative Information),
      BREAK#3293,
    CONTENT#3294(   The returned metainformation in the entity-header is not the),
    CONTENT#3295(   definitive set as available from the origin server, but is gathered),
    CONTENT#3296(   from a local or a third-party copy. The set presented MAY be a subset),
    CONTENT#3297(   or superset of the original version. For example, including local),
    CONTENT#3298(   annotation information about the resource might result in a superset),
    CONTENT#3299(   of the metainformation known by the origin server. Use of this),
    CONTENT#3300(   response code is not required and is only appropriate when the),
    CONTENT#3301(   response would otherwise be 200 (OK).),
      BREAK#3302,
      BREAK#3303,
      BREAK#3304,
      BREAK#3306,
      BREAK#3308,
      BREAK#3309,
    SECTION#3310(id=10.2.5, title=204 No Content),
      BREAK#3311,
    CONTENT#3312(   The server has fulfilled the request but does not need to return an),
    CONTENT#3313(   entity-body, and might want to return updated metainformation. The),
    CONTENT#3314(   response MAY include new or updated metainformation in the form of),
    CONTENT#3315(   entity-headers, which if present SHOULD be associated with the),
    CONTENT#3316(   requested variant.),
      BREAK#3317,
    CONTENT#3318(   If the client is a user agent, it SHOULD NOT change its document view),
    CONTENT#3319(   from that which caused the request to be sent. This response is),
    CONTENT#3320(   primarily intended to allow input for actions to take place without),
    CONTENT#3321(   causing a change to the user agent's active document view, although),
    CONTENT#3322(   any new or updated metainformation SHOULD be applied to the document),
    CONTENT#3323(   currently in the user agent's active view.),
      BREAK#3324,
    CONTENT#3325(   The 204 response MUST NOT include a message-body, and thus is always),
    CONTENT#3326(   terminated by the first empty line after the header fields.),
      BREAK#3327,
    SECTION#3328(id=10.2.6, title=205 Reset Content),
      BREAK#3329,
    CONTENT#3330(   The server has fulfilled the request and the user agent SHOULD reset),
    CONTENT#3331(   the document view which caused the request to be sent. This response),
    CONTENT#3332(   is primarily intended to allow input for actions to take place via),
    CONTENT#3333(   user input, followed by a clearing of the form in which the input is),
    CONTENT#3334(   given so that the user can easily initiate another input action. The),
    CONTENT#3335(   response MUST NOT include an entity.),
      BREAK#3336,
    SECTION#3337(id=10.2.7, title=206 Partial Content),
      BREAK#3338,
    CONTENT#3339(   The server has fulfilled the partial GET request for the resource.),
    CONTENT#3340(   The request MUST have included a Range header field (section 14.35)),
    CONTENT#3341(   indicating the desired range, and MAY have included an If-Range),
    CONTENT#3342(   header field (section 14.27) to make the request conditional.),
      BREAK#3343,
    CONTENT#3344(   The response MUST include the following header fields:),
      BREAK#3345,
    CONTENT#3346(      - Either a Content-Range header field (section 14.16) indicating),
    CONTENT#3347(        the range included with this response, or a multipart/byteranges),
    CONTENT#3348(        Content-Type including Content-Range fields for each part. If a),
    CONTENT#3349(        Content-Length header field is present in the response, its),
    CONTENT#3350(        value MUST match the actual number of OCTETs transmitted in the),
    CONTENT#3351(        message-body.),
      BREAK#3352,
    CONTENT#3353(      - Date),
      BREAK#3354,
    CONTENT#3355(      - ETag and/or Content-Location, if the header would have been sent),
    CONTENT#3356(        in a 200 response to the same request),
      BREAK#3357,
      BREAK#3358,
      BREAK#3359,
      BREAK#3360,
      BREAK#3362,
      BREAK#3364,
      BREAK#3365,
    CONTENT#3366(      - Expires, Cache-Control, and/or Vary, if the field-value might),
    CONTENT#3367(        differ from that sent in any previous response for the same),
    CONTENT#3368(        variant),
      BREAK#3369,
    CONTENT#3370(   If the 206 response is the result of an If-Range request that used a),
    CONTENT#3371(   strong cache validator (see section 13.3.3), the response SHOULD NOT),
    CONTENT#3372(   include other entity-headers. If the response is the result of an),
    CONTENT#3373(   If-Range request that used a weak validator, the response MUST NOT),
    CONTENT#3374(   include other entity-headers; this prevents inconsistencies between),
    CONTENT#3375(   cached entity-bodies and updated headers. Otherwise, the response),
    CONTENT#3376(   MUST include all of the entity-headers that would have been returned),
    CONTENT#3377(   with a 200 (OK) response to the same request.),
      BREAK#3378,
    CONTENT#3379(   A cache MUST NOT combine a 206 response with other previously cached),
    CONTENT#3380(   content if the ETag or Last-Modified headers do not match exactly,),
    CONTENT#3381(   see 13.5.4.),
      BREAK#3382,
    CONTENT#3383(   A cache that does not support the Range and Content-Range headers),
    CONTENT#3384(   MUST NOT cache 206 (Partial) responses.),
      BREAK#3385,
    SECTION#3386(id=10.3, title=Redirection 3xx),
      BREAK#3387,
    CONTENT#3388(   This class of status code indicates that further action needs to be),
    CONTENT#3389(   taken by the user agent in order to fulfill the request.  The action),
    CONTENT#3390(   required MAY be carried out by the user agent without interaction),
    CONTENT#3391(   with the user if and only if the method used in the second request is),
    CONTENT#3392(   GET or HEAD. A client SHOULD detect infinite redirection loops, since),
    CONTENT#3393(   such loops generate network traffic for each redirection.),
      BREAK#3394,
    CONTENT#3395(      Note: previous versions of this specification recommended a),
    CONTENT#3396(      maximum of five redirections. Content developers should be aware),
    CONTENT#3397(      that there might be clients that implement such a fixed),
    CONTENT#3398(      limitation.),
      BREAK#3399,
    SECTION#3400(id=10.3.1, title=300 Multiple Choices),
      BREAK#3401,
    CONTENT#3402(   The requested resource corresponds to any one of a set of),
    CONTENT#3403(   representations, each with its own specific location, and agent-),
    CONTENT#3404(   driven negotiation information (section 12) is being provided so that),
    CONTENT#3405(   the user (or user agent) can select a preferred representation and),
    CONTENT#3406(   redirect its request to that location.),
      BREAK#3407,
    CONTENT#3408(   Unless it was a HEAD request, the response SHOULD include an entity),
    CONTENT#3409(   containing a list of resource characteristics and location(s) from),
    CONTENT#3410(   which the user or user agent can choose the one most appropriate. The),
    CONTENT#3411(   entity format is specified by the media type given in the Content-),
    CONTENT#3412(   Type header field. Depending upon the format and the capabilities of),
      BREAK#3413,
      BREAK#3414,
      BREAK#3415,
      BREAK#3416,
      BREAK#3418,
      BREAK#3420,
      BREAK#3421,
    CONTENT#3422(   the user agent, selection of the most appropriate choice MAY be),
    CONTENT#3423(   performed automatically. However, this specification does not define),
    CONTENT#3424(   any standard for such automatic selection.),
      BREAK#3425,
    CONTENT#3426(   If the server has a preferred choice of representation, it SHOULD),
    CONTENT#3427(   include the specific URI for that representation in the Location),
    CONTENT#3428(   field; user agents MAY use the Location field value for automatic),
    CONTENT#3429(   redirection. This response is cacheable unless indicated otherwise.),
      BREAK#3430,
    SECTION#3431(id=10.3.2, title=301 Moved Permanently),
      BREAK#3432,
    CONTENT#3433(   The requested resource has been assigned a new permanent URI and any),
    CONTENT#3434(   future references to this resource SHOULD use one of the returned),
    CONTENT#3435(   URIs.  Clients with link editing capabilities ought to automatically),
    CONTENT#3436(   re-link references to the Request-URI to one or more of the new),
    CONTENT#3437(   references returned by the server, where possible. This response is),
    CONTENT#3438(   cacheable unless indicated otherwise.),
      BREAK#3439,
    CONTENT#3440(   The new permanent URI SHOULD be given by the Location field in the),
    CONTENT#3441(   response. Unless the request method was HEAD, the entity of the),
    CONTENT#3442(   response SHOULD contain a short hypertext note with a hyperlink to),
    CONTENT#3443(   the new URI(s).),
      BREAK#3444,
    CONTENT#3445(   If the 301 status code is received in response to a request other),
    CONTENT#3446(   than GET or HEAD, the user agent MUST NOT automatically redirect the),
    CONTENT#3447(   request unless it can be confirmed by the user, since this might),
    CONTENT#3448(   change the conditions under which the request was issued.),
      BREAK#3449,
    CONTENT#3450(      Note: When automatically redirecting a POST request after),
    CONTENT#3451(      receiving a 301 status code, some existing HTTP/1.0 user agents),
    CONTENT#3452(      will erroneously change it into a GET request.),
      BREAK#3453,
    SECTION#3454(id=10.3.3, title=302 Found),
      BREAK#3455,
    CONTENT#3456(   The requested resource resides temporarily under a different URI.),
    CONTENT#3457(   Since the redirection might be altered on occasion, the client SHOULD),
    CONTENT#3458(   continue to use the Request-URI for future requests.  This response),
    CONTENT#3459(   is only cacheable if indicated by a Cache-Control or Expires header),
    CONTENT#3460(   field.),
      BREAK#3461,
    CONTENT#3462(   The temporary URI SHOULD be given by the Location field in the),
    CONTENT#3463(   response. Unless the request method was HEAD, the entity of the),
    CONTENT#3464(   response SHOULD contain a short hypertext note with a hyperlink to),
    CONTENT#3465(   the new URI(s).),
      BREAK#3466,
      BREAK#3467,
      BREAK#3468,
      BREAK#3469,
      BREAK#3470,
      BREAK#3471,
      BREAK#3472,
      BREAK#3474,
      BREAK#3476,
      BREAK#3477,
    CONTENT#3478(   If the 302 status code is received in response to a request other),
    CONTENT#3479(   than GET or HEAD, the user agent MUST NOT automatically redirect the),
    CONTENT#3480(   request unless it can be confirmed by the user, since this might),
    CONTENT#3481(   change the conditions under which the request was issued.),
      BREAK#3482,
    CONTENT#3483(      Note: RFC 1945 and RFC 2068 specify that the client is not allowed),
    CONTENT#3484(      to change the method on the redirected request.  However, most),
    CONTENT#3485(      existing user agent implementations treat 302 as if it were a 303),
    CONTENT#3486(      response, performing a GET on the Location field-value regardless),
    CONTENT#3487(      of the original request method. The status codes 303 and 307 have),
    CONTENT#3488(      been added for servers that wish to make unambiguously clear which),
    CONTENT#3489(      kind of reaction is expected of the client.),
      BREAK#3490,
    SECTION#3491(id=10.3.4, title=303 See Other),
      BREAK#3492,
    CONTENT#3493(   The response to the request can be found under a different URI and),
    CONTENT#3494(   SHOULD be retrieved using a GET method on that resource. This method),
    CONTENT#3495(   exists primarily to allow the output of a POST-activated script to),
    CONTENT#3496(   redirect the user agent to a selected resource. The new URI is not a),
    CONTENT#3497(   substitute reference for the originally requested resource. The 303),
    CONTENT#3498(   response MUST NOT be cached, but the response to the second),
    CONTENT#3499(   (redirected) request might be cacheable.),
      BREAK#3500,
    CONTENT#3501(   The different URI SHOULD be given by the Location field in the),
    CONTENT#3502(   response. Unless the request method was HEAD, the entity of the),
    CONTENT#3503(   response SHOULD contain a short hypertext note with a hyperlink to),
    CONTENT#3504(   the new URI(s).),
      BREAK#3505,
    CONTENT#3506(      Note: Many pre-HTTP/1.1 user agents do not understand the 303),
    CONTENT#3507(      status. When interoperability with such clients is a concern, the),
    CONTENT#3508(      302 status code may be used instead, since most user agents react),
    CONTENT#3509(      to a 302 response as described here for 303.),
      BREAK#3510,
    SECTION#3511(id=10.3.5, title=304 Not Modified),
      BREAK#3512,
    CONTENT#3513(   If the client has performed a conditional GET request and access is),
    CONTENT#3514(   allowed, but the document has not been modified, the server SHOULD),
    CONTENT#3515(   respond with this status code. The 304 response MUST NOT contain a),
    CONTENT#3516(   message-body, and thus is always terminated by the first empty line),
    CONTENT#3517(   after the header fields.),
      BREAK#3518,
    CONTENT#3519(   The response MUST include the following header fields:),
      BREAK#3520,
    CONTENT#3521(      - Date, unless its omission is required by section 14.18.1),
      BREAK#3522,
      BREAK#3523,
      BREAK#3524,
      BREAK#3525,
      BREAK#3526,
      BREAK#3527,
      BREAK#3528,
      BREAK#3530,
      BREAK#3532,
      BREAK#3533,
    CONTENT#3534(   If a clockless origin server obeys these rules, and proxies and),
    CONTENT#3535(   clients add their own Date to any response received without one (as),
    CONTENT#3536(   already specified by [RFC 2068], section 14.19), caches will operate),
    CONTENT#3537(   correctly.),
      BREAK#3538,
    CONTENT#3539(      - ETag and/or Content-Location, if the header would have been sent),
    CONTENT#3540(        in a 200 response to the same request),
      BREAK#3541,
    CONTENT#3542(      - Expires, Cache-Control, and/or Vary, if the field-value might),
    CONTENT#3543(        differ from that sent in any previous response for the same),
    CONTENT#3544(        variant),
      BREAK#3545,
    CONTENT#3546(   If the conditional GET used a strong cache validator (see section),
    CONTENT#3547(   13.3.3), the response SHOULD NOT include other entity-headers.),
    CONTENT#3548(   Otherwise (i.e., the conditional GET used a weak validator), the),
    CONTENT#3549(   response MUST NOT include other entity-headers; this prevents),
    CONTENT#3550(   inconsistencies between cached entity-bodies and updated headers.),
      BREAK#3551,
    CONTENT#3552(   If a 304 response indicates an entity not currently cached, then the),
    CONTENT#3553(   cache MUST disregard the response and repeat the request without the),
    CONTENT#3554(   conditional.),
      BREAK#3555,
    CONTENT#3556(   If a cache uses a received 304 response to update a cache entry, the),
    CONTENT#3557(   cache MUST update the entry to reflect any new field values given in),
    CONTENT#3558(   the response.),
      BREAK#3559,
    SECTION#3560(id=10.3.6, title=305 Use Proxy),
      BREAK#3561,
    CONTENT#3562(   The requested resource MUST be accessed through the proxy given by),
    CONTENT#3563(   the Location field. The Location field gives the URI of the proxy.),
    CONTENT#3564(   The recipient is expected to repeat this single request via the),
    CONTENT#3565(   proxy. 305 responses MUST only be generated by origin servers.),
      BREAK#3566,
    CONTENT#3567(      Note: RFC 2068 was not clear that 305 was intended to redirect a),
    CONTENT#3568(      single request, and to be generated by origin servers only.  Not),
    CONTENT#3569(      observing these limitations has significant security consequences.),
      BREAK#3570,
    SECTION#3571(id=10.3.7, title=306 (Unused)),
      BREAK#3572,
    CONTENT#3573(   The 306 status code was used in a previous version of the),
    CONTENT#3574(   specification, is no longer used, and the code is reserved.),
      BREAK#3575,
      BREAK#3576,
      BREAK#3577,
      BREAK#3578,
      BREAK#3579,
      BREAK#3580,
      BREAK#3581,
      BREAK#3582,
      BREAK#3583,
      BREAK#3584,
      BREAK#3586,
      BREAK#3588,
      BREAK#3589,
    SECTION#3590(id=10.3.8, title=307 Temporary Redirect),
      BREAK#3591,
    CONTENT#3592(   The requested resource resides temporarily under a different URI.),
    CONTENT#3593(   Since the redirection MAY be altered on occasion, the client SHOULD),
    CONTENT#3594(   continue to use the Request-URI for future requests.  This response),
    CONTENT#3595(   is only cacheable if indicated by a Cache-Control or Expires header),
    CONTENT#3596(   field.),
      BREAK#3597,
    CONTENT#3598(   The temporary URI SHOULD be given by the Location field in the),
    CONTENT#3599(   response. Unless the request method was HEAD, the entity of the),
    CONTENT#3600(   response SHOULD contain a short hypertext note with a hyperlink to),
    CONTENT#3601(   the new URI(s) , since many pre-HTTP/1.1 user agents do not),
    CONTENT#3602(   understand the 307 status. Therefore, the note SHOULD contain the),
    CONTENT#3603(   information necessary for a user to repeat the original request on),
    CONTENT#3604(   the new URI.),
      BREAK#3605,
    CONTENT#3606(   If the 307 status code is received in response to a request other),
    CONTENT#3607(   than GET or HEAD, the user agent MUST NOT automatically redirect the),
    CONTENT#3608(   request unless it can be confirmed by the user, since this might),
    CONTENT#3609(   change the conditions under which the request was issued.),
      BREAK#3610,
    SECTION#3611(id=10.4, title=Client Error 4xx),
      BREAK#3612,
    CONTENT#3613(   The 4xx class of status code is intended for cases in which the),
    CONTENT#3614(   client seems to have erred. Except when responding to a HEAD request,),
    CONTENT#3615(   the server SHOULD include an entity containing an explanation of the),
    CONTENT#3616(   error situation, and whether it is a temporary or permanent),
    CONTENT#3617(   condition. These status codes are applicable to any request method.),
    CONTENT#3618(   User agents SHOULD display any included entity to the user.),
      BREAK#3619,
    CONTENT#3620(   If the client is sending data, a server implementation using TCP),
    CONTENT#3621(   SHOULD be careful to ensure that the client acknowledges receipt of),
    CONTENT#3622(   the packet(s) containing the response, before the server closes the),
    CONTENT#3623(   input connection. If the client continues sending data to the server),
    CONTENT#3624(   after the close, the server's TCP stack will send a reset packet to),
    CONTENT#3625(   the client, which may erase the client's unacknowledged input buffers),
    CONTENT#3626(   before they can be read and interpreted by the HTTP application.),
      BREAK#3627,
    SECTION#3628(id=10.4.1, title=400 Bad Request),
      BREAK#3629,
    CONTENT#3630(   The request could not be understood by the server due to malformed),
    CONTENT#3631(   syntax. The client SHOULD NOT repeat the request without),
    CONTENT#3632(   modifications.),
      BREAK#3633,
      BREAK#3634,
      BREAK#3635,
      BREAK#3636,
      BREAK#3637,
      BREAK#3638,
      BREAK#3639,
      BREAK#3640,
      BREAK#3642,
      BREAK#3644,
      BREAK#3645,
    SECTION#3646(id=10.4.2, title=401 Unauthorized),
      BREAK#3647,
    CONTENT#3648(   The request requires user authentication. The response MUST include a),
    CONTENT#3649(   WWW-Authenticate header field (section 14.47) containing a challenge),
    CONTENT#3650(   applicable to the requested resource. The client MAY repeat the),
    CONTENT#3651(   request with a suitable Authorization header field (section 14.8). If),
    CONTENT#3652(   the request already included Authorization credentials, then the 401),
    CONTENT#3653(   response indicates that authorization has been refused for those),
    CONTENT#3654(   credentials. If the 401 response contains the same challenge as the),
    CONTENT#3655(   prior response, and the user agent has already attempted),
    CONTENT#3656(   authentication at least once, then the user SHOULD be presented the),
    CONTENT#3657(   entity that was given in the response, since that entity might),
    CONTENT#3658(   include relevant diagnostic information. HTTP access authentication),
    CONTENT#3659(   is explained in "HTTP Authentication: Basic and Digest Access),
    CONTENT#3660(   Authentication" [43].),
      BREAK#3661,
    SECTION#3662(id=10.4.3, title=402 Payment Required),
      BREAK#3663,
    CONTENT#3664(   This code is reserved for future use.),
      BREAK#3665,
    SECTION#3666(id=10.4.4, title=403 Forbidden),
      BREAK#3667,
    CONTENT#3668(   The server understood the request, but is refusing to fulfill it.),
    CONTENT#3669(   Authorization will not help and the request SHOULD NOT be repeated.),
    CONTENT#3670(   If the request method was not HEAD and the server wishes to make),
    CONTENT#3671(   public why the request has not been fulfilled, it SHOULD describe the),
    CONTENT#3672(   reason for the refusal in the entity.  If the server does not wish to),
    CONTENT#3673(   make this information available to the client, the status code 404),
    CONTENT#3674(   (Not Found) can be used instead.),
      BREAK#3675,
    SECTION#3676(id=10.4.5, title=404 Not Found),
      BREAK#3677,
    CONTENT#3678(   The server has not found anything matching the Request-URI. No),
    CONTENT#3679(   indication is given of whether the condition is temporary or),
    CONTENT#3680(   permanent. The 410 (Gone) status code SHOULD be used if the server),
    CONTENT#3681(   knows, through some internally configurable mechanism, that an old),
    CONTENT#3682(   resource is permanently unavailable and has no forwarding address.),
    CONTENT#3683(   This status code is commonly used when the server does not wish to),
    CONTENT#3684(   reveal exactly why the request has been refused, or when no other),
    CONTENT#3685(   response is applicable.),
      BREAK#3686,
    SECTION#3687(id=10.4.6, title=405 Method Not Allowed),
      BREAK#3688,
    CONTENT#3689(   The method specified in the Request-Line is not allowed for the),
    CONTENT#3690(   resource identified by the Request-URI. The response MUST include an),
    CONTENT#3691(   Allow header containing a list of valid methods for the requested),
    CONTENT#3692(   resource.),
      BREAK#3693,
      BREAK#3694,
      BREAK#3695,
      BREAK#3696,
      BREAK#3698,
      BREAK#3700,
      BREAK#3701,
    SECTION#3702(id=10.4.7, title=406 Not Acceptable),
      BREAK#3703,
    CONTENT#3704(   The resource identified by the request is only capable of generating),
    CONTENT#3705(   response entities which have content characteristics not acceptable),
    CONTENT#3706(   according to the accept headers sent in the request.),
      BREAK#3707,
    CONTENT#3708(   Unless it was a HEAD request, the response SHOULD include an entity),
    CONTENT#3709(   containing a list of available entity characteristics and location(s)),
    CONTENT#3710(   from which the user or user agent can choose the one most),
    CONTENT#3711(   appropriate. The entity format is specified by the media type given),
    CONTENT#3712(   in the Content-Type header field. Depending upon the format and the),
    CONTENT#3713(   capabilities of the user agent, selection of the most appropriate),
    CONTENT#3714(   choice MAY be performed automatically. However, this specification),
    CONTENT#3715(   does not define any standard for such automatic selection.),
      BREAK#3716,
    CONTENT#3717(      Note: HTTP/1.1 servers are allowed to return responses which are),
    CONTENT#3718(      not acceptable according to the accept headers sent in the),
    CONTENT#3719(      request. In some cases, this may even be preferable to sending a),
    CONTENT#3720(      406 response. User agents are encouraged to inspect the headers of),
    CONTENT#3721(      an incoming response to determine if it is acceptable.),
      BREAK#3722,
    CONTENT#3723(   If the response could be unacceptable, a user agent SHOULD),
    CONTENT#3724(   temporarily stop receipt of more data and query the user for a),
    CONTENT#3725(   decision on further actions.),
      BREAK#3726,
    SECTION#3727(id=10.4.8, title=407 Proxy Authentication Required),
      BREAK#3728,
    CONTENT#3729(   This code is similar to 401 (Unauthorized), but indicates that the),
    CONTENT#3730(   client must first authenticate itself with the proxy. The proxy MUST),
    CONTENT#3731(   return a Proxy-Authenticate header field (section 14.33) containing a),
    CONTENT#3732(   challenge applicable to the proxy for the requested resource. The),
    CONTENT#3733(   client MAY repeat the request with a suitable Proxy-Authorization),
    CONTENT#3734(   header field (section 14.34). HTTP access authentication is explained),
    CONTENT#3735(   in "HTTP Authentication: Basic and Digest Access Authentication"),
    CONTENT#3736(   [43].),
      BREAK#3737,
    SECTION#3738(id=10.4.9, title=408 Request Timeout),
      BREAK#3739,
    CONTENT#3740(   The client did not produce a request within the time that the server),
    CONTENT#3741(   was prepared to wait. The client MAY repeat the request without),
    CONTENT#3742(   modifications at any later time.),
      BREAK#3743,
    SECTION#3744(id=10.4.10, title=409 Conflict),
      BREAK#3745,
    CONTENT#3746(   The request could not be completed due to a conflict with the current),
    CONTENT#3747(   state of the resource. This code is only allowed in situations where),
    CONTENT#3748(   it is expected that the user might be able to resolve the conflict),
    CONTENT#3749(   and resubmit the request. The response body SHOULD include enough),
      BREAK#3750,
      BREAK#3751,
      BREAK#3752,
      BREAK#3754,
      BREAK#3756,
      BREAK#3757,
    CONTENT#3758(   information for the user to recognize the source of the conflict.),
    CONTENT#3759(   Ideally, the response entity would include enough information for the),
    CONTENT#3760(   user or user agent to fix the problem; however, that might not be),
    CONTENT#3761(   possible and is not required.),
      BREAK#3762,
    CONTENT#3763(   Conflicts are most likely to occur in response to a PUT request. For),
    CONTENT#3764(   example, if versioning were being used and the entity being PUT),
    CONTENT#3765(   included changes to a resource which conflict with those made by an),
    CONTENT#3766(   earlier (third-party) request, the server might use the 409 response),
    CONTENT#3767(   to indicate that it can't complete the request. In this case, the),
    CONTENT#3768(   response entity would likely contain a list of the differences),
    CONTENT#3769(   between the two versions in a format defined by the response),
    CONTENT#3770(   Content-Type.),
      BREAK#3771,
    SECTION#3772(id=10.4.11, title=410 Gone),
      BREAK#3773,
    CONTENT#3774(   The requested resource is no longer available at the server and no),
    CONTENT#3775(   forwarding address is known. This condition is expected to be),
    CONTENT#3776(   considered permanent. Clients with link editing capabilities SHOULD),
    CONTENT#3777(   delete references to the Request-URI after user approval. If the),
    CONTENT#3778(   server does not know, or has no facility to determine, whether or not),
    CONTENT#3779(   the condition is permanent, the status code 404 (Not Found) SHOULD be),
    CONTENT#3780(   used instead. This response is cacheable unless indicated otherwise.),
      BREAK#3781,
    CONTENT#3782(   The 410 response is primarily intended to assist the task of web),
    CONTENT#3783(   maintenance by notifying the recipient that the resource is),
    CONTENT#3784(   intentionally unavailable and that the server owners desire that),
    CONTENT#3785(   remote links to that resource be removed. Such an event is common for),
    CONTENT#3786(   limited-time, promotional services and for resources belonging to),
    CONTENT#3787(   individuals no longer working at the server's site. It is not),
    CONTENT#3788(   necessary to mark all permanently unavailable resources as "gone" or),
    CONTENT#3789(   to keep the mark for any length of time -- that is left to the),
    CONTENT#3790(   discretion of the server owner.),
      BREAK#3791,
    SECTION#3792(id=10.4.12, title=411 Length Required),
      BREAK#3793,
    CONTENT#3794(   The server refuses to accept the request without a defined Content-),
    CONTENT#3795(   Length. The client MAY repeat the request if it adds a valid),
    CONTENT#3796(   Content-Length header field containing the length of the message-body),
    CONTENT#3797(   in the request message.),
      BREAK#3798,
    SECTION#3799(id=10.4.13, title=412 Precondition Failed),
      BREAK#3800,
    CONTENT#3801(   The precondition given in one or more of the request-header fields),
    CONTENT#3802(   evaluated to false when it was tested on the server. This response),
    CONTENT#3803(   code allows the client to place preconditions on the current resource),
    CONTENT#3804(   metainformation (header field data) and thus prevent the requested),
    CONTENT#3805(   method from being applied to a resource other than the one intended.),
      BREAK#3806,
      BREAK#3807,
      BREAK#3808,
      BREAK#3810,
      BREAK#3812,
      BREAK#3813,
    SECTION#3814(id=10.4.14, title=413 Request Entity Too Large),
      BREAK#3815,
    CONTENT#3816(   The server is refusing to process a request because the request),
    CONTENT#3817(   entity is larger than the server is willing or able to process. The),
    CONTENT#3818(   server MAY close the connection to prevent the client from continuing),
    CONTENT#3819(   the request.),
      BREAK#3820,
    CONTENT#3821(   If the condition is temporary, the server SHOULD include a Retry-),
    CONTENT#3822(   After header field to indicate that it is temporary and after what),
    CONTENT#3823(   time the client MAY try again.),
      BREAK#3824,
    SECTION#3825(id=10.4.15, title=414 Request-URI Too Long),
      BREAK#3826,
    CONTENT#3827(   The server is refusing to service the request because the Request-URI),
    CONTENT#3828(   is longer than the server is willing to interpret. This rare),
    CONTENT#3829(   condition is only likely to occur when a client has improperly),
    CONTENT#3830(   converted a POST request to a GET request with long query),
    CONTENT#3831(   information, when the client has descended into a URI "black hole" of),
    CONTENT#3832(   redirection (e.g., a redirected URI prefix that points to a suffix of),
    CONTENT#3833(   itself), or when the server is under attack by a client attempting to),
    CONTENT#3834(   exploit security holes present in some servers using fixed-length),
    CONTENT#3835(   buffers for reading or manipulating the Request-URI.),
      BREAK#3836,
    SECTION#3837(id=10.4.16, title=415 Unsupported Media Type),
      BREAK#3838,
    CONTENT#3839(   The server is refusing to service the request because the entity of),
    CONTENT#3840(   the request is in a format not supported by the requested resource),
    CONTENT#3841(   for the requested method.),
      BREAK#3842,
    SECTION#3843(id=10.4.17, title=416 Requested Range Not Satisfiable),
      BREAK#3844,
    CONTENT#3845(   A server SHOULD return a response with this status code if a request),
    CONTENT#3846(   included a Range request-header field (section 14.35), and none of),
    CONTENT#3847(   the range-specifier values in this field overlap the current extent),
    CONTENT#3848(   of the selected resource, and the request did not include an If-Range),
    CONTENT#3849(   request-header field. (For byte-ranges, this means that the first-),
    CONTENT#3850(   byte-pos of all of the byte-range-spec values were greater than the),
    CONTENT#3851(   current length of the selected resource.)),
      BREAK#3852,
    CONTENT#3853(   When this status code is returned for a byte-range request, the),
    CONTENT#3854(   response SHOULD include a Content-Range entity-header field),
    CONTENT#3855(   specifying the current length of the selected resource (see section),
    CONTENT#3856(   14.16). This response MUST NOT use the multipart/byteranges content-),
    CONTENT#3857(   type.),
      BREAK#3858,
      BREAK#3859,
      BREAK#3860,
      BREAK#3861,
      BREAK#3862,
      BREAK#3863,
      BREAK#3864,
      BREAK#3866,
      BREAK#3868,
      BREAK#3869,
    SECTION#3870(id=10.4.18, title=417 Expectation Failed),
      BREAK#3871,
    CONTENT#3872(   The expectation given in an Expect request-header field (see section),
    CONTENT#3873(   14.20) could not be met by this server, or, if the server is a proxy,),
    CONTENT#3874(   the server has unambiguous evidence that the request could not be met),
    CONTENT#3875(   by the next-hop server.),
      BREAK#3876,
    SECTION#3877(id=10.5, title=Server Error 5xx),
      BREAK#3878,
    CONTENT#3879(   Response status codes beginning with the digit "5" indicate cases in),
    CONTENT#3880(   which the server is aware that it has erred or is incapable of),
    CONTENT#3881(   performing the request. Except when responding to a HEAD request, the),
    CONTENT#3882(   server SHOULD include an entity containing an explanation of the),
    CONTENT#3883(   error situation, and whether it is a temporary or permanent),
    CONTENT#3884(   condition. User agents SHOULD display any included entity to the),
    CONTENT#3885(   user. These response codes are applicable to any request method.),
      BREAK#3886,
    SECTION#3887(id=10.5.1, title=500 Internal Server Error),
      BREAK#3888,
    CONTENT#3889(   The server encountered an unexpected condition which prevented it),
    CONTENT#3890(   from fulfilling the request.),
      BREAK#3891,
    SECTION#3892(id=10.5.2, title=501 Not Implemented),
      BREAK#3893,
    CONTENT#3894(   The server does not support the functionality required to fulfill the),
    CONTENT#3895(   request. This is the appropriate response when the server does not),
    CONTENT#3896(   recognize the request method and is not capable of supporting it for),
    CONTENT#3897(   any resource.),
      BREAK#3898,
    SECTION#3899(id=10.5.3, title=502 Bad Gateway),
      BREAK#3900,
    CONTENT#3901(   The server, while acting as a gateway or proxy, received an invalid),
    CONTENT#3902(   response from the upstream server it accessed in attempting to),
    CONTENT#3903(   fulfill the request.),
      BREAK#3904,
    SECTION#3905(id=10.5.4, title=503 Service Unavailable),
      BREAK#3906,
    CONTENT#3907(   The server is currently unable to handle the request due to a),
    CONTENT#3908(   temporary overloading or maintenance of the server. The implication),
    CONTENT#3909(   is that this is a temporary condition which will be alleviated after),
    CONTENT#3910(   some delay. If known, the length of the delay MAY be indicated in a),
    CONTENT#3911(   Retry-After header. If no Retry-After is given, the client SHOULD),
    CONTENT#3912(   handle the response as it would for a 500 response.),
      BREAK#3913,
    CONTENT#3914(      Note: The existence of the 503 status code does not imply that a),
    CONTENT#3915(      server must use it when becoming overloaded. Some servers may wish),
    CONTENT#3916(      to simply refuse the connection.),
      BREAK#3917,
      BREAK#3918,
      BREAK#3919,
      BREAK#3920,
      BREAK#3922,
      BREAK#3924,
      BREAK#3925,
    SECTION#3926(id=10.5.5, title=504 Gateway Timeout),
      BREAK#3927,
    CONTENT#3928(   The server, while acting as a gateway or proxy, did not receive a),
    CONTENT#3929(   timely response from the upstream server specified by the URI (e.g.),
    CONTENT#3930(   HTTP, FTP, LDAP) or some other auxiliary server (e.g. DNS) it needed),
    CONTENT#3931(   to access in attempting to complete the request.),
      BREAK#3932,
    CONTENT#3933(      Note: Note to implementors: some deployed proxies are known to),
    CONTENT#3934(      return 400 or 500 when DNS lookups time out.),
      BREAK#3935,
    SECTION#3936(id=10.5.6, title=505 HTTP Version Not Supported),
      BREAK#3937,
    CONTENT#3938(   The server does not support, or refuses to support, the HTTP protocol),
    CONTENT#3939(   version that was used in the request message. The server is),
    CONTENT#3940(   indicating that it is unable or unwilling to complete the request),
    CONTENT#3941(   using the same major version as the client, as described in section),
    CONTENT#3942(   3.1, other than with this error message. The response SHOULD contain),
    CONTENT#3943(   an entity describing why that version is not supported and what other),
    CONTENT#3944(   protocols are supported by that server.),
      BREAK#3945,
    SECTION#3946(id=11, title=Access Authentication),
      BREAK#3947,
    CONTENT#3948(   HTTP provides several OPTIONAL challenge-response authentication),
    CONTENT#3949(   mechanisms which can be used by a server to challenge a client),
    CONTENT#3950(   request and by a client to provide authentication information. The),
    CONTENT#3951(   general framework for access authentication, and the specification of),
    CONTENT#3952(   "basic" and "digest" authentication, are specified in "HTTP),
    CONTENT#3953(   Authentication: Basic and Digest Access Authentication" [43]. This),
    CONTENT#3954(   specification adopts the definitions of "challenge" and "credentials"),
    CONTENT#3955(   from that specification.),
      BREAK#3956,
    SECTION#3957(id=12, title=Content Negotiation),
      BREAK#3958,
    CONTENT#3959(   Most HTTP responses include an entity which contains information for),
    CONTENT#3960(   interpretation by a human user. Naturally, it is desirable to supply),
    CONTENT#3961(   the user with the "best available" entity corresponding to the),
    CONTENT#3962(   request. Unfortunately for servers and caches, not all users have the),
    CONTENT#3963(   same preferences for what is "best," and not all user agents are),
    CONTENT#3964(   equally capable of rendering all entity types. For that reason, HTTP),
    CONTENT#3965(   has provisions for several mechanisms for "content negotiation" --),
    CONTENT#3966(   the process of selecting the best representation for a given response),
    CONTENT#3967(   when there are multiple representations available.),
      BREAK#3968,
    CONTENT#3969(      Note: This is not called "format negotiation" because the),
    CONTENT#3970(      alternate representations may be of the same media type, but use),
    CONTENT#3971(      different capabilities of that type, be in different languages,),
    CONTENT#3972(      etc.),
      BREAK#3973,
      BREAK#3974,
      BREAK#3975,
      BREAK#3976,
      BREAK#3978,
      BREAK#3980,
      BREAK#3981,
    CONTENT#3982(   Any response containing an entity-body MAY be subject to negotiation,),
    CONTENT#3983(   including error responses.),
      BREAK#3984,
    CONTENT#3985(   There are two kinds of content negotiation which are possible in),
    CONTENT#3986(   HTTP: server-driven and agent-driven negotiation. These two kinds of),
    CONTENT#3987(   negotiation are orthogonal and thus may be used separately or in),
    CONTENT#3988(   combination. One method of combination, referred to as transparent),
    CONTENT#3989(   negotiation, occurs when a cache uses the agent-driven negotiation),
    CONTENT#3990(   information provided by the origin server in order to provide),
    CONTENT#3991(   server-driven negotiation for subsequent requests.),
      BREAK#3992,
    SECTION#3993(id=12.1, title=Server-driven Negotiation),
      BREAK#3994,
    CONTENT#3995(   If the selection of the best representation for a response is made by),
    CONTENT#3996(   an algorithm located at the server, it is called server-driven),
    CONTENT#3997(   negotiation. Selection is based on the available representations of),
    CONTENT#3998(   the response (the dimensions over which it can vary; e.g. language,),
    CONTENT#3999(   content-coding, etc.) and the contents of particular header fields in),
    CONTENT#4000(   the request message or on other information pertaining to the request),
    CONTENT#4001(   (such as the network address of the client).),
      BREAK#4002,
    CONTENT#4003(   Server-driven negotiation is advantageous when the algorithm for),
    CONTENT#4004(   selecting from among the available representations is difficult to),
    CONTENT#4005(   describe to the user agent, or when the server desires to send its),
    CONTENT#4006(   "best guess" to the client along with the first response (hoping to),
    CONTENT#4007(   avoid the round-trip delay of a subsequent request if the "best),
    CONTENT#4008(   guess" is good enough for the user). In order to improve the server's),
    CONTENT#4009(   guess, the user agent MAY include request header fields (Accept,),
    CONTENT#4010(   Accept-Language, Accept-Encoding, etc.) which describe its),
    CONTENT#4011(   preferences for such a response.),
      BREAK#4012,
    CONTENT#4013(   Server-driven negotiation has disadvantages:),
      BREAK#4014,
    CONTENT#4015(      1. It is impossible for the server to accurately determine what),
    CONTENT#4016(         might be "best" for any given user, since that would require),
    CONTENT#4017(         complete knowledge of both the capabilities of the user agent),
    CONTENT#4018(         and the intended use for the response (e.g., does the user want),
    CONTENT#4019(         to view it on screen or print it on paper?).),
      BREAK#4020,
    CONTENT#4021(      2. Having the user agent describe its capabilities in every),
    CONTENT#4022(         request can be both very inefficient (given that only a small),
    CONTENT#4023(         percentage of responses have multiple representations) and a),
    CONTENT#4024(         potential violation of the user's privacy.),
      BREAK#4025,
    CONTENT#4026(      3. It complicates the implementation of an origin server and the),
    CONTENT#4027(         algorithms for generating responses to a request.),
      BREAK#4028,
      BREAK#4029,
      BREAK#4030,
      BREAK#4031,
      BREAK#4032,
      BREAK#4034,
      BREAK#4036,
      BREAK#4037,
    CONTENT#4038(      4. It may limit a public cache's ability to use the same response),
    CONTENT#4039(         for multiple user's requests.),
      BREAK#4040,
    CONTENT#4041(   HTTP/1.1 includes the following request-header fields for enabling),
    CONTENT#4042(   server-driven negotiation through description of user agent),
    CONTENT#4043(   capabilities and user preferences: Accept (section 14.1), Accept-),
    CONTENT#4044(   Charset (section 14.2), Accept-Encoding (section 14.3), Accept-),
    CONTENT#4045(   Language (section 14.4), and User-Agent (section 14.43). However, an),
    CONTENT#4046(   origin server is not limited to these dimensions and MAY vary the),
    CONTENT#4047(   response based on any aspect of the request, including information),
    CONTENT#4048(   outside the request-header fields or within extension header fields),
    CONTENT#4049(   not defined by this specification.),
      BREAK#4050,
    CONTENT#4051(   The Vary  header field can be used to express the parameters the),
    CONTENT#4052(   server uses to select a representation that is subject to server-),
    CONTENT#4053(   driven negotiation. See section 13.6 for use of the Vary header field),
    CONTENT#4054(   by caches and section 14.44 for use of the Vary header field by),
    CONTENT#4055(   servers.),
      BREAK#4056,
    SECTION#4057(id=12.2, title=Agent-driven Negotiation),
      BREAK#4058,
    CONTENT#4059(   With agent-driven negotiation, selection of the best representation),
    CONTENT#4060(   for a response is performed by the user agent after receiving an),
    CONTENT#4061(   initial response from the origin server. Selection is based on a list),
    CONTENT#4062(   of the available representations of the response included within the),
    CONTENT#4063(   header fields or entity-body of the initial response, with each),
    CONTENT#4064(   representation identified by its own URI. Selection from among the),
    CONTENT#4065(   representations may be performed automatically (if the user agent is),
    CONTENT#4066(   capable of doing so) or manually by the user selecting from a),
    CONTENT#4067(   generated (possibly hypertext) menu.),
      BREAK#4068,
    CONTENT#4069(   Agent-driven negotiation is advantageous when the response would vary),
    CONTENT#4070(   over commonly-used dimensions (such as type, language, or encoding),),
    CONTENT#4071(   when the origin server is unable to determine a user agent's),
    CONTENT#4072(   capabilities from examining the request, and generally when public),
    CONTENT#4073(   caches are used to distribute server load and reduce network usage.),
      BREAK#4074,
    CONTENT#4075(   Agent-driven negotiation suffers from the disadvantage of needing a),
    CONTENT#4076(   second request to obtain the best alternate representation. This),
    CONTENT#4077(   second request is only efficient when caching is used. In addition,),
    CONTENT#4078(   this specification does not define any mechanism for supporting),
    CONTENT#4079(   automatic selection, though it also does not prevent any such),
    CONTENT#4080(   mechanism from being developed as an extension and used within),
    CONTENT#4081(   HTTP/1.1.),
      BREAK#4082,
      BREAK#4083,
      BREAK#4084,
      BREAK#4085,
      BREAK#4086,
      BREAK#4087,
      BREAK#4088,
      BREAK#4090,
      BREAK#4092,
      BREAK#4093,
    CONTENT#4094(   HTTP/1.1 defines the 300 (Multiple Choices) and 406 (Not Acceptable)),
    CONTENT#4095(   status codes for enabling agent-driven negotiation when the server is),
    CONTENT#4096(   unwilling or unable to provide a varying response using server-driven),
    CONTENT#4097(   negotiation.),
      BREAK#4098,
    SECTION#4099(id=12.3, title=Transparent Negotiation),
      BREAK#4100,
    CONTENT#4101(   Transparent negotiation is a combination of both server-driven and),
    CONTENT#4102(   agent-driven negotiation. When a cache is supplied with a form of the),
    CONTENT#4103(   list of available representations of the response (as in agent-driven),
    CONTENT#4104(   negotiation) and the dimensions of variance are completely understood),
    CONTENT#4105(   by the cache, then the cache becomes capable of performing server-),
    CONTENT#4106(   driven negotiation on behalf of the origin server for subsequent),
    CONTENT#4107(   requests on that resource.),
      BREAK#4108,
    CONTENT#4109(   Transparent negotiation has the advantage of distributing the),
    CONTENT#4110(   negotiation work that would otherwise be required of the origin),
    CONTENT#4111(   server and also removing the second request delay of agent-driven),
    CONTENT#4112(   negotiation when the cache is able to correctly guess the right),
    CONTENT#4113(   response.),
      BREAK#4114,
    CONTENT#4115(   This specification does not define any mechanism for transparent),
    CONTENT#4116(   negotiation, though it also does not prevent any such mechanism from),
    CONTENT#4117(   being developed as an extension that could be used within HTTP/1.1.),
      BREAK#4118,
    SECTION#4119(id=13, title=Caching in HTTP),
      BREAK#4120,
    CONTENT#4121(   HTTP is typically used for distributed information systems, where),
    CONTENT#4122(   performance can be improved by the use of response caches. The),
    CONTENT#4123(   HTTP/1.1 protocol includes a number of elements intended to make),
    CONTENT#4124(   caching work as well as possible. Because these elements are),
    CONTENT#4125(   inextricable from other aspects of the protocol, and because they),
    CONTENT#4126(   interact with each other, it is useful to describe the basic caching),
    CONTENT#4127(   design of HTTP separately from the detailed descriptions of methods,),
    CONTENT#4128(   headers, response codes, etc.),
      BREAK#4129,
    CONTENT#4130(   Caching would be useless if it did not significantly improve),
    CONTENT#4131(   performance. The goal of caching in HTTP/1.1 is to eliminate the need),
    CONTENT#4132(   to send requests in many cases, and to eliminate the need to send),
    CONTENT#4133(   full responses in many other cases. The former reduces the number of),
    CONTENT#4134(   network round-trips required for many operations; we use an),
    CONTENT#4135(   "expiration" mechanism for this purpose (see section 13.2). The),
    CONTENT#4136(   latter reduces network bandwidth requirements; we use a "validation"),
    CONTENT#4137(   mechanism for this purpose (see section 13.3).),
      BREAK#4138,
    CONTENT#4139(   Requirements for performance, availability, and disconnected),
    CONTENT#4140(   operation require us to be able to relax the goal of semantic),
    CONTENT#4141(   transparency. The HTTP/1.1 protocol allows origin servers, caches,),
      BREAK#4142,
      BREAK#4143,
      BREAK#4144,
      BREAK#4146,
      BREAK#4148,
      BREAK#4149,
    CONTENT#4150(   and clients to explicitly reduce transparency when necessary.),
    CONTENT#4151(   However, because non-transparent operation may confuse non-expert),
    CONTENT#4152(   users, and might be incompatible with certain server applications),
    CONTENT#4153(   (such as those for ordering merchandise), the protocol requires that),
    CONTENT#4154(   transparency be relaxed),
      BREAK#4155,
    CONTENT#4156(      - only by an explicit protocol-level request when relaxed by),
    CONTENT#4157(        client or origin server),
      BREAK#4158,
    CONTENT#4159(      - only with an explicit warning to the end user when relaxed by),
    CONTENT#4160(        cache or client),
      BREAK#4161,
    CONTENT#4162(   Therefore, the HTTP/1.1 protocol provides these important elements:),
      BREAK#4163,
    CONTENT#4164(      1. Protocol features that provide full semantic transparency when),
    CONTENT#4165(         this is required by all parties.),
      BREAK#4166,
    CONTENT#4167(      2. Protocol features that allow an origin server or user agent to),
    CONTENT#4168(         explicitly request and control non-transparent operation.),
      BREAK#4169,
    CONTENT#4170(      3. Protocol features that allow a cache to attach warnings to),
    CONTENT#4171(         responses that do not preserve the requested approximation of),
    CONTENT#4172(         semantic transparency.),
      BREAK#4173,
    CONTENT#4174(   A basic principle is that it must be possible for the clients to),
    CONTENT#4175(   detect any potential relaxation of semantic transparency.),
      BREAK#4176,
    CONTENT#4177(      Note: The server, cache, or client implementor might be faced with),
    CONTENT#4178(      design decisions not explicitly discussed in this specification.),
    CONTENT#4179(      If a decision might affect semantic transparency, the implementor),
    CONTENT#4180(      ought to err on the side of maintaining transparency unless a),
    CONTENT#4181(      careful and complete analysis shows significant benefits in),
    CONTENT#4182(      breaking transparency.),
      BREAK#4183,
    SECTION#4184(id=13.1.1, title=Cache Correctness),
      BREAK#4185,
    CONTENT#4186(   A correct cache MUST respond to a request with the most up-to-date),
    CONTENT#4187(   response held by the cache that is appropriate to the request (see),
    CONTENT#4188(   sections 13.2.5, 13.2.6, and 13.12) which meets one of the following),
    CONTENT#4189(   conditions:),
      BREAK#4190,
    CONTENT#4191(      1. It has been checked for equivalence with what the origin server),
    CONTENT#4192(         would have returned by revalidating the response with the),
    CONTENT#4193(         origin server (section 13.3);),
      BREAK#4194,
      BREAK#4195,
      BREAK#4196,
      BREAK#4197,
      BREAK#4198,
      BREAK#4199,
      BREAK#4200,
      BREAK#4202,
      BREAK#4204,
      BREAK#4205,
    CONTENT#4206(      2. It is "fresh enough" (see section 13.2). In the default case,),
    CONTENT#4207(         this means it meets the least restrictive freshness requirement),
    CONTENT#4208(         of the client, origin server, and cache (see section 14.9); if),
    CONTENT#4209(         the origin server so specifies, it is the freshness requirement),
    CONTENT#4210(         of the origin server alone.),
      BREAK#4211,
    CONTENT#4212(         If a stored response is not "fresh enough" by the most),
    CONTENT#4213(         restrictive freshness requirement of both the client and the),
    CONTENT#4214(         origin server, in carefully considered circumstances the cache),
    CONTENT#4215(         MAY still return the response with the appropriate Warning),
    CONTENT#4216(         header (see section 13.1.5 and 14.46), unless such a response),
    CONTENT#4217(         is prohibited (e.g., by a "no-store" cache-directive, or by a),
    CONTENT#4218(         "no-cache" cache-request-directive; see section 14.9).),
      BREAK#4219,
    CONTENT#4220(      3. It is an appropriate 304 (Not Modified), 305 (Proxy Redirect),),
    CONTENT#4221(         or error (4xx or 5xx) response message.),
      BREAK#4222,
    CONTENT#4223(   If the cache can not communicate with the origin server, then a),
    CONTENT#4224(   correct cache SHOULD respond as above if the response can be),
    CONTENT#4225(   correctly served from the cache; if not it MUST return an error or),
    CONTENT#4226(   warning indicating that there was a communication failure.),
      BREAK#4227,
    CONTENT#4228(   If a cache receives a response (either an entire response, or a 304),
    CONTENT#4229(   (Not Modified) response) that it would normally forward to the),
    CONTENT#4230(   requesting client, and the received response is no longer fresh, the),
    CONTENT#4231(   cache SHOULD forward it to the requesting client without adding a new),
    CONTENT#4232(   Warning (but without removing any existing Warning headers). A cache),
    CONTENT#4233(   SHOULD NOT attempt to revalidate a response simply because that),
    CONTENT#4234(   response became stale in transit; this might lead to an infinite),
    CONTENT#4235(   loop. A user agent that receives a stale response without a Warning),
    CONTENT#4236(   MAY display a warning indication to the user.),
      BREAK#4237,
    SECTION#4238(id=13.1.2, title=Warnings),
      BREAK#4239,
    CONTENT#4240(   Whenever a cache returns a response that is neither first-hand nor),
    CONTENT#4241(   "fresh enough" (in the sense of condition 2 in section 13.1.1), it),
    CONTENT#4242(   MUST attach a warning to that effect, using a Warning general-header.),
    CONTENT#4243(   The Warning header and the currently defined warnings are described),
    CONTENT#4244(   in section 14.46. The warning allows clients to take appropriate),
    CONTENT#4245(   action.),
      BREAK#4246,
    CONTENT#4247(   Warnings MAY be used for other purposes, both cache-related and),
    CONTENT#4248(   otherwise. The use of a warning, rather than an error status code,),
    CONTENT#4249(   distinguish these responses from true failures.),
      BREAK#4250,
    CONTENT#4251(   Warnings are assigned three digit warn-codes. The first digit),
    CONTENT#4252(   indicates whether the Warning MUST or MUST NOT be deleted from a),
    CONTENT#4253(   stored cache entry after a successful revalidation:),
      BREAK#4254,
      BREAK#4255,
      BREAK#4256,
      BREAK#4258,
      BREAK#4260,
      BREAK#4261,
    CONTENT#4262(   1xx  Warnings that describe the freshness or revalidation status of),
    CONTENT#4263(     the response, and so MUST be deleted after a successful),
    CONTENT#4264(     revalidation. 1XX warn-codes MAY be generated by a cache only when),
    CONTENT#4265(     validating a cached entry. It MUST NOT be generated by clients.),
      BREAK#4266,
    CONTENT#4267(   2xx  Warnings that describe some aspect of the entity body or entity),
    CONTENT#4268(     headers that is not rectified by a revalidation (for example, a),
    CONTENT#4269(     lossy compression of the entity bodies) and which MUST NOT be),
    CONTENT#4270(     deleted after a successful revalidation.),
      BREAK#4271,
    CONTENT#4272(   See section 14.46 for the definitions of the codes themselves.),
      BREAK#4273,
    CONTENT#4274(   HTTP/1.0 caches will cache all Warnings in responses, without),
    CONTENT#4275(   deleting the ones in the first category. Warnings in responses that),
    CONTENT#4276(   are passed to HTTP/1.0 caches carry an extra warning-date field,),
    CONTENT#4277(   which prevents a future HTTP/1.1 recipient from believing an),
    CONTENT#4278(   erroneously cached Warning.),
      BREAK#4279,
    CONTENT#4280(   Warnings also carry a warning text. The text MAY be in any),
    CONTENT#4281(   appropriate natural language (perhaps based on the client's Accept),
    CONTENT#4282(   headers), and include an OPTIONAL indication of what character set is),
    CONTENT#4283(   used.),
      BREAK#4284,
    CONTENT#4285(   Multiple warnings MAY be attached to a response (either by the origin),
    CONTENT#4286(   server or by a cache), including multiple warnings with the same code),
    CONTENT#4287(   number. For example, a server might provide the same warning with),
    CONTENT#4288(   texts in both English and Basque.),
      BREAK#4289,
    CONTENT#4290(   When multiple warnings are attached to a response, it might not be),
    CONTENT#4291(   practical or reasonable to display all of them to the user. This),
    CONTENT#4292(   version of HTTP does not specify strict priority rules for deciding),
    CONTENT#4293(   which warnings to display and in what order, but does suggest some),
    CONTENT#4294(   heuristics.),
      BREAK#4295,
    SECTION#4296(id=13.1.3, title=Cache-control Mechanisms),
      BREAK#4297,
    CONTENT#4298(   The basic cache mechanisms in HTTP/1.1 (server-specified expiration),
    CONTENT#4299(   times and validators) are implicit directives to caches. In some),
    CONTENT#4300(   cases, a server or client might need to provide explicit directives),
    CONTENT#4301(   to the HTTP caches. We use the Cache-Control header for this purpose.),
      BREAK#4302,
    CONTENT#4303(   The Cache-Control header allows a client or server to transmit a),
    CONTENT#4304(   variety of directives in either requests or responses. These),
    CONTENT#4305(   directives typically override the default caching algorithms. As a),
    CONTENT#4306(   general rule, if there is any apparent conflict between header),
    CONTENT#4307(   values, the most restrictive interpretation is applied (that is, the),
    CONTENT#4308(   one that is most likely to preserve semantic transparency). However,),
      BREAK#4309,
      BREAK#4310,
      BREAK#4311,
      BREAK#4312,
      BREAK#4314,
      BREAK#4316,
      BREAK#4317,
    CONTENT#4318(   in some cases, cache-control directives are explicitly specified as),
    CONTENT#4319(   weakening the approximation of semantic transparency (for example,),
    CONTENT#4320(   "max-stale" or "public").),
      BREAK#4321,
    CONTENT#4322(   The cache-control directives are described in detail in section 14.9.),
      BREAK#4323,
    SECTION#4324(id=13.1.4, title=Explicit User Agent Warnings),
      BREAK#4325,
    CONTENT#4326(   Many user agents make it possible for users to override the basic),
    CONTENT#4327(   caching mechanisms. For example, the user agent might allow the user),
    CONTENT#4328(   to specify that cached entities (even explicitly stale ones) are),
    CONTENT#4329(   never validated. Or the user agent might habitually add "Cache-),
    CONTENT#4330(   Control: max-stale=3600" to every request. The user agent SHOULD NOT),
    CONTENT#4331(   default to either non-transparent behavior, or behavior that results),
    CONTENT#4332(   in abnormally ineffective caching, but MAY be explicitly configured),
    CONTENT#4333(   to do so by an explicit action of the user.),
      BREAK#4334,
    CONTENT#4335(   If the user has overridden the basic caching mechanisms, the user),
    CONTENT#4336(   agent SHOULD explicitly indicate to the user whenever this results in),
    CONTENT#4337(   the display of information that might not meet the server's),
    CONTENT#4338(   transparency requirements (in particular, if the displayed entity is),
    CONTENT#4339(   known to be stale). Since the protocol normally allows the user agent),
    CONTENT#4340(   to determine if responses are stale or not, this indication need only),
    CONTENT#4341(   be displayed when this actually happens. The indication need not be a),
    CONTENT#4342(   dialog box; it could be an icon (for example, a picture of a rotting),
    CONTENT#4343(   fish) or some other indicator.),
      BREAK#4344,
    CONTENT#4345(   If the user has overridden the caching mechanisms in a way that would),
    CONTENT#4346(   abnormally reduce the effectiveness of caches, the user agent SHOULD),
    CONTENT#4347(   continually indicate this state to the user (for example, by a),
    CONTENT#4348(   display of a picture of currency in flames) so that the user does not),
    CONTENT#4349(   inadvertently consume excess resources or suffer from excessive),
    CONTENT#4350(   latency.),
      BREAK#4351,
    SECTION#4352(id=13.1.5, title=Exceptions to the Rules and Warnings),
      BREAK#4353,
    CONTENT#4354(   In some cases, the operator of a cache MAY choose to configure it to),
    CONTENT#4355(   return stale responses even when not requested by clients. This),
    CONTENT#4356(   decision ought not be made lightly, but may be necessary for reasons),
    CONTENT#4357(   of availability or performance, especially when the cache is poorly),
    CONTENT#4358(   connected to the origin server. Whenever a cache returns a stale),
    CONTENT#4359(   response, it MUST mark it as such (using a Warning header) enabling),
    CONTENT#4360(   the client software to alert the user that there might be a potential),
    CONTENT#4361(   problem.),
      BREAK#4362,
      BREAK#4363,
      BREAK#4364,
      BREAK#4365,
      BREAK#4366,
      BREAK#4367,
      BREAK#4368,
      BREAK#4370,
      BREAK#4372,
      BREAK#4373,
    CONTENT#4374(   It also allows the user agent to take steps to obtain a first-hand or),
    CONTENT#4375(   fresh response. For this reason, a cache SHOULD NOT return a stale),
    CONTENT#4376(   response if the client explicitly requests a first-hand or fresh one,),
    CONTENT#4377(   unless it is impossible to comply for technical or policy reasons.),
      BREAK#4378,
    SECTION#4379(id=13.1.6, title=Client-controlled Behavior),
      BREAK#4380,
    CONTENT#4381(   While the origin server (and to a lesser extent, intermediate caches,),
    CONTENT#4382(   by their contribution to the age of a response) are the primary),
    CONTENT#4383(   source of expiration information, in some cases the client might need),
    CONTENT#4384(   to control a cache's decision about whether to return a cached),
    CONTENT#4385(   response without validating it. Clients do this using several),
    CONTENT#4386(   directives of the Cache-Control header.),
      BREAK#4387,
    CONTENT#4388(   A client's request MAY specify the maximum age it is willing to),
    CONTENT#4389(   accept of an unvalidated response; specifying a value of zero forces),
    CONTENT#4390(   the cache(s) to revalidate all responses. A client MAY also specify),
    CONTENT#4391(   the minimum time remaining before a response expires. Both of these),
    CONTENT#4392(   options increase constraints on the behavior of caches, and so cannot),
    CONTENT#4393(   further relax the cache's approximation of semantic transparency.),
      BREAK#4394,
    CONTENT#4395(   A client MAY also specify that it will accept stale responses, up to),
    CONTENT#4396(   some maximum amount of staleness. This loosens the constraints on the),
    CONTENT#4397(   caches, and so might violate the origin server's specified),
    CONTENT#4398(   constraints on semantic transparency, but might be necessary to),
    CONTENT#4399(   support disconnected operation, or high availability in the face of),
    CONTENT#4400(   poor connectivity.),
      BREAK#4401,
    SECTION#4402(id=13.2, title=Expiration Model),
      BREAK#4403,
    SECTION#4404(id=13.2.1, title=Server-Specified Expiration),
      BREAK#4405,
    CONTENT#4406(   HTTP caching works best when caches can entirely avoid making),
    CONTENT#4407(   requests to the origin server. The primary mechanism for avoiding),
    CONTENT#4408(   requests is for an origin server to provide an explicit expiration),
    CONTENT#4409(   time in the future, indicating that a response MAY be used to satisfy),
    CONTENT#4410(   subsequent requests. In other words, a cache can return a fresh),
    CONTENT#4411(   response without first contacting the server.),
      BREAK#4412,
    CONTENT#4413(   Our expectation is that servers will assign future explicit),
    CONTENT#4414(   expiration times to responses in the belief that the entity is not),
    CONTENT#4415(   likely to change, in a semantically significant way, before the),
    CONTENT#4416(   expiration time is reached. This normally preserves semantic),
    CONTENT#4417(   transparency, as long as the server's expiration times are carefully),
    CONTENT#4418(   chosen.),
      BREAK#4419,
      BREAK#4420,
      BREAK#4421,
      BREAK#4422,
      BREAK#4423,
      BREAK#4424,
      BREAK#4426,
      BREAK#4428,
      BREAK#4429,
    CONTENT#4430(   The expiration mechanism applies only to responses taken from a cache),
    CONTENT#4431(   and not to first-hand responses forwarded immediately to the),
    CONTENT#4432(   requesting client.),
      BREAK#4433,
    CONTENT#4434(   If an origin server wishes to force a semantically transparent cache),
    CONTENT#4435(   to validate every request, it MAY assign an explicit expiration time),
    CONTENT#4436(   in the past. This means that the response is always stale, and so the),
    CONTENT#4437(   cache SHOULD validate it before using it for subsequent requests. See),
    CONTENT#4438(   section 14.9.4 for a more restrictive way to force revalidation.),
      BREAK#4439,
    CONTENT#4440(   If an origin server wishes to force any HTTP/1.1 cache, no matter how),
    CONTENT#4441(   it is configured, to validate every request, it SHOULD use the "must-),
    CONTENT#4442(   revalidate" cache-control directive (see section 14.9).),
      BREAK#4443,
    CONTENT#4444(   Servers specify explicit expiration times using either the Expires),
    CONTENT#4445(   header, or the max-age directive of the Cache-Control header.),
      BREAK#4446,
    CONTENT#4447(   An expiration time cannot be used to force a user agent to refresh),
    CONTENT#4448(   its display or reload a resource; its semantics apply only to caching),
    CONTENT#4449(   mechanisms, and such mechanisms need only check a resource's),
    CONTENT#4450(   expiration status when a new request for that resource is initiated.),
    CONTENT#4451(   See section 13.13 for an explanation of the difference between caches),
    CONTENT#4452(   and history mechanisms.),
      BREAK#4453,
    SECTION#4454(id=13.2.2, title=Heuristic Expiration),
      BREAK#4455,
    CONTENT#4456(   Since origin servers do not always provide explicit expiration times,),
    CONTENT#4457(   HTTP caches typically assign heuristic expiration times, employing),
    CONTENT#4458(   algorithms that use other header values (such as the Last-Modified),
    CONTENT#4459(   time) to estimate a plausible expiration time. The HTTP/1.1),
    CONTENT#4460(   specification does not provide specific algorithms, but does impose),
    CONTENT#4461(   worst-case constraints on their results. Since heuristic expiration),
    CONTENT#4462(   times might compromise semantic transparency, they ought to used),
    CONTENT#4463(   cautiously, and we encourage origin servers to provide explicit),
    CONTENT#4464(   expiration times as much as possible.),
      BREAK#4465,
    SECTION#4466(id=13.2.3, title=Age Calculations),
      BREAK#4467,
    CONTENT#4468(   In order to know if a cached entry is fresh, a cache needs to know if),
    CONTENT#4469(   its age exceeds its freshness lifetime. We discuss how to calculate),
    CONTENT#4470(   the latter in section 13.2.4; this section describes how to calculate),
    CONTENT#4471(   the age of a response or cache entry.),
      BREAK#4472,
    CONTENT#4473(   In this discussion, we use the term "now" to mean "the current value),
    CONTENT#4474(   of the clock at the host performing the calculation." Hosts that use),
    CONTENT#4475(   HTTP, but especially hosts running origin servers and caches, SHOULD),
    CONTENT#4476(   use NTP [28] or some similar protocol to synchronize their clocks to),
    CONTENT#4477(   a globally accurate time standard.),
      BREAK#4478,
      BREAK#4479,
      BREAK#4480,
      BREAK#4482,
      BREAK#4484,
      BREAK#4485,
    CONTENT#4486(   HTTP/1.1 requires origin servers to send a Date header, if possible,),
    CONTENT#4487(   with every response, giving the time at which the response was),
    CONTENT#4488(   generated (see section 14.18). We use the term "date_value" to denote),
    CONTENT#4489(   the value of the Date header, in a form appropriate for arithmetic),
    CONTENT#4490(   operations.),
      BREAK#4491,
    CONTENT#4492(   HTTP/1.1 uses the Age response-header to convey the estimated age of),
    CONTENT#4493(   the response message when obtained from a cache. The Age field value),
    CONTENT#4494(   is the cache's estimate of the amount of time since the response was),
    CONTENT#4495(   generated or revalidated by the origin server.),
      BREAK#4496,
    CONTENT#4497(   In essence, the Age value is the sum of the time that the response),
    CONTENT#4498(   has been resident in each of the caches along the path from the),
    CONTENT#4499(   origin server, plus the amount of time it has been in transit along),
    CONTENT#4500(   network paths.),
      BREAK#4501,
    CONTENT#4502(   We use the term "age_value" to denote the value of the Age header, in),
    CONTENT#4503(   a form appropriate for arithmetic operations.),
      BREAK#4504,
    CONTENT#4505(   A response's age can be calculated in two entirely independent ways:),
      BREAK#4506,
    CONTENT#4507(      1. now minus date_value, if the local clock is reasonably well),
    CONTENT#4508(         synchronized to the origin server's clock. If the result is),
    CONTENT#4509(         negative, the result is replaced by zero.),
      BREAK#4510,
    CONTENT#4511(      2. age_value, if all of the caches along the response path),
    CONTENT#4512(         implement HTTP/1.1.),
      BREAK#4513,
    CONTENT#4514(   Given that we have two independent ways to compute the age of a),
    CONTENT#4515(   response when it is received, we can combine these as),
      BREAK#4516,
    CONTENT#4517(       corrected_received_age = max(now - date_value, age_value)),
      BREAK#4518,
    CONTENT#4519(   and as long as we have either nearly synchronized clocks or all-),
    CONTENT#4520(   HTTP/1.1 paths, one gets a reliable (conservative) result.),
      BREAK#4521,
    CONTENT#4522(   Because of network-imposed delays, some significant interval might),
    CONTENT#4523(   pass between the time that a server generates a response and the time),
    CONTENT#4524(   it is received at the next outbound cache or client. If uncorrected,),
    CONTENT#4525(   this delay could result in improperly low ages.),
      BREAK#4526,
    CONTENT#4527(   Because the request that resulted in the returned Age value must have),
    CONTENT#4528(   been initiated prior to that Age value's generation, we can correct),
    CONTENT#4529(   for delays imposed by the network by recording the time at which the),
    CONTENT#4530(   request was initiated. Then, when an Age value is received, it MUST),
    CONTENT#4531(   be interpreted relative to the time the request was initiated, not),
      BREAK#4532,
      BREAK#4533,
      BREAK#4534,
      BREAK#4535,
      BREAK#4536,
      BREAK#4538,
      BREAK#4540,
      BREAK#4541,
    CONTENT#4542(   the time that the response was received. This algorithm results in),
    CONTENT#4543(   conservative behavior no matter how much delay is experienced. So, we),
    CONTENT#4544(   compute:),
      BREAK#4545,
    CONTENT#4546(      corrected_initial_age = corrected_received_age),
    CONTENT#4547(                            + (now - request_time)),
      BREAK#4548,
    CONTENT#4549(   where "request_time" is the time (according to the local clock) when),
    CONTENT#4550(   the request that elicited this response was sent.),
      BREAK#4551,
    CONTENT#4552(   Summary of age calculation algorithm, when a cache receives a),
    CONTENT#4553(   response:),
      BREAK#4554,
    CONTENT#4555(      /*),
    CONTENT#4556(       * age_value),
    CONTENT#4557(       *      is the value of Age: header received by the cache with),
    CONTENT#4558(       *              this response.),
    CONTENT#4559(       * date_value),
    CONTENT#4560(       *      is the value of the origin server's Date: header),
    CONTENT#4561(       * request_time),
    CONTENT#4562(       *      is the (local) time when the cache made the request),
    CONTENT#4563(       *              that resulted in this cached response),
    CONTENT#4564(       * response_time),
    CONTENT#4565(       *      is the (local) time when the cache received the),
    CONTENT#4566(       *              response),
    CONTENT#4567(       * now),
    CONTENT#4568(       *      is the current (local) time),
    CONTENT#4569(       */),
      BREAK#4570,
    CONTENT#4571(      apparent_age = max(0, response_time - date_value);),
    CONTENT#4572(      corrected_received_age = max(apparent_age, age_value);),
    CONTENT#4573(      response_delay = response_time - request_time;),
    CONTENT#4574(      corrected_initial_age = corrected_received_age + response_delay;),
    CONTENT#4575(      resident_time = now - response_time;),
    CONTENT#4576(      current_age   = corrected_initial_age + resident_time;),
      BREAK#4577,
    CONTENT#4578(   The current_age of a cache entry is calculated by adding the amount),
    CONTENT#4579(   of time (in seconds) since the cache entry was last validated by the),
    CONTENT#4580(   origin server to the corrected_initial_age. When a response is),
    CONTENT#4581(   generated from a cache entry, the cache MUST include a single Age),
    CONTENT#4582(   header field in the response with a value equal to the cache entry's),
    CONTENT#4583(   current_age.),
      BREAK#4584,
    CONTENT#4585(   The presence of an Age header field in a response implies that a),
    CONTENT#4586(   response is not first-hand. However, the converse is not true, since),
    CONTENT#4587(   the lack of an Age header field in a response does not imply that the),
      BREAK#4588,
      BREAK#4589,
      BREAK#4590,
      BREAK#4591,
      BREAK#4592,
      BREAK#4594,
      BREAK#4596,
      BREAK#4597,
    CONTENT#4598(   response is first-hand unless all caches along the request path are),
    CONTENT#4599(   compliant with HTTP/1.1 (i.e., older HTTP caches did not implement),
    CONTENT#4600(   the Age header field).),
      BREAK#4601,
    SECTION#4602(id=13.2.4, title=Expiration Calculations),
      BREAK#4603,
    CONTENT#4604(   In order to decide whether a response is fresh or stale, we need to),
    CONTENT#4605(   compare its freshness lifetime to its age. The age is calculated as),
    CONTENT#4606(   described in section 13.2.3; this section describes how to calculate),
    CONTENT#4607(   the freshness lifetime, and to determine if a response has expired.),
    CONTENT#4608(   In the discussion below, the values can be represented in any form),
    CONTENT#4609(   appropriate for arithmetic operations.),
      BREAK#4610,
    CONTENT#4611(   We use the term "expires_value" to denote the value of the Expires),
    CONTENT#4612(   header. We use the term "max_age_value" to denote an appropriate),
    CONTENT#4613(   value of the number of seconds carried by the "max-age" directive of),
    CONTENT#4614(   the Cache-Control header in a response (see section 14.9.3).),
      BREAK#4615,
    CONTENT#4616(   The max-age directive takes priority over Expires, so if max-age is),
    CONTENT#4617(   present in a response, the calculation is simply:),
      BREAK#4618,
    CONTENT#4619(      freshness_lifetime = max_age_value),
      BREAK#4620,
    CONTENT#4621(   Otherwise, if Expires is present in the response, the calculation is:),
      BREAK#4622,
    CONTENT#4623(      freshness_lifetime = expires_value - date_value),
      BREAK#4624,
    CONTENT#4625(   Note that neither of these calculations is vulnerable to clock skew,),
    CONTENT#4626(   since all of the information comes from the origin server.),
      BREAK#4627,
    CONTENT#4628(   If none of Expires, Cache-Control: max-age, or Cache-Control: s-),
    CONTENT#4629(   maxage (see section 14.9.3) appears in the response, and the response),
    CONTENT#4630(   does not include other restrictions on caching, the cache MAY compute),
    CONTENT#4631(   a freshness lifetime using a heuristic. The cache MUST attach Warning),
    CONTENT#4632(   113 to any response whose age is more than 24 hours if such warning),
    CONTENT#4633(   has not already been added.),
      BREAK#4634,
    CONTENT#4635(   Also, if the response does have a Last-Modified time, the heuristic),
    CONTENT#4636(   expiration value SHOULD be no more than some fraction of the interval),
    CONTENT#4637(   since that time. A typical setting of this fraction might be 10%.),
      BREAK#4638,
    CONTENT#4639(   The calculation to determine if a response has expired is quite),
    CONTENT#4640(   simple:),
      BREAK#4641,
    CONTENT#4642(      response_is_fresh = (freshness_lifetime > current_age)),
      BREAK#4643,
      BREAK#4644,
      BREAK#4645,
      BREAK#4646,
      BREAK#4647,
      BREAK#4648,
      BREAK#4650,
      BREAK#4652,
      BREAK#4653,
    SECTION#4654(id=13.2.5, title=Disambiguating Expiration Values),
      BREAK#4655,
    CONTENT#4656(   Because expiration values are assigned optimistically, it is possible),
    CONTENT#4657(   for two caches to contain fresh values for the same resource that are),
    CONTENT#4658(   different.),
      BREAK#4659,
    CONTENT#4660(   If a client performing a retrieval receives a non-first-hand response),
    CONTENT#4661(   for a request that was already fresh in its own cache, and the Date),
    CONTENT#4662(   header in its existing cache entry is newer than the Date on the new),
    CONTENT#4663(   response, then the client MAY ignore the response. If so, it MAY),
    CONTENT#4664(   retry the request with a "Cache-Control: max-age=0" directive (see),
    CONTENT#4665(   section 14.9), to force a check with the origin server.),
      BREAK#4666,
    CONTENT#4667(   If a cache has two fresh responses for the same representation with),
    CONTENT#4668(   different validators, it MUST use the one with the more recent Date),
    CONTENT#4669(   header. This situation might arise because the cache is pooling),
    CONTENT#4670(   responses from other caches, or because a client has asked for a),
    CONTENT#4671(   reload or a revalidation of an apparently fresh cache entry.),
      BREAK#4672,
    SECTION#4673(id=13.2.6, title=Disambiguating Multiple Responses),
      BREAK#4674,
    CONTENT#4675(   Because a client might be receiving responses via multiple paths, so),
    CONTENT#4676(   that some responses flow through one set of caches and other),
    CONTENT#4677(   responses flow through a different set of caches, a client might),
    CONTENT#4678(   receive responses in an order different from that in which the origin),
    CONTENT#4679(   server sent them. We would like the client to use the most recently),
    CONTENT#4680(   generated response, even if older responses are still apparently),
    CONTENT#4681(   fresh.),
      BREAK#4682,
    CONTENT#4683(   Neither the entity tag nor the expiration value can impose an),
    CONTENT#4684(   ordering on responses, since it is possible that a later response),
    CONTENT#4685(   intentionally carries an earlier expiration time. The Date values are),
    CONTENT#4686(   ordered to a granularity of one second.),
      BREAK#4687,
    CONTENT#4688(   When a client tries to revalidate a cache entry, and the response it),
    CONTENT#4689(   receives contains a Date header that appears to be older than the one),
    CONTENT#4690(   for the existing entry, then the client SHOULD repeat the request),
    CONTENT#4691(   unconditionally, and include),
      BREAK#4692,
    CONTENT#4693(       Cache-Control: max-age=0),
      BREAK#4694,
    CONTENT#4695(   to force any intermediate caches to validate their copies directly),
    CONTENT#4696(   with the origin server, or),
      BREAK#4697,
    CONTENT#4698(       Cache-Control: no-cache),
      BREAK#4699,
    CONTENT#4700(   to force any intermediate caches to obtain a new copy from the origin),
    CONTENT#4701(   server.),
      BREAK#4702,
      BREAK#4703,
      BREAK#4704,
      BREAK#4706,
      BREAK#4708,
      BREAK#4709,
    CONTENT#4710(   If the Date values are equal, then the client MAY use either response),
    CONTENT#4711(   (or MAY, if it is being extremely prudent, request a new response).),
    CONTENT#4712(   Servers MUST NOT depend on clients being able to choose),
    CONTENT#4713(   deterministically between responses generated during the same second,),
    CONTENT#4714(   if their expiration times overlap.),
      BREAK#4715,
    SECTION#4716(id=13.3, title=Validation Model),
      BREAK#4717,
    CONTENT#4718(   When a cache has a stale entry that it would like to use as a),
    CONTENT#4719(   response to a client's request, it first has to check with the origin),
    CONTENT#4720(   server (or possibly an intermediate cache with a fresh response) to),
    CONTENT#4721(   see if its cached entry is still usable. We call this "validating"),
    CONTENT#4722(   the cache entry. Since we do not want to have to pay the overhead of),
    CONTENT#4723(   retransmitting the full response if the cached entry is good, and we),
    CONTENT#4724(   do not want to pay the overhead of an extra round trip if the cached),
    CONTENT#4725(   entry is invalid, the HTTP/1.1 protocol supports the use of),
    CONTENT#4726(   conditional methods.),
      BREAK#4727,
    CONTENT#4728(   The key protocol features for supporting conditional methods are),
    CONTENT#4729(   those concerned with "cache validators." When an origin server),
    CONTENT#4730(   generates a full response, it attaches some sort of validator to it,),
    CONTENT#4731(   which is kept with the cache entry. When a client (user agent or),
    CONTENT#4732(   proxy cache) makes a conditional request for a resource for which it),
    CONTENT#4733(   has a cache entry, it includes the associated validator in the),
    CONTENT#4734(   request.),
      BREAK#4735,
    CONTENT#4736(   The server then checks that validator against the current validator),
    CONTENT#4737(   for the entity, and, if they match (see section 13.3.3), it responds),
    CONTENT#4738(   with a special status code (usually, 304 (Not Modified)) and no),
    CONTENT#4739(   entity-body. Otherwise, it returns a full response (including),
    CONTENT#4740(   entity-body). Thus, we avoid transmitting the full response if the),
    CONTENT#4741(   validator matches, and we avoid an extra round trip if it does not),
    CONTENT#4742(   match.),
      BREAK#4743,
    CONTENT#4744(   In HTTP/1.1, a conditional request looks exactly the same as a normal),
    CONTENT#4745(   request for the same resource, except that it carries a special),
    CONTENT#4746(   header (which includes the validator) that implicitly turns the),
    CONTENT#4747(   method (usually, GET) into a conditional.),
      BREAK#4748,
    CONTENT#4749(   The protocol includes both positive and negative senses of cache-),
    CONTENT#4750(   validating conditions. That is, it is possible to request either that),
    CONTENT#4751(   a method be performed if and only if a validator matches or if and),
    CONTENT#4752(   only if no validators match.),
      BREAK#4753,
      BREAK#4754,
      BREAK#4755,
      BREAK#4756,
      BREAK#4757,
      BREAK#4758,
      BREAK#4759,
      BREAK#4760,
      BREAK#4762,
      BREAK#4764,
      BREAK#4765,
    CONTENT#4766(      Note: a response that lacks a validator may still be cached, and),
    CONTENT#4767(      served from cache until it expires, unless this is explicitly),
    CONTENT#4768(      prohibited by a cache-control directive. However, a cache cannot),
    CONTENT#4769(      do a conditional retrieval if it does not have a validator for the),
    CONTENT#4770(      entity, which means it will not be refreshable after it expires.),
      BREAK#4771,
    SECTION#4772(id=13.3.1, title=Last-Modified Dates),
      BREAK#4773,
    CONTENT#4774(   The Last-Modified entity-header field value is often used as a cache),
    CONTENT#4775(   validator. In simple terms, a cache entry is considered to be valid),
    CONTENT#4776(   if the entity has not been modified since the Last-Modified value.),
      BREAK#4777,
    SECTION#4778(id=13.3.2, title=Entity Tag Cache Validators),
      BREAK#4779,
    CONTENT#4780(   The ETag response-header field value, an entity tag, provides for an),
    CONTENT#4781(   "opaque" cache validator. This might allow more reliable validation),
    CONTENT#4782(   in situations where it is inconvenient to store modification dates,),
    CONTENT#4783(   where the one-second resolution of HTTP date values is not),
    CONTENT#4784(   sufficient, or where the origin server wishes to avoid certain),
    CONTENT#4785(   paradoxes that might arise from the use of modification dates.),
      BREAK#4786,
    CONTENT#4787(   Entity Tags are described in section 3.11. The headers used with),
    CONTENT#4788(   entity tags are described in sections 14.19, 14.24, 14.26 and 14.44.),
      BREAK#4789,
    SECTION#4790(id=13.3.3, title=Weak and Strong Validators),
      BREAK#4791,
    CONTENT#4792(   Since both origin servers and caches will compare two validators to),
    CONTENT#4793(   decide if they represent the same or different entities, one normally),
    CONTENT#4794(   would expect that if the entity (the entity-body or any entity-),
    CONTENT#4795(   headers) changes in any way, then the associated validator would),
    CONTENT#4796(   change as well. If this is true, then we call this validator a),
    CONTENT#4797(   "strong validator."),
      BREAK#4798,
    CONTENT#4799(   However, there might be cases when a server prefers to change the),
    CONTENT#4800(   validator only on semantically significant changes, and not when),
    CONTENT#4801(   insignificant aspects of the entity change. A validator that does not),
    CONTENT#4802(   always change when the resource changes is a "weak validator."),
      BREAK#4803,
    CONTENT#4804(   Entity tags are normally "strong validators," but the protocol),
    CONTENT#4805(   provides a mechanism to tag an entity tag as "weak." One can think of),
    CONTENT#4806(   a strong validator as one that changes whenever the bits of an entity),
    CONTENT#4807(   changes, while a weak value changes whenever the meaning of an entity),
    CONTENT#4808(   changes. Alternatively, one can think of a strong validator as part),
    CONTENT#4809(   of an identifier for a specific entity, while a weak validator is),
    CONTENT#4810(   part of an identifier for a set of semantically equivalent entities.),
      BREAK#4811,
    CONTENT#4812(      Note: One example of a strong validator is an integer that is),
    CONTENT#4813(      incremented in stable storage every time an entity is changed.),
      BREAK#4814,
      BREAK#4815,
      BREAK#4816,
      BREAK#4818,
      BREAK#4820,
      BREAK#4821,
    CONTENT#4822(      An entity's modification time, if represented with one-second),
    CONTENT#4823(      resolution, could be a weak validator, since it is possible that),
    CONTENT#4824(      the resource might be modified twice during a single second.),
      BREAK#4825,
    CONTENT#4826(      Support for weak validators is optional. However, weak validators),
    CONTENT#4827(      allow for more efficient caching of equivalent objects; for),
    CONTENT#4828(      example, a hit counter on a site is probably good enough if it is),
    CONTENT#4829(      updated every few days or weeks, and any value during that period),
    CONTENT#4830(      is likely "good enough" to be equivalent.),
      BREAK#4831,
    CONTENT#4832(   A "use" of a validator is either when a client generates a request),
    CONTENT#4833(   and includes the validator in a validating header field, or when a),
    CONTENT#4834(   server compares two validators.),
      BREAK#4835,
    CONTENT#4836(   Strong validators are usable in any context. Weak validators are only),
    CONTENT#4837(   usable in contexts that do not depend on exact equality of an entity.),
    CONTENT#4838(   For example, either kind is usable for a conditional GET of a full),
    CONTENT#4839(   entity. However, only a strong validator is usable for a sub-range),
    CONTENT#4840(   retrieval, since otherwise the client might end up with an internally),
    CONTENT#4841(   inconsistent entity.),
      BREAK#4842,
    CONTENT#4843(   Clients MAY issue simple (non-subrange) GET requests with either weak),
    CONTENT#4844(   validators or strong validators. Clients MUST NOT use weak validators),
    CONTENT#4845(   in other forms of request.),
      BREAK#4846,
    CONTENT#4847(   The only function that the HTTP/1.1 protocol defines on validators is),
    CONTENT#4848(   comparison. There are two validator comparison functions, depending),
    CONTENT#4849(   on whether the comparison context allows the use of weak validators),
    CONTENT#4850(   or not:),
      BREAK#4851,
    CONTENT#4852(      - The strong comparison function: in order to be considered equal,),
    CONTENT#4853(        both validators MUST be identical in every way, and both MUST),
    CONTENT#4854(        NOT be weak.),
      BREAK#4855,
    CONTENT#4856(      - The weak comparison function: in order to be considered equal,),
    CONTENT#4857(        both validators MUST be identical in every way, but either or),
    CONTENT#4858(        both of them MAY be tagged as "weak" without affecting the),
    CONTENT#4859(        result.),
      BREAK#4860,
    CONTENT#4861(   An entity tag is strong unless it is explicitly tagged as weak.),
    CONTENT#4862(   Section 3.11 gives the syntax for entity tags.),
      BREAK#4863,
    CONTENT#4864(   A Last-Modified time, when used as a validator in a request, is),
    CONTENT#4865(   implicitly weak unless it is possible to deduce that it is strong,),
    CONTENT#4866(   using the following rules:),
      BREAK#4867,
    CONTENT#4868(      - The validator is being compared by an origin server to the),
    CONTENT#4869(        actual current validator for the entity and,),
      BREAK#4870,
      BREAK#4871,
      BREAK#4872,
      BREAK#4874,
      BREAK#4876,
      BREAK#4877,
    CONTENT#4878(      - That origin server reliably knows that the associated entity did),
    CONTENT#4879(        not change twice during the second covered by the presented),
    CONTENT#4880(        validator.),
      BREAK#4881,
    CONTENT#4882(   or),
      BREAK#4883,
    CONTENT#4884(      - The validator is about to be used by a client in an If-),
    CONTENT#4885(        Modified-Since or If-Unmodified-Since header, because the client),
    CONTENT#4886(        has a cache entry for the associated entity, and),
      BREAK#4887,
    CONTENT#4888(      - That cache entry includes a Date value, which gives the time),
    CONTENT#4889(        when the origin server sent the original response, and),
      BREAK#4890,
    CONTENT#4891(      - The presented Last-Modified time is at least 60 seconds before),
    CONTENT#4892(        the Date value.),
      BREAK#4893,
    CONTENT#4894(   or),
      BREAK#4895,
    CONTENT#4896(      - The validator is being compared by an intermediate cache to the),
    CONTENT#4897(        validator stored in its cache entry for the entity, and),
      BREAK#4898,
    CONTENT#4899(      - That cache entry includes a Date value, which gives the time),
    CONTENT#4900(        when the origin server sent the original response, and),
      BREAK#4901,
    CONTENT#4902(      - The presented Last-Modified time is at least 60 seconds before),
    CONTENT#4903(        the Date value.),
      BREAK#4904,
    CONTENT#4905(   This method relies on the fact that if two different responses were),
    CONTENT#4906(   sent by the origin server during the same second, but both had the),
    CONTENT#4907(   same Last-Modified time, then at least one of those responses would),
    CONTENT#4908(   have a Date value equal to its Last-Modified time. The arbitrary 60-),
    CONTENT#4909(   second limit guards against the possibility that the Date and Last-),
    CONTENT#4910(   Modified values are generated from different clocks, or at somewhat),
    CONTENT#4911(   different times during the preparation of the response. An),
    CONTENT#4912(   implementation MAY use a value larger than 60 seconds, if it is),
    CONTENT#4913(   believed that 60 seconds is too short.),
      BREAK#4914,
    CONTENT#4915(   If a client wishes to perform a sub-range retrieval on a value for),
    CONTENT#4916(   which it has only a Last-Modified time and no opaque validator, it),
    CONTENT#4917(   MAY do this only if the Last-Modified time is strong in the sense),
    CONTENT#4918(   described here.),
      BREAK#4919,
    CONTENT#4920(   A cache or origin server receiving a conditional request, other than),
    CONTENT#4921(   a full-body GET request, MUST use the strong comparison function to),
    CONTENT#4922(   evaluate the condition.),
      BREAK#4923,
    CONTENT#4924(   These rules allow HTTP/1.1 caches and clients to safely perform sub-),
    CONTENT#4925(   range retrievals on values that have been obtained from HTTP/1.0),
      BREAK#4926,
      BREAK#4927,
      BREAK#4928,
      BREAK#4930,
      BREAK#4932,
      BREAK#4933,
    CONTENT#4934(   servers.),
      BREAK#4935,
    SECTION#4936(id=13.3.4, title=Rules for When to Use Entity Tags and Last-Modified Dates),
      BREAK#4937,
    CONTENT#4938(   We adopt a set of rules and recommendations for origin servers,),
    CONTENT#4939(   clients, and caches regarding when various validator types ought to),
    CONTENT#4940(   be used, and for what purposes.),
      BREAK#4941,
    CONTENT#4942(   HTTP/1.1 origin servers:),
      BREAK#4943,
    CONTENT#4944(      - SHOULD send an entity tag validator unless it is not feasible to),
    CONTENT#4945(        generate one.),
      BREAK#4946,
    CONTENT#4947(      - MAY send a weak entity tag instead of a strong entity tag, if),
    CONTENT#4948(        performance considerations support the use of weak entity tags,),
    CONTENT#4949(        or if it is unfeasible to send a strong entity tag.),
      BREAK#4950,
    CONTENT#4951(      - SHOULD send a Last-Modified value if it is feasible to send one,),
    CONTENT#4952(        unless the risk of a breakdown in semantic transparency that),
    CONTENT#4953(        could result from using this date in an If-Modified-Since header),
    CONTENT#4954(        would lead to serious problems.),
      BREAK#4955,
    CONTENT#4956(   In other words, the preferred behavior for an HTTP/1.1 origin server),
    CONTENT#4957(   is to send both a strong entity tag and a Last-Modified value.),
      BREAK#4958,
    CONTENT#4959(   In order to be legal, a strong entity tag MUST change whenever the),
    CONTENT#4960(   associated entity value changes in any way. A weak entity tag SHOULD),
    CONTENT#4961(   change whenever the associated entity changes in a semantically),
    CONTENT#4962(   significant way.),
      BREAK#4963,
    CONTENT#4964(      Note: in order to provide semantically transparent caching, an),
    CONTENT#4965(      origin server must avoid reusing a specific strong entity tag),
    CONTENT#4966(      value for two different entities, or reusing a specific weak),
    CONTENT#4967(      entity tag value for two semantically different entities. Cache),
    CONTENT#4968(      entries might persist for arbitrarily long periods, regardless of),
    CONTENT#4969(      expiration times, so it might be inappropriate to expect that a),
    CONTENT#4970(      cache will never again attempt to validate an entry using a),
    CONTENT#4971(      validator that it obtained at some point in the past.),
      BREAK#4972,
    CONTENT#4973(   HTTP/1.1 clients:),
      BREAK#4974,
    CONTENT#4975(      - If an entity tag has been provided by the origin server, MUST),
    CONTENT#4976(        use that entity tag in any cache-conditional request (using If-),
    CONTENT#4977(        Match or If-None-Match).),
      BREAK#4978,
    CONTENT#4979(      - If only a Last-Modified value has been provided by the origin),
    CONTENT#4980(        server, SHOULD use that value in non-subrange cache-conditional),
    CONTENT#4981(        requests (using If-Modified-Since).),
      BREAK#4982,
      BREAK#4983,
      BREAK#4984,
      BREAK#4986,
      BREAK#4988,
      BREAK#4989,
    CONTENT#4990(      - If only a Last-Modified value has been provided by an HTTP/1.0),
    CONTENT#4991(        origin server, MAY use that value in subrange cache-conditional),
    CONTENT#4992(        requests (using If-Unmodified-Since:). The user agent SHOULD),
    CONTENT#4993(        provide a way to disable this, in case of difficulty.),
      BREAK#4994,
    CONTENT#4995(      - If both an entity tag and a Last-Modified value have been),
    CONTENT#4996(        provided by the origin server, SHOULD use both validators in),
    CONTENT#4997(        cache-conditional requests. This allows both HTTP/1.0 and),
    CONTENT#4998(        HTTP/1.1 caches to respond appropriately.),
      BREAK#4999,
    CONTENT#5000(   An HTTP/1.1 origin server, upon receiving a conditional request that),
    CONTENT#5001(   includes both a Last-Modified date (e.g., in an If-Modified-Since or),
    CONTENT#5002(   If-Unmodified-Since header field) and one or more entity tags (e.g.,),
    CONTENT#5003(   in an If-Match, If-None-Match, or If-Range header field) as cache),
    CONTENT#5004(   validators, MUST NOT return a response status of 304 (Not Modified)),
    CONTENT#5005(   unless doing so is consistent with all of the conditional header),
    CONTENT#5006(   fields in the request.),
      BREAK#5007,
    CONTENT#5008(   An HTTP/1.1 caching proxy, upon receiving a conditional request that),
    CONTENT#5009(   includes both a Last-Modified date and one or more entity tags as),
    CONTENT#5010(   cache validators, MUST NOT return a locally cached response to the),
    CONTENT#5011(   client unless that cached response is consistent with all of the),
    CONTENT#5012(   conditional header fields in the request.),
      BREAK#5013,
    CONTENT#5014(      Note: The general principle behind these rules is that HTTP/1.1),
    CONTENT#5015(      servers and clients should transmit as much non-redundant),
    CONTENT#5016(      information as is available in their responses and requests.),
    CONTENT#5017(      HTTP/1.1 systems receiving this information will make the most),
    CONTENT#5018(      conservative assumptions about the validators they receive.),
      BREAK#5019,
    CONTENT#5020(      HTTP/1.0 clients and caches will ignore entity tags. Generally,),
    CONTENT#5021(      last-modified values received or used by these systems will),
    CONTENT#5022(      support transparent and efficient caching, and so HTTP/1.1 origin),
    CONTENT#5023(      servers should provide Last-Modified values. In those rare cases),
    CONTENT#5024(      where the use of a Last-Modified value as a validator by an),
    CONTENT#5025(      HTTP/1.0 system could result in a serious problem, then HTTP/1.1),
    CONTENT#5026(      origin servers should not provide one.),
      BREAK#5027,
    SECTION#5028(id=13.3.5, title=Non-validating Conditionals),
      BREAK#5029,
    CONTENT#5030(   The principle behind entity tags is that only the service author),
    CONTENT#5031(   knows the semantics of a resource well enough to select an),
    CONTENT#5032(   appropriate cache validation mechanism, and the specification of any),
    CONTENT#5033(   validator comparison function more complex than byte-equality would),
    CONTENT#5034(   open up a can of worms. Thus, comparisons of any other headers),
    CONTENT#5035(   (except Last-Modified, for compatibility with HTTP/1.0) are never),
    CONTENT#5036(   used for purposes of validating a cache entry.),
      BREAK#5037,
      BREAK#5038,
      BREAK#5039,
      BREAK#5040,
      BREAK#5042,
      BREAK#5044,
      BREAK#5045,
    SECTION#5046(id=13.4, title=Response Cacheability),
      BREAK#5047,
    CONTENT#5048(   Unless specifically constrained by a cache-control (section 14.9)),
    CONTENT#5049(   directive, a caching system MAY always store a successful response),
    CONTENT#5050(   (see section 13.8) as a cache entry, MAY return it without validation),
    CONTENT#5051(   if it is fresh, and MAY return it after successful validation. If),
    CONTENT#5052(   there is neither a cache validator nor an explicit expiration time),
    CONTENT#5053(   associated with a response, we do not expect it to be cached, but),
    CONTENT#5054(   certain caches MAY violate this expectation (for example, when little),
    CONTENT#5055(   or no network connectivity is available). A client can usually detect),
    CONTENT#5056(   that such a response was taken from a cache by comparing the Date),
    CONTENT#5057(   header to the current time.),
      BREAK#5058,
    CONTENT#5059(      Note: some HTTP/1.0 caches are known to violate this expectation),
    CONTENT#5060(      without providing any Warning.),
      BREAK#5061,
    CONTENT#5062(   However, in some cases it might be inappropriate for a cache to),
    CONTENT#5063(   retain an entity, or to return it in response to a subsequent),
    CONTENT#5064(   request. This might be because absolute semantic transparency is),
    CONTENT#5065(   deemed necessary by the service author, or because of security or),
    CONTENT#5066(   privacy considerations. Certain cache-control directives are),
    CONTENT#5067(   therefore provided so that the server can indicate that certain),
    CONTENT#5068(   resource entities, or portions thereof, are not to be cached),
    CONTENT#5069(   regardless of other considerations.),
      BREAK#5070,
    CONTENT#5071(   Note that section 14.8 normally prevents a shared cache from saving),
    CONTENT#5072(   and returning a response to a previous request if that request),
    CONTENT#5073(   included an Authorization header.),
      BREAK#5074,
    CONTENT#5075(   A response received with a status code of 200, 203, 206, 300, 301 or),
    CONTENT#5076(   410 MAY be stored by a cache and used in reply to a subsequent),
    CONTENT#5077(   request, subject to the expiration mechanism, unless a cache-control),
    CONTENT#5078(   directive prohibits caching. However, a cache that does not support),
    CONTENT#5079(   the Range and Content-Range headers MUST NOT cache 206 (Partial),
    CONTENT#5080(   Content) responses.),
      BREAK#5081,
    CONTENT#5082(   A response received with any other status code (e.g. status codes 302),
    CONTENT#5083(   and 307) MUST NOT be returned in a reply to a subsequent request),
    CONTENT#5084(   unless there are cache-control directives or another header(s) that),
    CONTENT#5085(   explicitly allow it. For example, these include the following: an),
    CONTENT#5086(   Expires header (section 14.21); a "max-age", "s-maxage",  "must-),
    CONTENT#5087(   revalidate", "proxy-revalidate", "public" or "private" cache-control),
    CONTENT#5088(   directive (section 14.9).),
      BREAK#5089,
      BREAK#5090,
      BREAK#5091,
      BREAK#5092,
      BREAK#5093,
      BREAK#5094,
      BREAK#5095,
      BREAK#5096,
      BREAK#5098,
      BREAK#5100,
      BREAK#5101,
    SECTION#5102(id=13.5, title=Constructing Responses From Caches),
      BREAK#5103,
    CONTENT#5104(   The purpose of an HTTP cache is to store information received in),
    CONTENT#5105(   response to requests for use in responding to future requests. In),
    CONTENT#5106(   many cases, a cache simply returns the appropriate parts of a),
    CONTENT#5107(   response to the requester. However, if the cache holds a cache entry),
    CONTENT#5108(   based on a previous response, it might have to combine parts of a new),
    CONTENT#5109(   response with what is held in the cache entry.),
      BREAK#5110,
    SECTION#5111(id=13.5.1, title=End-to-end and Hop-by-hop Headers),
      BREAK#5112,
    CONTENT#5113(   For the purpose of defining the behavior of caches and non-caching),
    CONTENT#5114(   proxies, we divide HTTP headers into two categories:),
      BREAK#5115,
    CONTENT#5116(      - End-to-end headers, which are  transmitted to the ultimate),
    CONTENT#5117(        recipient of a request or response. End-to-end headers in),
    CONTENT#5118(        responses MUST be stored as part of a cache entry and MUST be),
    CONTENT#5119(        transmitted in any response formed from a cache entry.),
      BREAK#5120,
    CONTENT#5121(      - Hop-by-hop headers, which are meaningful only for a single),
    CONTENT#5122(        transport-level connection, and are not stored by caches or),
    CONTENT#5123(        forwarded by proxies.),
      BREAK#5124,
    CONTENT#5125(   The following HTTP/1.1 headers are hop-by-hop headers:),
      BREAK#5126,
    CONTENT#5127(      - Connection),
    CONTENT#5128(      - Keep-Alive),
    CONTENT#5129(      - Proxy-Authenticate),
    CONTENT#5130(      - Proxy-Authorization),
    CONTENT#5131(      - TE),
    CONTENT#5132(      - Trailers),
    CONTENT#5133(      - Transfer-Encoding),
    CONTENT#5134(      - Upgrade),
      BREAK#5135,
    CONTENT#5136(   All other headers defined by HTTP/1.1 are end-to-end headers.),
      BREAK#5137,
    CONTENT#5138(   Other hop-by-hop headers MUST be listed in a Connection header,),
    CONTENT#5139(   (section 14.10) to be introduced into HTTP/1.1 (or later).),
      BREAK#5140,
    SECTION#5141(id=13.5.2, title=Non-modifiable Headers),
      BREAK#5142,
    CONTENT#5143(   Some features of the HTTP/1.1 protocol, such as Digest),
    CONTENT#5144(   Authentication, depend on the value of certain end-to-end headers. A),
    CONTENT#5145(   transparent proxy SHOULD NOT modify an end-to-end header unless the),
    CONTENT#5146(   definition of that header requires or specifically allows that.),
      BREAK#5147,
      BREAK#5148,
      BREAK#5149,
      BREAK#5150,
      BREAK#5151,
      BREAK#5152,
      BREAK#5154,
      BREAK#5156,
      BREAK#5157,
    CONTENT#5158(   A transparent proxy MUST NOT modify any of the following fields in a),
    CONTENT#5159(   request or response, and it MUST NOT add any of these fields if not),
    CONTENT#5160(   already present:),
      BREAK#5161,
    CONTENT#5162(      - Content-Location),
      BREAK#5163,
    CONTENT#5164(      - Content-MD5),
      BREAK#5165,
    CONTENT#5166(      - ETag),
      BREAK#5167,
    CONTENT#5168(      - Last-Modified),
      BREAK#5169,
    CONTENT#5170(   A transparent proxy MUST NOT modify any of the following fields in a),
    CONTENT#5171(   response:),
      BREAK#5172,
    CONTENT#5173(      - Expires),
      BREAK#5174,
    CONTENT#5175(   but it MAY add any of these fields if not already present. If an),
    CONTENT#5176(   Expires header is added, it MUST be given a field-value identical to),
    CONTENT#5177(   that of the Date header in that response.),
      BREAK#5178,
    CONTENT#5179(   A  proxy MUST NOT modify or add any of the following fields in a),
    CONTENT#5180(   message that contains the no-transform cache-control directive, or in),
    CONTENT#5181(   any request:),
      BREAK#5182,
    CONTENT#5183(      - Content-Encoding),
      BREAK#5184,
    CONTENT#5185(      - Content-Range),
      BREAK#5186,
    CONTENT#5187(      - Content-Type),
      BREAK#5188,
    CONTENT#5189(   A non-transparent proxy MAY modify or add these fields to a message),
    CONTENT#5190(   that does not include no-transform, but if it does so, it MUST add a),
    CONTENT#5191(   Warning 214 (Transformation applied) if one does not already appear),
    CONTENT#5192(   in the message (see section 14.46).),
      BREAK#5193,
    CONTENT#5194(      Warning: unnecessary modification of end-to-end headers might),
    CONTENT#5195(      cause authentication failures if stronger authentication),
    CONTENT#5196(      mechanisms are introduced in later versions of HTTP. Such),
    CONTENT#5197(      authentication mechanisms MAY rely on the values of header fields),
    CONTENT#5198(      not listed here.),
      BREAK#5199,
    CONTENT#5200(   The Content-Length field of a request or response is added or deleted),
    CONTENT#5201(   according to the rules in section 4.4. A transparent proxy MUST),
    CONTENT#5202(   preserve the entity-length (section 7.2.2) of the entity-body,),
    CONTENT#5203(   although it MAY change the transfer-length (section 4.4).),
      BREAK#5204,
      BREAK#5205,
      BREAK#5206,
      BREAK#5207,
      BREAK#5208,
      BREAK#5210,
      BREAK#5212,
      BREAK#5213,
    SECTION#5214(id=13.5.3, title=Combining Headers),
      BREAK#5215,
    CONTENT#5216(   When a cache makes a validating request to a server, and the server),
    CONTENT#5217(   provides a 304 (Not Modified) response or a 206 (Partial Content)),
    CONTENT#5218(   response, the cache then constructs a response to send to the),
    CONTENT#5219(   requesting client.),
      BREAK#5220,
    CONTENT#5221(   If the status code is 304 (Not Modified), the cache uses the entity-),
    CONTENT#5222(   body stored in the cache entry as the entity-body of this outgoing),
    CONTENT#5223(   response. If the status code is 206 (Partial Content) and the ETag or),
    CONTENT#5224(   Last-Modified headers match exactly, the cache MAY combine the),
    CONTENT#5225(   contents stored in the cache entry with the new contents received in),
    CONTENT#5226(   the response and use the result as the entity-body of this outgoing),
    CONTENT#5227(   response, (see 13.5.4).),
      BREAK#5228,
    CONTENT#5229(   The end-to-end headers stored in the cache entry are used for the),
    CONTENT#5230(   constructed response, except that),
      BREAK#5231,
    CONTENT#5232(      - any stored Warning headers with warn-code 1xx (see section),
    CONTENT#5233(        14.46) MUST be deleted from the cache entry and the forwarded),
    CONTENT#5234(        response.),
      BREAK#5235,
    CONTENT#5236(      - any stored Warning headers with warn-code 2xx MUST be retained),
    CONTENT#5237(        in the cache entry and the forwarded response.),
      BREAK#5238,
    CONTENT#5239(      - any end-to-end headers provided in the 304 or 206 response MUST),
    CONTENT#5240(        replace the corresponding headers from the cache entry.),
      BREAK#5241,
    CONTENT#5242(   Unless the cache decides to remove the cache entry, it MUST also),
    CONTENT#5243(   replace the end-to-end headers stored with the cache entry with),
    CONTENT#5244(   corresponding headers received in the incoming response, except for),
    CONTENT#5245(   Warning headers as described immediately above. If a header field-),
    CONTENT#5246(   name in the incoming response matches more than one header in the),
    CONTENT#5247(   cache entry, all such old headers MUST be replaced.),
      BREAK#5248,
    CONTENT#5249(   In other words, the set of end-to-end headers received in the),
    CONTENT#5250(   incoming response overrides all corresponding end-to-end headers),
    CONTENT#5251(   stored with the cache entry (except for stored Warning headers with),
    CONTENT#5252(   warn-code 1xx, which are deleted even if not overridden).),
      BREAK#5253,
    CONTENT#5254(      Note: this rule allows an origin server to use a 304 (Not),
    CONTENT#5255(      Modified) or a 206 (Partial Content) response to update any header),
    CONTENT#5256(      associated with a previous response for the same entity or sub-),
    CONTENT#5257(      ranges thereof, although it might not always be meaningful or),
    CONTENT#5258(      correct to do so. This rule does not allow an origin server to use),
    CONTENT#5259(      a 304 (Not Modified) or a 206 (Partial Content) response to),
    CONTENT#5260(      entirely delete a header that it had provided with a previous),
    CONTENT#5261(      response.),
      BREAK#5262,
      BREAK#5263,
      BREAK#5264,
      BREAK#5266,
      BREAK#5268,
      BREAK#5269,
    SECTION#5270(id=13.5.4, title=Combining Byte Ranges),
      BREAK#5271,
    CONTENT#5272(   A response might transfer only a subrange of the bytes of an entity-),
    CONTENT#5273(   body, either because the request included one or more Range),
    CONTENT#5274(   specifications, or because a connection was broken prematurely. After),
    CONTENT#5275(   several such transfers, a cache might have received several ranges of),
    CONTENT#5276(   the same entity-body.),
      BREAK#5277,
    CONTENT#5278(   If a cache has a stored non-empty set of subranges for an entity, and),
    CONTENT#5279(   an incoming response transfers another subrange, the cache MAY),
    CONTENT#5280(   combine the new subrange with the existing set if both the following),
    CONTENT#5281(   conditions are met:),
      BREAK#5282,
    CONTENT#5283(      - Both the incoming response and the cache entry have a cache),
    CONTENT#5284(        validator.),
      BREAK#5285,
    CONTENT#5286(      - The two cache validators match using the strong comparison),
    CONTENT#5287(        function (see section 13.3.3).),
      BREAK#5288,
    CONTENT#5289(   If either requirement is not met, the cache MUST use only the most),
    CONTENT#5290(   recent partial response (based on the Date values transmitted with),
    CONTENT#5291(   every response, and using the incoming response if these values are),
    CONTENT#5292(   equal or missing), and MUST discard the other partial information.),
      BREAK#5293,
    SECTION#5294(id=13.6, title=Caching Negotiated Responses),
      BREAK#5295,
    CONTENT#5296(   Use of server-driven content negotiation (section 12.1), as indicated),
    CONTENT#5297(   by the presence of a Vary header field in a response, alters the),
    CONTENT#5298(   conditions and procedure by which a cache can use the response for),
    CONTENT#5299(   subsequent requests. See section 14.44 for use of the Vary header),
    CONTENT#5300(   field by servers.),
      BREAK#5301,
    CONTENT#5302(   A server SHOULD use the Vary header field to inform a cache of what),
    CONTENT#5303(   request-header fields were used to select among multiple),
    CONTENT#5304(   representations of a cacheable response subject to server-driven),
    CONTENT#5305(   negotiation. The set of header fields named by the Vary field value),
    CONTENT#5306(   is known as the "selecting" request-headers.),
      BREAK#5307,
    CONTENT#5308(   When the cache receives a subsequent request whose Request-URI),
    CONTENT#5309(   specifies one or more cache entries including a Vary header field,),
    CONTENT#5310(   the cache MUST NOT use such a cache entry to construct a response to),
    CONTENT#5311(   the new request unless all of the selecting request-headers present),
    CONTENT#5312(   in the new request match the corresponding stored request-headers in),
    CONTENT#5313(   the original request.),
      BREAK#5314,
    CONTENT#5315(   The selecting request-headers from two requests are defined to match),
    CONTENT#5316(   if and only if the selecting request-headers in the first request can),
    CONTENT#5317(   be transformed to the selecting request-headers in the second request),
      BREAK#5318,
      BREAK#5319,
      BREAK#5320,
      BREAK#5322,
      BREAK#5324,
      BREAK#5325,
    CONTENT#5326(   by adding or removing linear white space (LWS) at places where this),
    CONTENT#5327(   is allowed by the corresponding BNF, and/or combining multiple),
    CONTENT#5328(   message-header fields with the same field name following the rules),
    CONTENT#5329(   about message headers in section 4.2.),
      BREAK#5330,
    CONTENT#5331(   A Vary header field-value of "*" always fails to match and subsequent),
    CONTENT#5332(   requests on that resource can only be properly interpreted by the),
    CONTENT#5333(   origin server.),
      BREAK#5334,
    CONTENT#5335(   If the selecting request header fields for the cached entry do not),
    CONTENT#5336(   match the selecting request header fields of the new request, then),
    CONTENT#5337(   the cache MUST NOT use a cached entry to satisfy the request unless),
    CONTENT#5338(   it first relays the new request to the origin server in a conditional),
    CONTENT#5339(   request and the server responds with 304 (Not Modified), including an),
    CONTENT#5340(   entity tag or Content-Location that indicates the entity to be used.),
      BREAK#5341,
    CONTENT#5342(   If an entity tag was assigned to a cached representation, the),
    CONTENT#5343(   forwarded request SHOULD be conditional and include the entity tags),
    CONTENT#5344(   in an If-None-Match header field from all its cache entries for the),
    CONTENT#5345(   resource. This conveys to the server the set of entities currently),
    CONTENT#5346(   held by the cache, so that if any one of these entities matches the),
    CONTENT#5347(   requested entity, the server can use the ETag header field in its 304),
    CONTENT#5348(   (Not Modified) response to tell the cache which entry is appropriate.),
    CONTENT#5349(   If the entity-tag of the new response matches that of an existing),
    CONTENT#5350(   entry, the new response SHOULD be used to update the header fields of),
    CONTENT#5351(   the existing entry, and the result MUST be returned to the client.),
      BREAK#5352,
    CONTENT#5353(   If any of the existing cache entries contains only partial content),
    CONTENT#5354(   for the associated entity, its entity-tag SHOULD NOT be included in),
    CONTENT#5355(   the If-None-Match header field unless the request is for a range that),
    CONTENT#5356(   would be fully satisfied by that entry.),
      BREAK#5357,
    CONTENT#5358(   If a cache receives a successful response whose Content-Location),
    CONTENT#5359(   field matches that of an existing cache entry for the same Request-),
    CONTENT#5360(   ]URI, whose entity-tag differs from that of the existing entry, and),
    CONTENT#5361(   whose Date is more recent than that of the existing entry, the),
    CONTENT#5362(   existing entry SHOULD NOT be returned in response to future requests),
    CONTENT#5363(   and SHOULD be deleted from the cache.),
      BREAK#5364,
    SECTION#5365(id=13.7, title=Shared and Non-Shared Caches),
      BREAK#5366,
    CONTENT#5367(   For reasons of security and privacy, it is necessary to make a),
    CONTENT#5368(   distinction between "shared" and "non-shared" caches. A non-shared),
    CONTENT#5369(   cache is one that is accessible only to a single user. Accessibility),
    CONTENT#5370(   in this case SHOULD be enforced by appropriate security mechanisms.),
    CONTENT#5371(   All other caches are considered to be "shared." Other sections of),
      BREAK#5372,
      BREAK#5373,
      BREAK#5374,
      BREAK#5375,
      BREAK#5376,
      BREAK#5378,
      BREAK#5380,
      BREAK#5381,
    CONTENT#5382(   this specification place certain constraints on the operation of),
    CONTENT#5383(   shared caches in order to prevent loss of privacy or failure of),
    CONTENT#5384(   access controls.),
      BREAK#5385,
    SECTION#5386(id=13.8, title=Errors or Incomplete Response Cache Behavior),
      BREAK#5387,
    CONTENT#5388(   A cache that receives an incomplete response (for example, with fewer),
    CONTENT#5389(   bytes of data than specified in a Content-Length header) MAY store),
    CONTENT#5390(   the response. However, the cache MUST treat this as a partial),
    CONTENT#5391(   response. Partial responses MAY be combined as described in section),
    CONTENT#5392(   13.5.4; the result might be a full response or might still be),
    CONTENT#5393(   partial. A cache MUST NOT return a partial response to a client),
    CONTENT#5394(   without explicitly marking it as such, using the 206 (Partial),
    CONTENT#5395(   Content) status code. A cache MUST NOT return a partial response),
    CONTENT#5396(   using a status code of 200 (OK).),
      BREAK#5397,
    CONTENT#5398(   If a cache receives a 5xx response while attempting to revalidate an),
    CONTENT#5399(   entry, it MAY either forward this response to the requesting client,),
    CONTENT#5400(   or act as if the server failed to respond. In the latter case, it MAY),
    CONTENT#5401(   return a previously received response unless the cached entry),
    CONTENT#5402(   includes the "must-revalidate" cache-control directive (see section),
    CONTENT#5403(   14.9).),
      BREAK#5404,
    SECTION#5405(id=13.9, title=Side Effects of GET and HEAD),
      BREAK#5406,
    CONTENT#5407(   Unless the origin server explicitly prohibits the caching of their),
    CONTENT#5408(   responses, the application of GET and HEAD methods to any resources),
    CONTENT#5409(   SHOULD NOT have side effects that would lead to erroneous behavior if),
    CONTENT#5410(   these responses are taken from a cache. They MAY still have side),
    CONTENT#5411(   effects, but a cache is not required to consider such side effects in),
    CONTENT#5412(   its caching decisions. Caches are always expected to observe an),
    CONTENT#5413(   origin server's explicit restrictions on caching.),
      BREAK#5414,
    CONTENT#5415(   We note one exception to this rule: since some applications have),
    CONTENT#5416(   traditionally used GETs and HEADs with query URLs (those containing a),
    CONTENT#5417(   "?" in the rel_path part) to perform operations with significant side),
    CONTENT#5418(   effects, caches MUST NOT treat responses to such URIs as fresh unless),
    CONTENT#5419(   the server provides an explicit expiration time. This specifically),
    CONTENT#5420(   means that responses from HTTP/1.0 servers for such URIs SHOULD NOT),
    CONTENT#5421(   be taken from a cache. See section 9.1.1 for related information.),
      BREAK#5422,
    SECTION#5423(id=13.10, title=Invalidation After Updates or Deletions),
      BREAK#5424,
    CONTENT#5425(   The effect of certain methods performed on a resource at the origin),
    CONTENT#5426(   server might cause one or more existing cache entries to become non-),
    CONTENT#5427(   transparently invalid. That is, although they might continue to be),
    CONTENT#5428(   "fresh," they do not accurately reflect what the origin server would),
    CONTENT#5429(   return for a new request on that resource.),
      BREAK#5430,
      BREAK#5431,
      BREAK#5432,
      BREAK#5434,
      BREAK#5436,
      BREAK#5437,
    CONTENT#5438(   There is no way for the HTTP protocol to guarantee that all such),
    CONTENT#5439(   cache entries are marked invalid. For example, the request that),
    CONTENT#5440(   caused the change at the origin server might not have gone through),
    CONTENT#5441(   the proxy where a cache entry is stored. However, several rules help),
    CONTENT#5442(   reduce the likelihood of erroneous behavior.),
      BREAK#5443,
    CONTENT#5444(   In this section, the phrase "invalidate an entity" means that the),
    CONTENT#5445(   cache will either remove all instances of that entity from its),
    CONTENT#5446(   storage, or will mark these as "invalid" and in need of a mandatory),
    CONTENT#5447(   revalidation before they can be returned in response to a subsequent),
    CONTENT#5448(   request.),
      BREAK#5449,
    CONTENT#5450(   Some HTTP methods MUST cause a cache to invalidate an entity. This is),
    CONTENT#5451(   either the entity referred to by the Request-URI, or by the Location),
    CONTENT#5452(   or Content-Location headers (if present). These methods are:),
      BREAK#5453,
    CONTENT#5454(      - PUT),
      BREAK#5455,
    CONTENT#5456(      - DELETE),
      BREAK#5457,
    CONTENT#5458(      - POST),
      BREAK#5459,
    CONTENT#5460(   In order to prevent denial of service attacks, an invalidation based),
    CONTENT#5461(   on the URI in a Location or Content-Location header MUST only be),
    CONTENT#5462(   performed if the host part is the same as in the Request-URI.),
      BREAK#5463,
    CONTENT#5464(   A cache that passes through requests for methods it does not),
    CONTENT#5465(   understand SHOULD invalidate any entities referred to by the),
    CONTENT#5466(   Request-URI.),
      BREAK#5467,
    SECTION#5468(id=13.11, title=Write-Through Mandatory),
      BREAK#5469,
    CONTENT#5470(   All methods that might be expected to cause modifications to the),
    CONTENT#5471(   origin server's resources MUST be written through to the origin),
    CONTENT#5472(   server. This currently includes all methods except for GET and HEAD.),
    CONTENT#5473(   A cache MUST NOT reply to such a request from a client before having),
    CONTENT#5474(   transmitted the request to the inbound server, and having received a),
    CONTENT#5475(   corresponding response from the inbound server. This does not prevent),
    CONTENT#5476(   a proxy cache from sending a 100 (Continue) response before the),
    CONTENT#5477(   inbound server has sent its final reply.),
      BREAK#5478,
    CONTENT#5479(   The alternative (known as "write-back" or "copy-back" caching) is not),
    CONTENT#5480(   allowed in HTTP/1.1, due to the difficulty of providing consistent),
    CONTENT#5481(   updates and the problems arising from server, cache, or network),
    CONTENT#5482(   failure prior to write-back.),
      BREAK#5483,
      BREAK#5484,
      BREAK#5485,
      BREAK#5486,
      BREAK#5487,
      BREAK#5488,
      BREAK#5490,
      BREAK#5492,
      BREAK#5493,
    SECTION#5494(id=13.12, title=Cache Replacement),
      BREAK#5495,
    CONTENT#5496(   If a new cacheable (see sections 14.9.2, 13.2.5, 13.2.6 and 13.8)),
    CONTENT#5497(   response is received from a resource while any existing responses for),
    CONTENT#5498(   the same resource are cached, the cache SHOULD use the new response),
    CONTENT#5499(   to reply to the current request. It MAY insert it into cache storage),
    CONTENT#5500(   and MAY, if it meets all other requirements, use it to respond to any),
    CONTENT#5501(   future requests that would previously have caused the old response to),
    CONTENT#5502(   be returned. If it inserts the new response into cache storage  the),
    CONTENT#5503(   rules in section 13.5.3 apply.),
      BREAK#5504,
    CONTENT#5505(      Note: a new response that has an older Date header value than),
    CONTENT#5506(      existing cached responses is not cacheable.),
      BREAK#5507,
    SECTION#5508(id=13.13, title=History Lists),
      BREAK#5509,
    CONTENT#5510(   User agents often have history mechanisms, such as "Back" buttons and),
    CONTENT#5511(   history lists, which can be used to redisplay an entity retrieved),
    CONTENT#5512(   earlier in a session.),
      BREAK#5513,
    CONTENT#5514(   History mechanisms and caches are different. In particular history),
    CONTENT#5515(   mechanisms SHOULD NOT try to show a semantically transparent view of),
    CONTENT#5516(   the current state of a resource. Rather, a history mechanism is meant),
    CONTENT#5517(   to show exactly what the user saw at the time when the resource was),
    CONTENT#5518(   retrieved.),
      BREAK#5519,
    CONTENT#5520(   By default, an expiration time does not apply to history mechanisms.),
    CONTENT#5521(   If the entity is still in storage, a history mechanism SHOULD display),
    CONTENT#5522(   it even if the entity has expired, unless the user has specifically),
    CONTENT#5523(   configured the agent to refresh expired history documents.),
      BREAK#5524,
    CONTENT#5525(   This is not to be construed to prohibit the history mechanism from),
    CONTENT#5526(   telling the user that a view might be stale.),
      BREAK#5527,
    CONTENT#5528(      Note: if history list mechanisms unnecessarily prevent users from),
    CONTENT#5529(      viewing stale resources, this will tend to force service authors),
    CONTENT#5530(      to avoid using HTTP expiration controls and cache controls when),
    CONTENT#5531(      they would otherwise like to. Service authors may consider it),
    CONTENT#5532(      important that users not be presented with error messages or),
    CONTENT#5533(      warning messages when they use navigation controls (such as BACK)),
    CONTENT#5534(      to view previously fetched resources. Even though sometimes such),
    CONTENT#5535(      resources ought not to cached, or ought to expire quickly, user),
    CONTENT#5536(      interface considerations may force service authors to resort to),
    CONTENT#5537(      other means of preventing caching (e.g. "once-only" URLs) in order),
    CONTENT#5538(      not to suffer the effects of improperly functioning history),
    CONTENT#5539(      mechanisms.),
      BREAK#5540,
      BREAK#5541,
      BREAK#5542,
      BREAK#5543,
      BREAK#5544,
      BREAK#5546,
      BREAK#5548,
      BREAK#5549,
    SECTION#5550(id=14, title=Header Field Definitions),
      BREAK#5551,
    CONTENT#5552(   This section defines the syntax and semantics of all standard),
    CONTENT#5553(   HTTP/1.1 header fields. For entity-header fields, both sender and),
    CONTENT#5554(   recipient refer to either the client or the server, depending on who),
    CONTENT#5555(   sends and who receives the entity.),
      BREAK#5556,
    SECTION#5557(id=14.1, title=Accept),
      BREAK#5558,
    CONTENT#5559(   The Accept request-header field can be used to specify certain media),
    CONTENT#5560(   types which are acceptable for the response. Accept headers can be),
    CONTENT#5561(   used to indicate that the request is specifically limited to a small),
    CONTENT#5562(   set of desired types, as in the case of a request for an in-line),
    CONTENT#5563(   image.),
      BREAK#5564,
    CONTENT#5565(       Accept         = "Accept" ":"),
    CONTENT#5566(                        #( media-range [ accept-params ] )),
      BREAK#5567,
    CONTENT#5568(       media-range    = ( "*/*"),
    CONTENT#5569(                        | ( type "/" "*" )),
    CONTENT#5570(                        | ( type "/" subtype )),
    CONTENT#5571(                        ) *( ";" parameter )),
    CONTENT#5572(       accept-params  = ";" "q" "=" qvalue *( accept-extension )),
    CONTENT#5573(       accept-extension = ";" token [ "=" ( token | quoted-string ) ]),
      BREAK#5574,
    CONTENT#5575(   The asterisk "*" character is used to group media types into ranges,),
    CONTENT#5576(   with "*/*" indicating all media types and "type/*" indicating all),
    CONTENT#5577(   subtypes of that type. The media-range MAY include media type),
    CONTENT#5578(   parameters that are applicable to that range.),
      BREAK#5579,
    CONTENT#5580(   Each media-range MAY be followed by one or more accept-params,),
    CONTENT#5581(   beginning with the "q" parameter for indicating a relative quality),
    CONTENT#5582(   factor. The first "q" parameter (if any) separates the media-range),
    CONTENT#5583(   parameter(s) from the accept-params. Quality factors allow the user),
    CONTENT#5584(   or user agent to indicate the relative degree of preference for that),
    CONTENT#5585(   media-range, using the qvalue scale from 0 to 1 (section 3.9). The),
    CONTENT#5586(   default value is q=1.),
      BREAK#5587,
    CONTENT#5588(      Note: Use of the "q" parameter name to separate media type),
    CONTENT#5589(      parameters from Accept extension parameters is due to historical),
    CONTENT#5590(      practice. Although this prevents any media type parameter named),
    CONTENT#5591(      "q" from being used with a media range, such an event is believed),
    CONTENT#5592(      to be unlikely given the lack of any "q" parameters in the IANA),
    CONTENT#5593(      media type registry and the rare usage of any media type),
    CONTENT#5594(      parameters in Accept. Future media types are discouraged from),
    CONTENT#5595(      registering any parameter named "q".),
      BREAK#5596,
      BREAK#5597,
      BREAK#5598,
      BREAK#5599,
      BREAK#5600,
      BREAK#5602,
      BREAK#5604,
      BREAK#5605,
    CONTENT#5606(   The example),
      BREAK#5607,
    CONTENT#5608(       Accept: audio/*; q=0.2, audio/basic),
      BREAK#5609,
    CONTENT#5610(   SHOULD be interpreted as "I prefer audio/basic, but send me any audio),
    CONTENT#5611(   type if it is the best available after an 80% mark-down in quality."),
      BREAK#5612,
    CONTENT#5613(   If no Accept header field is present, then it is assumed that the),
    CONTENT#5614(   client accepts all media types. If an Accept header field is present,),
    CONTENT#5615(   and if the server cannot send a response which is acceptable),
    CONTENT#5616(   according to the combined Accept field value, then the server SHOULD),
    CONTENT#5617(   send a 406 (not acceptable) response.),
      BREAK#5618,
    CONTENT#5619(   A more elaborate example is),
      BREAK#5620,
    CONTENT#5621(       Accept: text/plain; q=0.5, text/html,),
    CONTENT#5622(               text/x-dvi; q=0.8, text/x-c),
      BREAK#5623,
    CONTENT#5624(   Verbally, this would be interpreted as "text/html and text/x-c are),
    CONTENT#5625(   the preferred media types, but if they do not exist, then send the),
    CONTENT#5626(   text/x-dvi entity, and if that does not exist, send the text/plain),
    CONTENT#5627(   entity."),
      BREAK#5628,
    CONTENT#5629(   Media ranges can be overridden by more specific media ranges or),
    CONTENT#5630(   specific media types. If more than one media range applies to a given),
    CONTENT#5631(   type, the most specific reference has precedence. For example,),
      BREAK#5632,
    CONTENT#5633(       Accept: text/*, text/html, text/html;level=1, */*),
      BREAK#5634,
    CONTENT#5635(   have the following precedence:),
      BREAK#5636,
    CONTENT#5637(       1) text/html;level=1),
    CONTENT#5638(       2) text/html),
    CONTENT#5639(       3) text/*),
    CONTENT#5640(       4) */*),
      BREAK#5641,
    CONTENT#5642(   The media type quality factor associated with a given type is),
    CONTENT#5643(   determined by finding the media range with the highest precedence),
    CONTENT#5644(   which matches that type. For example,),
      BREAK#5645,
    CONTENT#5646(       Accept: text/*;q=0.3, text/html;q=0.7, text/html;level=1,),
    CONTENT#5647(               text/html;level=2;q=0.4, */*;q=0.5),
      BREAK#5648,
    CONTENT#5649(   would cause the following values to be associated:),
      BREAK#5650,
    CONTENT#5651(       text/html;level=1         = 1),
    CONTENT#5652(       text/html                 = 0.7),
    CONTENT#5653(       text/plain                = 0.3),
      BREAK#5654,
      BREAK#5655,
      BREAK#5656,
      BREAK#5658,
      BREAK#5660,
      BREAK#5661,
    CONTENT#5662(       image/jpeg                = 0.5),
    CONTENT#5663(       text/html;level=2         = 0.4),
    CONTENT#5664(       text/html;level=3         = 0.7),
      BREAK#5665,
    CONTENT#5666(      Note: A user agent might be provided with a default set of quality),
    CONTENT#5667(      values for certain media ranges. However, unless the user agent is),
    CONTENT#5668(      a closed system which cannot interact with other rendering agents,),
    CONTENT#5669(      this default set ought to be configurable by the user.),
      BREAK#5670,
    SECTION#5671(id=14.2, title=Accept-Charset),
      BREAK#5672,
    CONTENT#5673(   The Accept-Charset request-header field can be used to indicate what),
    CONTENT#5674(   character sets are acceptable for the response. This field allows),
    CONTENT#5675(   clients capable of understanding more comprehensive or special-),
    CONTENT#5676(   purpose character sets to signal that capability to a server which is),
    CONTENT#5677(   capable of representing documents in those character sets.),
      BREAK#5678,
    CONTENT#5679(      Accept-Charset = "Accept-Charset" ":"),
    CONTENT#5680(              1#( ( charset | "*" )[ ";" "q" "=" qvalue ] )),
      BREAK#5681,
      BREAK#5682,
    CONTENT#5683(   Character set values are described in section 3.4. Each charset MAY),
    CONTENT#5684(   be given an associated quality value which represents the user's),
    CONTENT#5685(   preference for that charset. The default value is q=1. An example is),
      BREAK#5686,
    CONTENT#5687(      Accept-Charset: iso-8859-5, unicode-1-1;q=0.8),
      BREAK#5688,
    CONTENT#5689(   The special value "*", if present in the Accept-Charset field,),
    CONTENT#5690(   matches every character set (including ISO-8859-1) which is not),
    CONTENT#5691(   mentioned elsewhere in the Accept-Charset field. If no "*" is present),
    CONTENT#5692(   in an Accept-Charset field, then all character sets not explicitly),
    CONTENT#5693(   mentioned get a quality value of 0, except for ISO-8859-1, which gets),
    CONTENT#5694(   a quality value of 1 if not explicitly mentioned.),
      BREAK#5695,
    CONTENT#5696(   If no Accept-Charset header is present, the default is that any),
    CONTENT#5697(   character set is acceptable. If an Accept-Charset header is present,),
    CONTENT#5698(   and if the server cannot send a response which is acceptable),
    CONTENT#5699(   according to the Accept-Charset header, then the server SHOULD send),
    CONTENT#5700(   an error response with the 406 (not acceptable) status code, though),
    CONTENT#5701(   the sending of an unacceptable response is also allowed.),
      BREAK#5702,
    SECTION#5703(id=14.3, title=Accept-Encoding),
      BREAK#5704,
    CONTENT#5705(   The Accept-Encoding request-header field is similar to Accept, but),
    CONTENT#5706(   restricts the content-codings (section 3.5) that are acceptable in),
    CONTENT#5707(   the response.),
      BREAK#5708,
    CONTENT#5709(       Accept-Encoding  = "Accept-Encoding" ":"),
      BREAK#5710,
      BREAK#5711,
      BREAK#5712,
      BREAK#5714,
      BREAK#5716,
      BREAK#5717,
    CONTENT#5718(                          1#( codings [ ";" "q" "=" qvalue ] )),
    CONTENT#5719(       codings          = ( content-coding | "*" )),
      BREAK#5720,
    CONTENT#5721(   Examples of its use are:),
      BREAK#5722,
    CONTENT#5723(       Accept-Encoding: compress, gzip),
    CONTENT#5724(       Accept-Encoding:),
    CONTENT#5725(       Accept-Encoding: *),
    CONTENT#5726(       Accept-Encoding: compress;q=0.5, gzip;q=1.0),
    CONTENT#5727(       Accept-Encoding: gzip;q=1.0, identity; q=0.5, *;q=0),
      BREAK#5728,
    CONTENT#5729(   A server tests whether a content-coding is acceptable, according to),
    CONTENT#5730(   an Accept-Encoding field, using these rules:),
      BREAK#5731,
    CONTENT#5732(      1. If the content-coding is one of the content-codings listed in),
    CONTENT#5733(         the Accept-Encoding field, then it is acceptable, unless it is),
    CONTENT#5734(         accompanied by a qvalue of 0. (As defined in section 3.9, a),
    CONTENT#5735(         qvalue of 0 means "not acceptable.")),
      BREAK#5736,
    CONTENT#5737(      2. The special "*" symbol in an Accept-Encoding field matches any),
    CONTENT#5738(         available content-coding not explicitly listed in the header),
    CONTENT#5739(         field.),
      BREAK#5740,
    CONTENT#5741(      3. If multiple content-codings are acceptable, then the acceptable),
    CONTENT#5742(         content-coding with the highest non-zero qvalue is preferred.),
      BREAK#5743,
    CONTENT#5744(      4. The "identity" content-coding is always acceptable, unless),
    CONTENT#5745(         specifically refused because the Accept-Encoding field includes),
    CONTENT#5746(         "identity;q=0", or because the field includes "*;q=0" and does),
    CONTENT#5747(         not explicitly include the "identity" content-coding. If the),
    CONTENT#5748(         Accept-Encoding field-value is empty, then only the "identity"),
    CONTENT#5749(         encoding is acceptable.),
      BREAK#5750,
    CONTENT#5751(   If an Accept-Encoding field is present in a request, and if the),
    CONTENT#5752(   server cannot send a response which is acceptable according to the),
    CONTENT#5753(   Accept-Encoding header, then the server SHOULD send an error response),
    CONTENT#5754(   with the 406 (Not Acceptable) status code.),
      BREAK#5755,
    CONTENT#5756(   If no Accept-Encoding field is present in a request, the server MAY),
    CONTENT#5757(   assume that the client will accept any content coding. In this case,),
    CONTENT#5758(   if "identity" is one of the available content-codings, then the),
    CONTENT#5759(   server SHOULD use the "identity" content-coding, unless it has),
    CONTENT#5760(   additional information that a different content-coding is meaningful),
    CONTENT#5761(   to the client.),
      BREAK#5762,
    CONTENT#5763(      Note: If the request does not include an Accept-Encoding field,),
    CONTENT#5764(      and if the "identity" content-coding is unavailable, then),
    CONTENT#5765(      content-codings commonly understood by HTTP/1.0 clients (i.e.,),
      BREAK#5766,
      BREAK#5767,
      BREAK#5768,
      BREAK#5770,
      BREAK#5772,
      BREAK#5773,
    CONTENT#5774(      "gzip" and "compress") are preferred; some older clients),
    CONTENT#5775(      improperly display messages sent with other content-codings.  The),
    CONTENT#5776(      server might also make this decision based on information about),
    CONTENT#5777(      the particular user-agent or client.),
      BREAK#5778,
    CONTENT#5779(      Note: Most HTTP/1.0 applications do not recognize or obey qvalues),
    CONTENT#5780(      associated with content-codings. This means that qvalues will not),
    CONTENT#5781(      work and are not permitted with x-gzip or x-compress.),
      BREAK#5782,
    SECTION#5783(id=14.4, title=Accept-Language),
      BREAK#5784,
    CONTENT#5785(   The Accept-Language request-header field is similar to Accept, but),
    CONTENT#5786(   restricts the set of natural languages that are preferred as a),
    CONTENT#5787(   response to the request. Language tags are defined in section 3.10.),
      BREAK#5788,
    CONTENT#5789(       Accept-Language = "Accept-Language" ":"),
    CONTENT#5790(                         1#( language-range [ ";" "q" "=" qvalue ] )),
    CONTENT#5791(       language-range  = ( ( 1*8ALPHA *( "-" 1*8ALPHA ) ) | "*" )),
      BREAK#5792,
    CONTENT#5793(   Each language-range MAY be given an associated quality value which),
    CONTENT#5794(   represents an estimate of the user's preference for the languages),
    CONTENT#5795(   specified by that range. The quality value defaults to "q=1". For),
    CONTENT#5796(   example,),
      BREAK#5797,
    CONTENT#5798(       Accept-Language: da, en-gb;q=0.8, en;q=0.7),
      BREAK#5799,
    CONTENT#5800(   would mean: "I prefer Danish, but will accept British English and),
    CONTENT#5801(   other types of English." A language-range matches a language-tag if),
    CONTENT#5802(   it exactly equals the tag, or if it exactly equals a prefix of the),
    CONTENT#5803(   tag such that the first tag character following the prefix is "-".),
    CONTENT#5804(   The special range "*", if present in the Accept-Language field,),
    CONTENT#5805(   matches every tag not matched by any other range present in the),
    CONTENT#5806(   Accept-Language field.),
      BREAK#5807,
    CONTENT#5808(      Note: This use of a prefix matching rule does not imply that),
    CONTENT#5809(      language tags are assigned to languages in such a way that it is),
    CONTENT#5810(      always true that if a user understands a language with a certain),
    CONTENT#5811(      tag, then this user will also understand all languages with tags),
    CONTENT#5812(      for which this tag is a prefix. The prefix rule simply allows the),
    CONTENT#5813(      use of prefix tags if this is the case.),
      BREAK#5814,
    CONTENT#5815(   The language quality factor assigned to a language-tag by the),
    CONTENT#5816(   Accept-Language field is the quality value of the longest language-),
    CONTENT#5817(   range in the field that matches the language-tag. If no language-),
    CONTENT#5818(   range in the field matches the tag, the language quality factor),
    CONTENT#5819(   assigned is 0. If no Accept-Language header is present in the),
    CONTENT#5820(   request, the server),
      BREAK#5821,
      BREAK#5822,
      BREAK#5823,
      BREAK#5824,
      BREAK#5826,
      BREAK#5828,
      BREAK#5829,
    CONTENT#5830(   SHOULD assume that all languages are equally acceptable. If an),
    CONTENT#5831(   Accept-Language header is present, then all languages which are),
    CONTENT#5832(   assigned a quality factor greater than 0 are acceptable.),
      BREAK#5833,
    CONTENT#5834(   It might be contrary to the privacy expectations of the user to send),
    CONTENT#5835(   an Accept-Language header with the complete linguistic preferences of),
    CONTENT#5836(   the user in every request. For a discussion of this issue, see),
    CONTENT#5837(   section 15.1.4.),
      BREAK#5838,
    CONTENT#5839(   As intelligibility is highly dependent on the individual user, it is),
    CONTENT#5840(   recommended that client applications make the choice of linguistic),
    CONTENT#5841(   preference available to the user. If the choice is not made),
    CONTENT#5842(   available, then the Accept-Language header field MUST NOT be given in),
    CONTENT#5843(   the request.),
      BREAK#5844,
    CONTENT#5845(      Note: When making the choice of linguistic preference available to),
    CONTENT#5846(      the user, we remind implementors of  the fact that users are not),
    CONTENT#5847(      familiar with the details of language matching as described above,),
    CONTENT#5848(      and should provide appropriate guidance. As an example, users),
    CONTENT#5849(      might assume that on selecting "en-gb", they will be served any),
    CONTENT#5850(      kind of English document if British English is not available. A),
    CONTENT#5851(      user agent might suggest in such a case to add "en" to get the),
    CONTENT#5852(      best matching behavior.),
      BREAK#5853,
    SECTION#5854(id=14.5, title=Accept-Ranges),
      BREAK#5855,
    CONTENT#5856(      The Accept-Ranges response-header field allows the server to),
    CONTENT#5857(      indicate its acceptance of range requests for a resource:),
      BREAK#5858,
    CONTENT#5859(          Accept-Ranges     = "Accept-Ranges" ":" acceptable-ranges),
    CONTENT#5860(          acceptable-ranges = 1#range-unit | "none"),
      BREAK#5861,
    CONTENT#5862(      Origin servers that accept byte-range requests MAY send),
      BREAK#5863,
    CONTENT#5864(          Accept-Ranges: bytes),
      BREAK#5865,
    CONTENT#5866(      but are not required to do so. Clients MAY generate byte-range),
    CONTENT#5867(      requests without having received this header for the resource),
    CONTENT#5868(      involved. Range units are defined in section 3.12.),
      BREAK#5869,
    CONTENT#5870(      Servers that do not accept any kind of range request for a),
    CONTENT#5871(      resource MAY send),
      BREAK#5872,
    CONTENT#5873(          Accept-Ranges: none),
      BREAK#5874,
    CONTENT#5875(      to advise the client not to attempt a range request.),
      BREAK#5876,
      BREAK#5877,
      BREAK#5878,
      BREAK#5879,
      BREAK#5880,
      BREAK#5882,
      BREAK#5884,
      BREAK#5885,
    SECTION#5886(id=14.6, title=Age),
      BREAK#5887,
    CONTENT#5888(      The Age response-header field conveys the sender's estimate of the),
    CONTENT#5889(      amount of time since the response (or its revalidation) was),
    CONTENT#5890(      generated at the origin server. A cached response is "fresh" if),
    CONTENT#5891(      its age does not exceed its freshness lifetime. Age values are),
    CONTENT#5892(      calculated as specified in section 13.2.3.),
      BREAK#5893,
    CONTENT#5894(           Age = "Age" ":" age-value),
    CONTENT#5895(           age-value = delta-seconds),
      BREAK#5896,
    CONTENT#5897(      Age values are non-negative decimal integers, representing time in),
    CONTENT#5898(      seconds.),
      BREAK#5899,
    CONTENT#5900(      If a cache receives a value larger than the largest positive),
    CONTENT#5901(      integer it can represent, or if any of its age calculations),
    CONTENT#5902(      overflows, it MUST transmit an Age header with a value of),
    CONTENT#5903(      2147483648 (2^31). An HTTP/1.1 server that includes a cache MUST),
    CONTENT#5904(      include an Age header field in every response generated from its),
    CONTENT#5905(      own cache. Caches SHOULD use an arithmetic type of at least 31),
    CONTENT#5906(      bits of range.),
      BREAK#5907,
    SECTION#5908(id=14.7, title=Allow),
      BREAK#5909,
    CONTENT#5910(      The Allow entity-header field lists the set of methods supported),
    CONTENT#5911(      by the resource identified by the Request-URI. The purpose of this),
    CONTENT#5912(      field is strictly to inform the recipient of valid methods),
    CONTENT#5913(      associated with the resource. An Allow header field MUST be),
    CONTENT#5914(      present in a 405 (Method Not Allowed) response.),
      BREAK#5915,
    CONTENT#5916(          Allow   = "Allow" ":" #Method),
      BREAK#5917,
    CONTENT#5918(      Example of use:),
      BREAK#5919,
    CONTENT#5920(          Allow: GET, HEAD, PUT),
      BREAK#5921,
    CONTENT#5922(      This field cannot prevent a client from trying other methods.),
    CONTENT#5923(      However, the indications given by the Allow header field value),
    CONTENT#5924(      SHOULD be followed. The actual set of allowed methods is defined),
    CONTENT#5925(      by the origin server at the time of each request.),
      BREAK#5926,
    CONTENT#5927(      The Allow header field MAY be provided with a PUT request to),
    CONTENT#5928(      recommend the methods to be supported by the new or modified),
    CONTENT#5929(      resource. The server is not required to support these methods and),
    CONTENT#5930(      SHOULD include an Allow header in the response giving the actual),
    CONTENT#5931(      supported methods.),
      BREAK#5932,
      BREAK#5933,
      BREAK#5934,
      BREAK#5935,
      BREAK#5936,
      BREAK#5938,
      BREAK#5940,
      BREAK#5941,
    CONTENT#5942(      A proxy MUST NOT modify the Allow header field even if it does not),
    CONTENT#5943(      understand all the methods specified, since the user agent might),
    CONTENT#5944(      have other means of communicating with the origin server.),
      BREAK#5945,
    SECTION#5946(id=14.8, title=Authorization),
      BREAK#5947,
    CONTENT#5948(      A user agent that wishes to authenticate itself with a server--),
    CONTENT#5949(      usually, but not necessarily, after receiving a 401 response--does),
    CONTENT#5950(      so by including an Authorization request-header field with the),
    CONTENT#5951(      request.  The Authorization field value consists of credentials),
    CONTENT#5952(      containing the authentication information of the user agent for),
    CONTENT#5953(      the realm of the resource being requested.),
      BREAK#5954,
    CONTENT#5955(          Authorization  = "Authorization" ":" credentials),
      BREAK#5956,
    CONTENT#5957(      HTTP access authentication is described in "HTTP Authentication:),
    CONTENT#5958(      Basic and Digest Access Authentication" [43]. If a request is),
    CONTENT#5959(      authenticated and a realm specified, the same credentials SHOULD),
    CONTENT#5960(      be valid for all other requests within this realm (assuming that),
    CONTENT#5961(      the authentication scheme itself does not require otherwise, such),
    CONTENT#5962(      as credentials that vary according to a challenge value or using),
    CONTENT#5963(      synchronized clocks).),
      BREAK#5964,
    CONTENT#5965(      When a shared cache (see section 13.7) receives a request),
    CONTENT#5966(      containing an Authorization field, it MUST NOT return the),
    CONTENT#5967(      corresponding response as a reply to any other request, unless one),
    CONTENT#5968(      of the following specific exceptions holds:),
      BREAK#5969,
    CONTENT#5970(      1. If the response includes the "s-maxage" cache-control),
    CONTENT#5971(         directive, the cache MAY use that response in replying to a),
    CONTENT#5972(         subsequent request. But (if the specified maximum age has),
    CONTENT#5973(         passed) a proxy cache MUST first revalidate it with the origin),
    CONTENT#5974(         server, using the request-headers from the new request to allow),
    CONTENT#5975(         the origin server to authenticate the new request. (This is the),
    CONTENT#5976(         defined behavior for s-maxage.) If the response includes "s-),
    CONTENT#5977(         maxage=0", the proxy MUST always revalidate it before re-using),
    CONTENT#5978(         it.),
      BREAK#5979,
    CONTENT#5980(      2. If the response includes the "must-revalidate" cache-control),
    CONTENT#5981(         directive, the cache MAY use that response in replying to a),
    CONTENT#5982(         subsequent request. But if the response is stale, all caches),
    CONTENT#5983(         MUST first revalidate it with the origin server, using the),
    CONTENT#5984(         request-headers from the new request to allow the origin server),
    CONTENT#5985(         to authenticate the new request.),
      BREAK#5986,
    CONTENT#5987(      3. If the response includes the "public" cache-control directive,),
    CONTENT#5988(         it MAY be returned in reply to any subsequent request.),
      BREAK#5989,
      BREAK#5990,
      BREAK#5991,
      BREAK#5992,
      BREAK#5994,
      BREAK#5996,
      BREAK#5997,
    SECTION#5998(id=14.9, title=Cache-Control),
      BREAK#5999,
    CONTENT#6000(   The Cache-Control general-header field is used to specify directives),
    CONTENT#6001(   that MUST be obeyed by all caching mechanisms along the),
    CONTENT#6002(   request/response chain. The directives specify behavior intended to),
    CONTENT#6003(   prevent caches from adversely interfering with the request or),
    CONTENT#6004(   response. These directives typically override the default caching),
    CONTENT#6005(   algorithms. Cache directives are unidirectional in that the presence),
    CONTENT#6006(   of a directive in a request does not imply that the same directive is),
    CONTENT#6007(   to be given in the response.),
      BREAK#6008,
    CONTENT#6009(      Note that HTTP/1.0 caches might not implement Cache-Control and),
    CONTENT#6010(      might only implement Pragma: no-cache (see section 14.32).),
      BREAK#6011,
    CONTENT#6012(   Cache directives MUST be passed through by a proxy or gateway),
    CONTENT#6013(   application, regardless of their significance to that application,),
    CONTENT#6014(   since the directives might be applicable to all recipients along the),
    CONTENT#6015(   request/response chain. It is not possible to specify a cache-),
    CONTENT#6016(   directive for a specific cache.),
      BREAK#6017,
    CONTENT#6018(    Cache-Control   = "Cache-Control" ":" 1#cache-directive),
      BREAK#6019,
    CONTENT#6020(    cache-directive = cache-request-directive),
    CONTENT#6021(         | cache-response-directive),
      BREAK#6022,
    CONTENT#6023(    cache-request-directive =),
    CONTENT#6024(           "no-cache"                          ; Section 14.9.1),
    CONTENT#6025(         | "no-store"                          ; Section 14.9.2),
    CONTENT#6026(         | "max-age" "=" delta-seconds         ; Section 14.9.3, 14.9.4),
    CONTENT#6027(         | "max-stale" [ "=" delta-seconds ]   ; Section 14.9.3),
    CONTENT#6028(         | "min-fresh" "=" delta-seconds       ; Section 14.9.3),
    CONTENT#6029(         | "no-transform"                      ; Section 14.9.5),
    CONTENT#6030(         | "only-if-cached"                    ; Section 14.9.4),
    CONTENT#6031(         | cache-extension                     ; Section 14.9.6),
      BREAK#6032,
    CONTENT#6033(     cache-response-directive =),
    CONTENT#6034(           "public"                               ; Section 14.9.1),
    CONTENT#6035(         | "private" [ "=" <"> 1#field-name <"> ] ; Section 14.9.1),
    CONTENT#6036(         | "no-cache" [ "=" <"> 1#field-name <"> ]; Section 14.9.1),
    CONTENT#6037(         | "no-store"                             ; Section 14.9.2),
    CONTENT#6038(         | "no-transform"                         ; Section 14.9.5),
    CONTENT#6039(         | "must-revalidate"                      ; Section 14.9.4),
    CONTENT#6040(         | "proxy-revalidate"                     ; Section 14.9.4),
    CONTENT#6041(         | "max-age" "=" delta-seconds            ; Section 14.9.3),
    CONTENT#6042(         | "s-maxage" "=" delta-seconds           ; Section 14.9.3),
    CONTENT#6043(         | cache-extension                        ; Section 14.9.6),
      BREAK#6044,
    CONTENT#6045(    cache-extension = token [ "=" ( token | quoted-string ) ]),
      BREAK#6046,
      BREAK#6047,
      BREAK#6048,
      BREAK#6050,
      BREAK#6052,
      BREAK#6053,
    CONTENT#6054(   When a directive appears without any 1#field-name parameter, the),
    CONTENT#6055(   directive applies to the entire request or response. When such a),
    CONTENT#6056(   directive appears with a 1#field-name parameter, it applies only to),
    CONTENT#6057(   the named field or fields, and not to the rest of the request or),
    CONTENT#6058(   response. This mechanism supports extensibility; implementations of),
    CONTENT#6059(   future versions of the HTTP protocol might apply these directives to),
    CONTENT#6060(   header fields not defined in HTTP/1.1.),
      BREAK#6061,
    CONTENT#6062(   The cache-control directives can be broken down into these general),
    CONTENT#6063(   categories:),
      BREAK#6064,
    CONTENT#6065(      - Restrictions on what are cacheable; these may only be imposed by),
    CONTENT#6066(        the origin server.),
      BREAK#6067,
    CONTENT#6068(      - Restrictions on what may be stored by a cache; these may be),
    CONTENT#6069(        imposed by either the origin server or the user agent.),
      BREAK#6070,
    CONTENT#6071(      - Modifications of the basic expiration mechanism; these may be),
    CONTENT#6072(        imposed by either the origin server or the user agent.),
      BREAK#6073,
    CONTENT#6074(      - Controls over cache revalidation and reload; these may only be),
    CONTENT#6075(        imposed by a user agent.),
      BREAK#6076,
    CONTENT#6077(      - Control over transformation of entities.),
      BREAK#6078,
    CONTENT#6079(      - Extensions to the caching system.),
      BREAK#6080,
    SECTION#6081(id=14.9.1, title=What is Cacheable),
      BREAK#6082,
    CONTENT#6083(   By default, a response is cacheable if the requirements of the),
    CONTENT#6084(   request method, request header fields, and the response status),
    CONTENT#6085(   indicate that it is cacheable. Section 13.4 summarizes these defaults),
    CONTENT#6086(   for cacheability. The following Cache-Control response directives),
    CONTENT#6087(   allow an origin server to override the default cacheability of a),
    CONTENT#6088(   response:),
      BREAK#6089,
    CONTENT#6090(   public),
    CONTENT#6091(      Indicates that the response MAY be cached by any cache, even if it),
    CONTENT#6092(      would normally be non-cacheable or cacheable only within a non-),
    CONTENT#6093(      shared cache. (See also Authorization, section 14.8, for),
    CONTENT#6094(      additional details.)),
      BREAK#6095,
    CONTENT#6096(   private),
    CONTENT#6097(      Indicates that all or part of the response message is intended for),
    CONTENT#6098(      a single user and MUST NOT be cached by a shared cache. This),
    CONTENT#6099(      allows an origin server to state that the specified parts of the),
      BREAK#6100,
      BREAK#6101,
      BREAK#6102,
      BREAK#6103,
      BREAK#6104,
      BREAK#6106,
      BREAK#6108,
      BREAK#6109,
    CONTENT#6110(      response are intended for only one user and are not a valid),
    CONTENT#6111(      response for requests by other users. A private (non-shared) cache),
    CONTENT#6112(      MAY cache the response.),
      BREAK#6113,
    CONTENT#6114(       Note: This usage of the word private only controls where the),
    CONTENT#6115(       response may be cached, and cannot ensure the privacy of the),
    CONTENT#6116(       message content.),
      BREAK#6117,
    CONTENT#6118(   no-cache),
    CONTENT#6119(       If the no-cache directive does not specify a field-name, then a),
    CONTENT#6120(      cache MUST NOT use the response to satisfy a subsequent request),
    CONTENT#6121(      without successful revalidation with the origin server. This),
    CONTENT#6122(      allows an origin server to prevent caching even by caches that),
    CONTENT#6123(      have been configured to return stale responses to client requests.),
      BREAK#6124,
    CONTENT#6125(      If the no-cache directive does specify one or more field-names,),
    CONTENT#6126(      then a cache MAY use the response to satisfy a subsequent request,),
    CONTENT#6127(      subject to any other restrictions on caching. However, the),
    CONTENT#6128(      specified field-name(s) MUST NOT be sent in the response to a),
    CONTENT#6129(      subsequent request without successful revalidation with the origin),
    CONTENT#6130(      server. This allows an origin server to prevent the re-use of),
    CONTENT#6131(      certain header fields in a response, while still allowing caching),
    CONTENT#6132(      of the rest of the response.),
      BREAK#6133,
    CONTENT#6134(       Note: Most HTTP/1.0 caches will not recognize or obey this),
    CONTENT#6135(       directive.),
      BREAK#6136,
    SECTION#6137(id=14.9.2, title=What May be Stored by Caches),
      BREAK#6138,
    CONTENT#6139(   no-store),
    CONTENT#6140(      The purpose of the no-store directive is to prevent the),
    CONTENT#6141(      inadvertent release or retention of sensitive information (for),
    CONTENT#6142(      example, on backup tapes). The no-store directive applies to the),
    CONTENT#6143(      entire message, and MAY be sent either in a response or in a),
    CONTENT#6144(      request. If sent in a request, a cache MUST NOT store any part of),
    CONTENT#6145(      either this request or any response to it. If sent in a response,),
    CONTENT#6146(      a cache MUST NOT store any part of either this response or the),
    CONTENT#6147(      request that elicited it. This directive applies to both non-),
    CONTENT#6148(      shared and shared caches. "MUST NOT store" in this context means),
    CONTENT#6149(      that the cache MUST NOT intentionally store the information in),
    CONTENT#6150(      non-volatile storage, and MUST make a best-effort attempt to),
    CONTENT#6151(      remove the information from volatile storage as promptly as),
    CONTENT#6152(      possible after forwarding it.),
      BREAK#6153,
    CONTENT#6154(      Even when this directive is associated with a response, users),
    CONTENT#6155(      might explicitly store such a response outside of the caching),
    CONTENT#6156(      system (e.g., with a "Save As" dialog). History buffers MAY store),
    CONTENT#6157(      such responses as part of their normal operation.),
      BREAK#6158,
      BREAK#6159,
      BREAK#6160,
      BREAK#6162,
      BREAK#6164,
      BREAK#6165,
    CONTENT#6166(      The purpose of this directive is to meet the stated requirements),
    CONTENT#6167(      of certain users and service authors who are concerned about),
    CONTENT#6168(      accidental releases of information via unanticipated accesses to),
    CONTENT#6169(      cache data structures. While the use of this directive might),
    CONTENT#6170(      improve privacy in some cases, we caution that it is NOT in any),
    CONTENT#6171(      way a reliable or sufficient mechanism for ensuring privacy. In),
    CONTENT#6172(      particular, malicious or compromised caches might not recognize or),
    CONTENT#6173(      obey this directive, and communications networks might be),
    CONTENT#6174(      vulnerable to eavesdropping.),
      BREAK#6175,
    SECTION#6176(id=14.9.3, title=Modifications of the Basic Expiration Mechanism),
      BREAK#6177,
    CONTENT#6178(   The expiration time of an entity MAY be specified by the origin),
    CONTENT#6179(   server using the Expires header (see section 14.21). Alternatively,),
    CONTENT#6180(   it MAY be specified using the max-age directive in a response. When),
    CONTENT#6181(   the max-age cache-control directive is present in a cached response,),
    CONTENT#6182(   the response is stale if its current age is greater than the age),
    CONTENT#6183(   value given (in seconds) at the time of a new request for that),
    CONTENT#6184(   resource. The max-age directive on a response implies that the),
    CONTENT#6185(   response is cacheable (i.e., "public") unless some other, more),
    CONTENT#6186(   restrictive cache directive is also present.),
      BREAK#6187,
    CONTENT#6188(   If a response includes both an Expires header and a max-age),
    CONTENT#6189(   directive, the max-age directive overrides the Expires header, even),
    CONTENT#6190(   if the Expires header is more restrictive. This rule allows an origin),
    CONTENT#6191(   server to provide, for a given response, a longer expiration time to),
    CONTENT#6192(   an HTTP/1.1 (or later) cache than to an HTTP/1.0 cache. This might be),
    CONTENT#6193(   useful if certain HTTP/1.0 caches improperly calculate ages or),
    CONTENT#6194(   expiration times, perhaps due to desynchronized clocks.),
      BREAK#6195,
    CONTENT#6196(   Many HTTP/1.0 cache implementations will treat an Expires value that),
    CONTENT#6197(   is less than or equal to the response Date value as being equivalent),
    CONTENT#6198(   to the Cache-Control response directive "no-cache". If an HTTP/1.1),
    CONTENT#6199(   cache receives such a response, and the response does not include a),
    CONTENT#6200(   Cache-Control header field, it SHOULD consider the response to be),
    CONTENT#6201(   non-cacheable in order to retain compatibility with HTTP/1.0 servers.),
      BREAK#6202,
    CONTENT#6203(       Note: An origin server might wish to use a relatively new HTTP),
    CONTENT#6204(       cache control feature, such as the "private" directive, on a),
    CONTENT#6205(       network including older caches that do not understand that),
    CONTENT#6206(       feature. The origin server will need to combine the new feature),
    CONTENT#6207(       with an Expires field whose value is less than or equal to the),
    CONTENT#6208(       Date value. This will prevent older caches from improperly),
    CONTENT#6209(       caching the response.),
      BREAK#6210,
      BREAK#6211,
      BREAK#6212,
      BREAK#6213,
      BREAK#6214,
      BREAK#6215,
      BREAK#6216,
      BREAK#6218,
      BREAK#6220,
      BREAK#6221,
    CONTENT#6222(   s-maxage),
    CONTENT#6223(       If a response includes an s-maxage directive, then for a shared),
    CONTENT#6224(       cache (but not for a private cache), the maximum age specified by),
    CONTENT#6225(       this directive overrides the maximum age specified by either the),
    CONTENT#6226(       max-age directive or the Expires header. The s-maxage directive),
    CONTENT#6227(       also implies the semantics of the proxy-revalidate directive (see),
    CONTENT#6228(       section 14.9.4), i.e., that the shared cache must not use the),
    CONTENT#6229(       entry after it becomes stale to respond to a subsequent request),
    CONTENT#6230(       without first revalidating it with the origin server. The s-),
    CONTENT#6231(       maxage directive is always ignored by a private cache.),
      BREAK#6232,
    CONTENT#6233(   Note that most older caches, not compliant with this specification,),
    CONTENT#6234(   do not implement any cache-control directives. An origin server),
    CONTENT#6235(   wishing to use a cache-control directive that restricts, but does not),
    CONTENT#6236(   prevent, caching by an HTTP/1.1-compliant cache MAY exploit the),
    CONTENT#6237(   requirement that the max-age directive overrides the Expires header,),
    CONTENT#6238(   and the fact that pre-HTTP/1.1-compliant caches do not observe the),
    CONTENT#6239(   max-age directive.),
      BREAK#6240,
    CONTENT#6241(   Other directives allow a user agent to modify the basic expiration),
    CONTENT#6242(   mechanism. These directives MAY be specified on a request:),
      BREAK#6243,
    CONTENT#6244(   max-age),
    CONTENT#6245(      Indicates that the client is willing to accept a response whose),
    CONTENT#6246(      age is no greater than the specified time in seconds. Unless max-),
    CONTENT#6247(      stale directive is also included, the client is not willing to),
    CONTENT#6248(      accept a stale response.),
      BREAK#6249,
    CONTENT#6250(   min-fresh),
    CONTENT#6251(      Indicates that the client is willing to accept a response whose),
    CONTENT#6252(      freshness lifetime is no less than its current age plus the),
    CONTENT#6253(      specified time in seconds. That is, the client wants a response),
    CONTENT#6254(      that will still be fresh for at least the specified number of),
    CONTENT#6255(      seconds.),
      BREAK#6256,
    CONTENT#6257(   max-stale),
    CONTENT#6258(      Indicates that the client is willing to accept a response that has),
    CONTENT#6259(      exceeded its expiration time. If max-stale is assigned a value,),
    CONTENT#6260(      then the client is willing to accept a response that has exceeded),
    CONTENT#6261(      its expiration time by no more than the specified number of),
    CONTENT#6262(      seconds. If no value is assigned to max-stale, then the client is),
    CONTENT#6263(      willing to accept a stale response of any age.),
      BREAK#6264,
    CONTENT#6265(   If a cache returns a stale response, either because of a max-stale),
    CONTENT#6266(   directive on a request, or because the cache is configured to),
    CONTENT#6267(   override the expiration time of a response, the cache MUST attach a),
    CONTENT#6268(   Warning header to the stale response, using Warning 110 (Response is),
    CONTENT#6269(   stale).),
      BREAK#6270,
      BREAK#6271,
      BREAK#6272,
      BREAK#6274,
      BREAK#6276,
      BREAK#6277,
    CONTENT#6278(   A cache MAY be configured to return stale responses without),
    CONTENT#6279(   validation, but only if this does not conflict with any "MUST"-level),
    CONTENT#6280(   requirements concerning cache validation (e.g., a "must-revalidate"),
    CONTENT#6281(   cache-control directive).),
      BREAK#6282,
    CONTENT#6283(   If both the new request and the cached entry include "max-age"),
    CONTENT#6284(   directives, then the lesser of the two values is used for determining),
    CONTENT#6285(   the freshness of the cached entry for that request.),
      BREAK#6286,
    SECTION#6287(id=14.9.4, title=Cache Revalidation and Reload Controls),
      BREAK#6288,
    CONTENT#6289(   Sometimes a user agent might want or need to insist that a cache),
    CONTENT#6290(   revalidate its cache entry with the origin server (and not just with),
    CONTENT#6291(   the next cache along the path to the origin server), or to reload its),
    CONTENT#6292(   cache entry from the origin server. End-to-end revalidation might be),
    CONTENT#6293(   necessary if either the cache or the origin server has overestimated),
    CONTENT#6294(   the expiration time of the cached response. End-to-end reload may be),
    CONTENT#6295(   necessary if the cache entry has become corrupted for some reason.),
      BREAK#6296,
    CONTENT#6297(   End-to-end revalidation may be requested either when the client does),
    CONTENT#6298(   not have its own local cached copy, in which case we call it),
    CONTENT#6299(   "unspecified end-to-end revalidation", or when the client does have a),
    CONTENT#6300(   local cached copy, in which case we call it "specific end-to-end),
    CONTENT#6301(   revalidation."),
      BREAK#6302,
    CONTENT#6303(   The client can specify these three kinds of action using Cache-),
    CONTENT#6304(   Control request directives:),
      BREAK#6305,
    CONTENT#6306(   End-to-end reload),
    CONTENT#6307(      The request includes a "no-cache" cache-control directive or, for),
    CONTENT#6308(      compatibility with HTTP/1.0 clients, "Pragma: no-cache". Field),
    CONTENT#6309(      names MUST NOT be included with the no-cache directive in a),
    CONTENT#6310(      request. The server MUST NOT use a cached copy when responding to),
    CONTENT#6311(      such a request.),
      BREAK#6312,
    CONTENT#6313(   Specific end-to-end revalidation),
    CONTENT#6314(      The request includes a "max-age=0" cache-control directive, which),
    CONTENT#6315(      forces each cache along the path to the origin server to),
    CONTENT#6316(      revalidate its own entry, if any, with the next cache or server.),
    CONTENT#6317(      The initial request includes a cache-validating conditional with),
    CONTENT#6318(      the client's current validator.),
      BREAK#6319,
    CONTENT#6320(   Unspecified end-to-end revalidation),
    CONTENT#6321(      The request includes "max-age=0" cache-control directive, which),
    CONTENT#6322(      forces each cache along the path to the origin server to),
    CONTENT#6323(      revalidate its own entry, if any, with the next cache or server.),
    CONTENT#6324(      The initial request does not include a cache-validating),
      BREAK#6325,
      BREAK#6326,
      BREAK#6327,
      BREAK#6328,
      BREAK#6330,
      BREAK#6332,
      BREAK#6333,
    CONTENT#6334(      conditional; the first cache along the path (if any) that holds a),
    CONTENT#6335(      cache entry for this resource includes a cache-validating),
    CONTENT#6336(      conditional with its current validator.),
      BREAK#6337,
    CONTENT#6338(   max-age),
    CONTENT#6339(      When an intermediate cache is forced, by means of a max-age=0),
    CONTENT#6340(      directive, to revalidate its own cache entry, and the client has),
    CONTENT#6341(      supplied its own validator in the request, the supplied validator),
    CONTENT#6342(      might differ from the validator currently stored with the cache),
    CONTENT#6343(      entry. In this case, the cache MAY use either validator in making),
    CONTENT#6344(      its own request without affecting semantic transparency.),
      BREAK#6345,
    CONTENT#6346(      However, the choice of validator might affect performance. The),
    CONTENT#6347(      best approach is for the intermediate cache to use its own),
    CONTENT#6348(      validator when making its request. If the server replies with 304),
    CONTENT#6349(      (Not Modified), then the cache can return its now validated copy),
    CONTENT#6350(      to the client with a 200 (OK) response. If the server replies with),
    CONTENT#6351(      a new entity and cache validator, however, the intermediate cache),
    CONTENT#6352(      can compare the returned validator with the one provided in the),
    CONTENT#6353(      client's request, using the strong comparison function. If the),
    CONTENT#6354(      client's validator is equal to the origin server's, then the),
    CONTENT#6355(      intermediate cache simply returns 304 (Not Modified). Otherwise,),
    CONTENT#6356(      it returns the new entity with a 200 (OK) response.),
      BREAK#6357,
    CONTENT#6358(      If a request includes the no-cache directive, it SHOULD NOT),
    CONTENT#6359(      include min-fresh, max-stale, or max-age.),
      BREAK#6360,
    CONTENT#6361(   only-if-cached),
    CONTENT#6362(      In some cases, such as times of extremely poor network),
    CONTENT#6363(      connectivity, a client may want a cache to return only those),
    CONTENT#6364(      responses that it currently has stored, and not to reload or),
    CONTENT#6365(      revalidate with the origin server. To do this, the client may),
    CONTENT#6366(      include the only-if-cached directive in a request. If it receives),
    CONTENT#6367(      this directive, a cache SHOULD either respond using a cached entry),
    CONTENT#6368(      that is consistent with the other constraints of the request, or),
    CONTENT#6369(      respond with a 504 (Gateway Timeout) status. However, if a group),
    CONTENT#6370(      of caches is being operated as a unified system with good internal),
    CONTENT#6371(      connectivity, such a request MAY be forwarded within that group of),
    CONTENT#6372(      caches.),
      BREAK#6373,
    CONTENT#6374(   must-revalidate),
    CONTENT#6375(      Because a cache MAY be configured to ignore a server's specified),
    CONTENT#6376(      expiration time, and because a client request MAY include a max-),
    CONTENT#6377(      stale directive (which has a similar effect), the protocol also),
    CONTENT#6378(      includes a mechanism for the origin server to require revalidation),
    CONTENT#6379(      of a cache entry on any subsequent use. When the must-revalidate),
    CONTENT#6380(      directive is present in a response received by a cache, that cache),
    CONTENT#6381(      MUST NOT use the entry after it becomes stale to respond to a),
      BREAK#6382,
      BREAK#6383,
      BREAK#6384,
      BREAK#6386,
      BREAK#6388,
      BREAK#6389,
    CONTENT#6390(      subsequent request without first revalidating it with the origin),
    CONTENT#6391(      server. (I.e., the cache MUST do an end-to-end revalidation every),
    CONTENT#6392(      time, if, based solely on the origin server's Expires or max-age),
    CONTENT#6393(      value, the cached response is stale.)),
      BREAK#6394,
    CONTENT#6395(      The must-revalidate directive is necessary to support reliable),
    CONTENT#6396(      operation for certain protocol features. In all circumstances an),
    CONTENT#6397(      HTTP/1.1 cache MUST obey the must-revalidate directive; in),
    CONTENT#6398(      particular, if the cache cannot reach the origin server for any),
    CONTENT#6399(      reason, it MUST generate a 504 (Gateway Timeout) response.),
      BREAK#6400,
    CONTENT#6401(      Servers SHOULD send the must-revalidate directive if and only if),
    CONTENT#6402(      failure to revalidate a request on the entity could result in),
    CONTENT#6403(      incorrect operation, such as a silently unexecuted financial),
    CONTENT#6404(      transaction. Recipients MUST NOT take any automated action that),
    CONTENT#6405(      violates this directive, and MUST NOT automatically provide an),
    CONTENT#6406(      unvalidated copy of the entity if revalidation fails.),
      BREAK#6407,
    CONTENT#6408(      Although this is not recommended, user agents operating under),
    CONTENT#6409(      severe connectivity constraints MAY violate this directive but, if),
    CONTENT#6410(      so, MUST explicitly warn the user that an unvalidated response has),
    CONTENT#6411(      been provided. The warning MUST be provided on each unvalidated),
    CONTENT#6412(      access, and SHOULD require explicit user confirmation.),
      BREAK#6413,
    CONTENT#6414(   proxy-revalidate),
    CONTENT#6415(      The proxy-revalidate directive has the same meaning as the must-),
    CONTENT#6416(      revalidate directive, except that it does not apply to non-shared),
    CONTENT#6417(      user agent caches. It can be used on a response to an),
    CONTENT#6418(      authenticated request to permit the user's cache to store and),
    CONTENT#6419(      later return the response without needing to revalidate it (since),
    CONTENT#6420(      it has already been authenticated once by that user), while still),
    CONTENT#6421(      requiring proxies that service many users to revalidate each time),
    CONTENT#6422(      (in order to make sure that each user has been authenticated).),
    CONTENT#6423(      Note that such authenticated responses also need the public cache),
    CONTENT#6424(      control directive in order to allow them to be cached at all.),
      BREAK#6425,
    SECTION#6426(id=14.9.5, title=No-Transform Directive),
      BREAK#6427,
    CONTENT#6428(   no-transform),
    CONTENT#6429(      Implementors of intermediate caches (proxies) have found it useful),
    CONTENT#6430(      to convert the media type of certain entity bodies. A non-),
    CONTENT#6431(      transparent proxy might, for example, convert between image),
    CONTENT#6432(      formats in order to save cache space or to reduce the amount of),
    CONTENT#6433(      traffic on a slow link.),
      BREAK#6434,
    CONTENT#6435(      Serious operational problems occur, however, when these),
    CONTENT#6436(      transformations are applied to entity bodies intended for certain),
    CONTENT#6437(      kinds of applications. For example, applications for medical),
      BREAK#6438,
      BREAK#6439,
      BREAK#6440,
      BREAK#6442,
      BREAK#6444,
      BREAK#6445,
    CONTENT#6446(      imaging, scientific data analysis and those using end-to-end),
    CONTENT#6447(      authentication, all depend on receiving an entity body that is bit),
    CONTENT#6448(      for bit identical to the original entity-body.),
      BREAK#6449,
    CONTENT#6450(      Therefore, if a message includes the no-transform directive, an),
    CONTENT#6451(      intermediate cache or proxy MUST NOT change those headers that are),
    CONTENT#6452(      listed in section 13.5.2 as being subject to the no-transform),
    CONTENT#6453(      directive. This implies that the cache or proxy MUST NOT change),
    CONTENT#6454(      any aspect of the entity-body that is specified by these headers,),
    CONTENT#6455(      including the value of the entity-body itself.),
      BREAK#6456,
    SECTION#6457(id=14.9.6, title=Cache Control Extensions),
      BREAK#6458,
    CONTENT#6459(   The Cache-Control header field can be extended through the use of one),
    CONTENT#6460(   or more cache-extension tokens, each with an optional assigned value.),
    CONTENT#6461(   Informational extensions (those which do not require a change in),
    CONTENT#6462(   cache behavior) MAY be added without changing the semantics of other),
    CONTENT#6463(   directives. Behavioral extensions are designed to work by acting as),
    CONTENT#6464(   modifiers to the existing base of cache directives. Both the new),
    CONTENT#6465(   directive and the standard directive are supplied, such that),
    CONTENT#6466(   applications which do not understand the new directive will default),
    CONTENT#6467(   to the behavior specified by the standard directive, and those that),
    CONTENT#6468(   understand the new directive will recognize it as modifying the),
    CONTENT#6469(   requirements associated with the standard directive. In this way,),
    CONTENT#6470(   extensions to the cache-control directives can be made without),
    CONTENT#6471(   requiring changes to the base protocol.),
      BREAK#6472,
    CONTENT#6473(   This extension mechanism depends on an HTTP cache obeying all of the),
    CONTENT#6474(   cache-control directives defined for its native HTTP-version, obeying),
    CONTENT#6475(   certain extensions, and ignoring all directives that it does not),
    CONTENT#6476(   understand.),
      BREAK#6477,
    CONTENT#6478(   For example, consider a hypothetical new response directive called),
    CONTENT#6479(   community which acts as a modifier to the private directive. We),
    CONTENT#6480(   define this new directive to mean that, in addition to any non-shared),
    CONTENT#6481(   cache, any cache which is shared only by members of the community),
    CONTENT#6482(   named within its value may cache the response. An origin server),
    CONTENT#6483(   wishing to allow the UCI community to use an otherwise private),
    CONTENT#6484(   response in their shared cache(s) could do so by including),
      BREAK#6485,
    CONTENT#6486(       Cache-Control: private, community="UCI"),
      BREAK#6487,
    CONTENT#6488(   A cache seeing this header field will act correctly even if the cache),
    CONTENT#6489(   does not understand the community cache-extension, since it will also),
    CONTENT#6490(   see and understand the private directive and thus default to the safe),
    CONTENT#6491(   behavior.),
      BREAK#6492,
      BREAK#6493,
      BREAK#6494,
      BREAK#6495,
      BREAK#6496,
      BREAK#6498,
      BREAK#6500,
      BREAK#6501,
    CONTENT#6502(   Unrecognized cache-directives MUST be ignored; it is assumed that any),
    CONTENT#6503(   cache-directive likely to be unrecognized by an HTTP/1.1 cache will),
    CONTENT#6504(   be combined with standard directives (or the response's default),
    CONTENT#6505(   cacheability) such that the cache behavior will remain minimally),
    CONTENT#6506(   correct even if the cache does not understand the extension(s).),
      BREAK#6507,
    SECTION#6508(id=14.10, title=Connection),
      BREAK#6509,
    CONTENT#6510(   The Connection general-header field allows the sender to specify),
    CONTENT#6511(   options that are desired for that particular connection and MUST NOT),
    CONTENT#6512(   be communicated by proxies over further connections.),
      BREAK#6513,
    CONTENT#6514(   The Connection header has the following grammar:),
      BREAK#6515,
    CONTENT#6516(       Connection = "Connection" ":" 1#(connection-token)),
    CONTENT#6517(       connection-token  = token),
      BREAK#6518,
    CONTENT#6519(   HTTP/1.1 proxies MUST parse the Connection header field before a),
    CONTENT#6520(   message is forwarded and, for each connection-token in this field,),
    CONTENT#6521(   remove any header field(s) from the message with the same name as the),
    CONTENT#6522(   connection-token. Connection options are signaled by the presence of),
    CONTENT#6523(   a connection-token in the Connection header field, not by any),
    CONTENT#6524(   corresponding additional header field(s), since the additional header),
    CONTENT#6525(   field may not be sent if there are no parameters associated with that),
    CONTENT#6526(   connection option.),
      BREAK#6527,
    CONTENT#6528(   Message headers listed in the Connection header MUST NOT include),
    CONTENT#6529(   end-to-end headers, such as Cache-Control.),
      BREAK#6530,
    CONTENT#6531(   HTTP/1.1 defines the "close" connection option for the sender to),
    CONTENT#6532(   signal that the connection will be closed after completion of the),
    CONTENT#6533(   response. For example,),
      BREAK#6534,
    CONTENT#6535(       Connection: close),
      BREAK#6536,
    CONTENT#6537(   in either the request or the response header fields indicates that),
    CONTENT#6538(   the connection SHOULD NOT be considered `persistent' (section 8.1)),
    CONTENT#6539(   after the current request/response is complete.),
      BREAK#6540,
    CONTENT#6541(   HTTP/1.1 applications that do not support persistent connections MUST),
    CONTENT#6542(   include the "close" connection option in every message.),
      BREAK#6543,
    CONTENT#6544(   A system receiving an HTTP/1.0 (or lower-version) message that),
    CONTENT#6545(   includes a Connection header MUST, for each connection-token in this),
    CONTENT#6546(   field, remove and ignore any header field(s) from the message with),
    CONTENT#6547(   the same name as the connection-token. This protects against mistaken),
    CONTENT#6548(   forwarding of such header fields by pre-HTTP/1.1 proxies. See section),
    CONTENT#6549(   19.6.2.),
      BREAK#6550,
      BREAK#6551,
      BREAK#6552,
      BREAK#6554,
      BREAK#6556,
      BREAK#6557,
    SECTION#6558(id=14.11, title=Content-Encoding),
      BREAK#6559,
    CONTENT#6560(   The Content-Encoding entity-header field is used as a modifier to the),
    CONTENT#6561(   media-type. When present, its value indicates what additional content),
    CONTENT#6562(   codings have been applied to the entity-body, and thus what decoding),
    CONTENT#6563(   mechanisms must be applied in order to obtain the media-type),
    CONTENT#6564(   referenced by the Content-Type header field. Content-Encoding is),
    CONTENT#6565(   primarily used to allow a document to be compressed without losing),
    CONTENT#6566(   the identity of its underlying media type.),
      BREAK#6567,
    CONTENT#6568(       Content-Encoding  = "Content-Encoding" ":" 1#content-coding),
      BREAK#6569,
    CONTENT#6570(   Content codings are defined in section 3.5. An example of its use is),
      BREAK#6571,
    CONTENT#6572(       Content-Encoding: gzip),
      BREAK#6573,
    CONTENT#6574(   The content-coding is a characteristic of the entity identified by),
    CONTENT#6575(   the Request-URI. Typically, the entity-body is stored with this),
    CONTENT#6576(   encoding and is only decoded before rendering or analogous usage.),
    CONTENT#6577(   However, a non-transparent proxy MAY modify the content-coding if the),
    CONTENT#6578(   new coding is known to be acceptable to the recipient, unless the),
    CONTENT#6579(   "no-transform" cache-control directive is present in the message.),
      BREAK#6580,
    CONTENT#6581(   If the content-coding of an entity is not "identity", then the),
    CONTENT#6582(   response MUST include a Content-Encoding entity-header (section),
    CONTENT#6583(   14.11) that lists the non-identity content-coding(s) used.),
      BREAK#6584,
    CONTENT#6585(   If the content-coding of an entity in a request message is not),
    CONTENT#6586(   acceptable to the origin server, the server SHOULD respond with a),
    CONTENT#6587(   status code of 415 (Unsupported Media Type).),
      BREAK#6588,
    CONTENT#6589(   If multiple encodings have been applied to an entity, the content),
    CONTENT#6590(   codings MUST be listed in the order in which they were applied.),
    CONTENT#6591(   Additional information about the encoding parameters MAY be provided),
    CONTENT#6592(   by other entity-header fields not defined by this specification.),
      BREAK#6593,
    SECTION#6594(id=14.12, title=Content-Language),
      BREAK#6595,
    CONTENT#6596(   The Content-Language entity-header field describes the natural),
    CONTENT#6597(   language(s) of the intended audience for the enclosed entity. Note),
    CONTENT#6598(   that this might not be equivalent to all the languages used within),
    CONTENT#6599(   the entity-body.),
      BREAK#6600,
    CONTENT#6601(       Content-Language  = "Content-Language" ":" 1#language-tag),
      BREAK#6602,
      BREAK#6603,
      BREAK#6604,
      BREAK#6605,
      BREAK#6606,
      BREAK#6607,
      BREAK#6608,
      BREAK#6610,
      BREAK#6612,
      BREAK#6613,
    CONTENT#6614(   Language tags are defined in section 3.10. The primary purpose of),
    CONTENT#6615(   Content-Language is to allow a user to identify and differentiate),
    CONTENT#6616(   entities according to the user's own preferred language. Thus, if the),
    CONTENT#6617(   body content is intended only for a Danish-literate audience, the),
    CONTENT#6618(   appropriate field is),
      BREAK#6619,
    CONTENT#6620(       Content-Language: da),
      BREAK#6621,
    CONTENT#6622(   If no Content-Language is specified, the default is that the content),
    CONTENT#6623(   is intended for all language audiences. This might mean that the),
    CONTENT#6624(   sender does not consider it to be specific to any natural language,),
    CONTENT#6625(   or that the sender does not know for which language it is intended.),
      BREAK#6626,
    CONTENT#6627(   Multiple languages MAY be listed for content that is intended for),
    CONTENT#6628(   multiple audiences. For example, a rendition of the "Treaty of),
    CONTENT#6629(   Waitangi," presented simultaneously in the original Maori and English),
    CONTENT#6630(   versions, would call for),
      BREAK#6631,
    CONTENT#6632(       Content-Language: mi, en),
      BREAK#6633,
    CONTENT#6634(   However, just because multiple languages are present within an entity),
    CONTENT#6635(   does not mean that it is intended for multiple linguistic audiences.),
    CONTENT#6636(   An example would be a beginner's language primer, such as "A First),
    CONTENT#6637(   Lesson in Latin," which is clearly intended to be used by an),
    CONTENT#6638(   English-literate audience. In this case, the Content-Language would),
    CONTENT#6639(   properly only include "en".),
      BREAK#6640,
    CONTENT#6641(   Content-Language MAY be applied to any media type -- it is not),
    CONTENT#6642(   limited to textual documents.),
      BREAK#6643,
    SECTION#6644(id=14.13, title=Content-Length),
      BREAK#6645,
    CONTENT#6646(   The Content-Length entity-header field indicates the size of the),
    CONTENT#6647(   entity-body, in decimal number of OCTETs, sent to the recipient or,),
    CONTENT#6648(   in the case of the HEAD method, the size of the entity-body that),
    CONTENT#6649(   would have been sent had the request been a GET.),
      BREAK#6650,
    CONTENT#6651(       Content-Length    = "Content-Length" ":" 1*DIGIT),
      BREAK#6652,
    CONTENT#6653(   An example is),
      BREAK#6654,
    CONTENT#6655(       Content-Length: 3495),
      BREAK#6656,
    CONTENT#6657(   Applications SHOULD use this field to indicate the transfer-length of),
    CONTENT#6658(   the message-body, unless this is prohibited by the rules in section),
    CONTENT#6659(   4.4.),
      BREAK#6660,
      BREAK#6661,
      BREAK#6662,
      BREAK#6663,
      BREAK#6664,
      BREAK#6666,
      BREAK#6668,
      BREAK#6669,
    CONTENT#6670(   Any Content-Length greater than or equal to zero is a valid value.),
    CONTENT#6671(   Section 4.4 describes how to determine the length of a message-body),
    CONTENT#6672(   if a Content-Length is not given.),
      BREAK#6673,
    CONTENT#6674(   Note that the meaning of this field is significantly different from),
    CONTENT#6675(   the corresponding definition in MIME, where it is an optional field),
    CONTENT#6676(   used within the "message/external-body" content-type. In HTTP, it),
    CONTENT#6677(   SHOULD be sent whenever the message's length can be determined prior),
    CONTENT#6678(   to being transferred, unless this is prohibited by the rules in),
    CONTENT#6679(   section 4.4.),
      BREAK#6680,
    SECTION#6681(id=14.14, title=Content-Location),
      BREAK#6682,
    CONTENT#6683(   The Content-Location entity-header field MAY be used to supply the),
    CONTENT#6684(   resource location for the entity enclosed in the message when that),
    CONTENT#6685(   entity is accessible from a location separate from the requested),
    CONTENT#6686(   resource's URI. A server SHOULD provide a Content-Location for the),
    CONTENT#6687(   variant corresponding to the response entity; especially in the case),
    CONTENT#6688(   where a resource has multiple entities associated with it, and those),
    CONTENT#6689(   entities actually have separate locations by which they might be),
    CONTENT#6690(   individually accessed, the server SHOULD provide a Content-Location),
    CONTENT#6691(   for the particular variant which is returned.),
      BREAK#6692,
    CONTENT#6693(       Content-Location = "Content-Location" ":"),
    CONTENT#6694(                         ( absoluteURI | relativeURI )),
      BREAK#6695,
    CONTENT#6696(   The value of Content-Location also defines the base URI for the),
    CONTENT#6697(   entity.),
      BREAK#6698,
    CONTENT#6699(   The Content-Location value is not a replacement for the original),
    CONTENT#6700(   requested URI; it is only a statement of the location of the resource),
    CONTENT#6701(   corresponding to this particular entity at the time of the request.),
    CONTENT#6702(   Future requests MAY specify the Content-Location URI as the request-),
    CONTENT#6703(   URI if the desire is to identify the source of that particular),
    CONTENT#6704(   entity.),
      BREAK#6705,
    CONTENT#6706(   A cache cannot assume that an entity with a Content-Location),
    CONTENT#6707(   different from the URI used to retrieve it can be used to respond to),
    CONTENT#6708(   later requests on that Content-Location URI. However, the Content-),
    CONTENT#6709(   Location can be used to differentiate between multiple entities),
    CONTENT#6710(   retrieved from a single requested resource, as described in section),
    CONTENT#6711(   13.6.),
      BREAK#6712,
    CONTENT#6713(   If the Content-Location is a relative URI, the relative URI is),
    CONTENT#6714(   interpreted relative to the Request-URI.),
      BREAK#6715,
    CONTENT#6716(   The meaning of the Content-Location header in PUT or POST requests is),
    CONTENT#6717(   undefined; servers are free to ignore it in those cases.),
      BREAK#6718,
      BREAK#6719,
      BREAK#6720,
      BREAK#6722,
      BREAK#6724,
      BREAK#6725,
    SECTION#6726(id=14.15, title=Content-MD5),
      BREAK#6727,
    CONTENT#6728(   The Content-MD5 entity-header field, as defined in RFC 1864 [23], is),
    CONTENT#6729(   an MD5 digest of the entity-body for the purpose of providing an),
    CONTENT#6730(   end-to-end message integrity check (MIC) of the entity-body. (Note: a),
    CONTENT#6731(   MIC is good for detecting accidental modification of the entity-body),
    CONTENT#6732(   in transit, but is not proof against malicious attacks.)),
      BREAK#6733,
    CONTENT#6734(        Content-MD5   = "Content-MD5" ":" md5-digest),
    CONTENT#6735(        md5-digest   = <base64 of 128 bit MD5 digest as per RFC 1864>),
      BREAK#6736,
    CONTENT#6737(   The Content-MD5 header field MAY be generated by an origin server or),
    CONTENT#6738(   client to function as an integrity check of the entity-body. Only),
    CONTENT#6739(   origin servers or clients MAY generate the Content-MD5 header field;),
    CONTENT#6740(   proxies and gateways MUST NOT generate it, as this would defeat its),
    CONTENT#6741(   value as an end-to-end integrity check. Any recipient of the entity-),
    CONTENT#6742(   body, including gateways and proxies, MAY check that the digest value),
    CONTENT#6743(   in this header field matches that of the entity-body as received.),
      BREAK#6744,
    CONTENT#6745(   The MD5 digest is computed based on the content of the entity-body,),
    CONTENT#6746(   including any content-coding that has been applied, but not including),
    CONTENT#6747(   any transfer-encoding applied to the message-body. If the message is),
    CONTENT#6748(   received with a transfer-encoding, that encoding MUST be removed),
    CONTENT#6749(   prior to checking the Content-MD5 value against the received entity.),
      BREAK#6750,
    CONTENT#6751(   This has the result that the digest is computed on the octets of the),
    CONTENT#6752(   entity-body exactly as, and in the order that, they would be sent if),
    CONTENT#6753(   no transfer-encoding were being applied.),
      BREAK#6754,
    CONTENT#6755(   HTTP extends RFC 1864 to permit the digest to be computed for MIME),
    CONTENT#6756(   composite media-types (e.g., multipart/* and message/rfc822), but),
    CONTENT#6757(   this does not change how the digest is computed as defined in the),
    CONTENT#6758(   preceding paragraph.),
      BREAK#6759,
    CONTENT#6760(   There are several consequences of this. The entity-body for composite),
    CONTENT#6761(   types MAY contain many body-parts, each with its own MIME and HTTP),
    CONTENT#6762(   headers (including Content-MD5, Content-Transfer-Encoding, and),
    CONTENT#6763(   Content-Encoding headers). If a body-part has a Content-Transfer-),
    CONTENT#6764(   Encoding or Content-Encoding header, it is assumed that the content),
    CONTENT#6765(   of the body-part has had the encoding applied, and the body-part is),
    CONTENT#6766(   included in the Content-MD5 digest as is -- i.e., after the),
    CONTENT#6767(   application. The Transfer-Encoding header field is not allowed within),
    CONTENT#6768(   body-parts.),
      BREAK#6769,
    CONTENT#6770(   Conversion of all line breaks to CRLF MUST NOT be done before),
    CONTENT#6771(   computing or checking the digest: the line break convention used in),
    CONTENT#6772(   the text actually transmitted MUST be left unaltered when computing),
    CONTENT#6773(   the digest.),
      BREAK#6774,
      BREAK#6775,
      BREAK#6776,
      BREAK#6778,
      BREAK#6780,
      BREAK#6781,
    CONTENT#6782(      Note: while the definition of Content-MD5 is exactly the same for),
    CONTENT#6783(      HTTP as in RFC 1864 for MIME entity-bodies, there are several ways),
    CONTENT#6784(      in which the application of Content-MD5 to HTTP entity-bodies),
    CONTENT#6785(      differs from its application to MIME entity-bodies. One is that),
    CONTENT#6786(      HTTP, unlike MIME, does not use Content-Transfer-Encoding, and),
    CONTENT#6787(      does use Transfer-Encoding and Content-Encoding. Another is that),
    CONTENT#6788(      HTTP more frequently uses binary content types than MIME, so it is),
    CONTENT#6789(      worth noting that, in such cases, the byte order used to compute),
    CONTENT#6790(      the digest is the transmission byte order defined for the type.),
    CONTENT#6791(      Lastly, HTTP allows transmission of text types with any of several),
    CONTENT#6792(      line break conventions and not just the canonical form using CRLF.),
      BREAK#6793,
    SECTION#6794(id=14.16, title=Content-Range),
      BREAK#6795,
    CONTENT#6796(   The Content-Range entity-header is sent with a partial entity-body to),
    CONTENT#6797(   specify where in the full entity-body the partial body should be),
    CONTENT#6798(   applied. Range units are defined in section 3.12.),
      BREAK#6799,
    CONTENT#6800(       Content-Range = "Content-Range" ":" content-range-spec),
      BREAK#6801,
    CONTENT#6802(       content-range-spec      = byte-content-range-spec),
    CONTENT#6803(       byte-content-range-spec = bytes-unit SP),
    CONTENT#6804(                                 byte-range-resp-spec "/"),
    CONTENT#6805(                                 ( instance-length | "*" )),
      BREAK#6806,
    CONTENT#6807(       byte-range-resp-spec = (first-byte-pos "-" last-byte-pos)),
    CONTENT#6808(                                      | "*"),
    CONTENT#6809(       instance-length           = 1*DIGIT),
      BREAK#6810,
    CONTENT#6811(   The header SHOULD indicate the total length of the full entity-body,),
    CONTENT#6812(   unless this length is unknown or difficult to determine. The asterisk),
    CONTENT#6813(   "*" character means that the instance-length is unknown at the time),
    CONTENT#6814(   when the response was generated.),
      BREAK#6815,
    CONTENT#6816(   Unlike byte-ranges-specifier values (see section 14.35.1), a byte-),
    CONTENT#6817(   range-resp-spec MUST only specify one range, and MUST contain),
    CONTENT#6818(   absolute byte positions for both the first and last byte of the),
    CONTENT#6819(   range.),
      BREAK#6820,
    CONTENT#6821(   A byte-content-range-spec with a byte-range-resp-spec whose last-),
    CONTENT#6822(   byte-pos value is less than its first-byte-pos value, or whose),
    CONTENT#6823(   instance-length value is less than or equal to its last-byte-pos),
    CONTENT#6824(   value, is invalid. The recipient of an invalid byte-content-range-),
    CONTENT#6825(   spec MUST ignore it and any content transferred along with it.),
      BREAK#6826,
    CONTENT#6827(   A server sending a response with status code 416 (Requested range not),
    CONTENT#6828(   satisfiable) SHOULD include a Content-Range field with a byte-range-),
    CONTENT#6829(   resp-spec of "*". The instance-length specifies the current length of),
      BREAK#6830,
      BREAK#6831,
      BREAK#6832,
      BREAK#6834,
      BREAK#6836,
      BREAK#6837,
    CONTENT#6838(   the selected resource. A response with status code 206 (Partial),
    CONTENT#6839(   Content) MUST NOT include a Content-Range field with a byte-range-),
    CONTENT#6840(   resp-spec of "*".),
      BREAK#6841,
    CONTENT#6842(   Examples of byte-content-range-spec values, assuming that the entity),
    CONTENT#6843(   contains a total of 1234 bytes:),
      BREAK#6844,
    CONTENT#6845(      . The first 500 bytes:),
    CONTENT#6846(       bytes 0-499/1234),
      BREAK#6847,
    CONTENT#6848(      . The second 500 bytes:),
    CONTENT#6849(       bytes 500-999/1234),
      BREAK#6850,
    CONTENT#6851(      . All except for the first 500 bytes:),
    CONTENT#6852(       bytes 500-1233/1234),
      BREAK#6853,
    CONTENT#6854(      . The last 500 bytes:),
    CONTENT#6855(       bytes 734-1233/1234),
      BREAK#6856,
    CONTENT#6857(   When an HTTP message includes the content of a single range (for),
    CONTENT#6858(   example, a response to a request for a single range, or to a request),
    CONTENT#6859(   for a set of ranges that overlap without any holes), this content is),
    CONTENT#6860(   transmitted with a Content-Range header, and a Content-Length header),
    CONTENT#6861(   showing the number of bytes actually transferred. For example,),
      BREAK#6862,
    CONTENT#6863(       HTTP/1.1 206 Partial content),
    CONTENT#6864(       Date: Wed, 15 Nov 1995 06:25:24 GMT),
    CONTENT#6865(       Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT),
    CONTENT#6866(       Content-Range: bytes 21010-47021/47022),
    CONTENT#6867(       Content-Length: 26012),
    CONTENT#6868(       Content-Type: image/gif),
      BREAK#6869,
    CONTENT#6870(   When an HTTP message includes the content of multiple ranges (for),
    CONTENT#6871(   example, a response to a request for multiple non-overlapping),
    CONTENT#6872(   ranges), these are transmitted as a multipart message. The multipart),
    CONTENT#6873(   media type used for this purpose is "multipart/byteranges" as defined),
    CONTENT#6874(   in appendix 19.2. See appendix 19.6.3 for a compatibility issue.),
      BREAK#6875,
    CONTENT#6876(   A response to a request for a single range MUST NOT be sent using the),
    CONTENT#6877(   multipart/byteranges media type.  A response to a request for),
    CONTENT#6878(   multiple ranges, whose result is a single range, MAY be sent as a),
    CONTENT#6879(   multipart/byteranges media type with one part. A client that cannot),
    CONTENT#6880(   decode a multipart/byteranges message MUST NOT ask for multiple),
    CONTENT#6881(   byte-ranges in a single request.),
      BREAK#6882,
    CONTENT#6883(   When a client requests multiple byte-ranges in one request, the),
    CONTENT#6884(   server SHOULD return them in the order that they appeared in the),
    CONTENT#6885(   request.),
      BREAK#6886,
      BREAK#6887,
      BREAK#6888,
      BREAK#6890,
      BREAK#6892,
      BREAK#6893,
    CONTENT#6894(   If the server ignores a byte-range-spec because it is syntactically),
    CONTENT#6895(   invalid, the server SHOULD treat the request as if the invalid Range),
    CONTENT#6896(   header field did not exist. (Normally, this means return a 200),
    CONTENT#6897(   response containing the full entity).),
      BREAK#6898,
    CONTENT#6899(   If the server receives a request (other than one including an If-),
    CONTENT#6900(   Range request-header field) with an unsatisfiable Range request-),
    CONTENT#6901(   header field (that is, all of whose byte-range-spec values have a),
    CONTENT#6902(   first-byte-pos value greater than the current length of the selected),
    CONTENT#6903(   resource), it SHOULD return a response code of 416 (Requested range),
    CONTENT#6904(   not satisfiable) (section 10.4.17).),
      BREAK#6905,
    CONTENT#6906(      Note: clients cannot depend on servers to send a 416 (Requested),
    CONTENT#6907(      range not satisfiable) response instead of a 200 (OK) response for),
    CONTENT#6908(      an unsatisfiable Range request-header, since not all servers),
    CONTENT#6909(      implement this request-header.),
      BREAK#6910,
    SECTION#6911(id=14.17, title=Content-Type),
      BREAK#6912,
    CONTENT#6913(   The Content-Type entity-header field indicates the media type of the),
    CONTENT#6914(   entity-body sent to the recipient or, in the case of the HEAD method,),
    CONTENT#6915(   the media type that would have been sent had the request been a GET.),
      BREAK#6916,
    CONTENT#6917(       Content-Type   = "Content-Type" ":" media-type),
      BREAK#6918,
    CONTENT#6919(   Media types are defined in section 3.7. An example of the field is),
      BREAK#6920,
    CONTENT#6921(       Content-Type: text/html; charset=ISO-8859-4),
      BREAK#6922,
    CONTENT#6923(   Further discussion of methods for identifying the media type of an),
    CONTENT#6924(   entity is provided in section 7.2.1.),
      BREAK#6925,
    SECTION#6926(id=14.18, title=Date),
      BREAK#6927,
    CONTENT#6928(   The Date general-header field represents the date and time at which),
    CONTENT#6929(   the message was originated, having the same semantics as orig-date in),
    CONTENT#6930(   RFC 822. The field value is an HTTP-date, as described in section),
    CONTENT#6931(   3.3.1; it MUST be sent in RFC 1123 [8]-date format.),
      BREAK#6932,
    CONTENT#6933(       Date  = "Date" ":" HTTP-date),
      BREAK#6934,
    CONTENT#6935(   An example is),
      BREAK#6936,
    CONTENT#6937(       Date: Tue, 15 Nov 1994 08:12:31 GMT),
      BREAK#6938,
    CONTENT#6939(   Origin servers MUST include a Date header field in all responses,),
    CONTENT#6940(   except in these cases:),
      BREAK#6941,
      BREAK#6942,
      BREAK#6943,
      BREAK#6944,
      BREAK#6946,
      BREAK#6948,
      BREAK#6949,
    CONTENT#6950(      1. If the response status code is 100 (Continue) or 101 (Switching),
    CONTENT#6951(         Protocols), the response MAY include a Date header field, at),
    CONTENT#6952(         the server's option.),
      BREAK#6953,
    CONTENT#6954(      2. If the response status code conveys a server error, e.g. 500),
    CONTENT#6955(         (Internal Server Error) or 503 (Service Unavailable), and it is),
    CONTENT#6956(         inconvenient or impossible to generate a valid Date.),
      BREAK#6957,
    CONTENT#6958(      3. If the server does not have a clock that can provide a),
    CONTENT#6959(         reasonable approximation of the current time, its responses),
    CONTENT#6960(         MUST NOT include a Date header field. In this case, the rules),
    CONTENT#6961(         in section 14.18.1 MUST be followed.),
      BREAK#6962,
    CONTENT#6963(   A received message that does not have a Date header field MUST be),
    CONTENT#6964(   assigned one by the recipient if the message will be cached by that),
    CONTENT#6965(   recipient or gatewayed via a protocol which requires a Date. An HTTP),
    CONTENT#6966(   implementation without a clock MUST NOT cache responses without),
    CONTENT#6967(   revalidating them on every use. An HTTP cache, especially a shared),
    CONTENT#6968(   cache, SHOULD use a mechanism, such as NTP [28], to synchronize its),
    CONTENT#6969(   clock with a reliable external standard.),
      BREAK#6970,
    CONTENT#6971(   Clients SHOULD only send a Date header field in messages that include),
    CONTENT#6972(   an entity-body, as in the case of the PUT and POST requests, and even),
    CONTENT#6973(   then it is optional. A client without a clock MUST NOT send a Date),
    CONTENT#6974(   header field in a request.),
      BREAK#6975,
    CONTENT#6976(   The HTTP-date sent in a Date header SHOULD NOT represent a date and),
    CONTENT#6977(   time subsequent to the generation of the message. It SHOULD represent),
    CONTENT#6978(   the best available approximation of the date and time of message),
    CONTENT#6979(   generation, unless the implementation has no means of generating a),
    CONTENT#6980(   reasonably accurate date and time. In theory, the date ought to),
    CONTENT#6981(   represent the moment just before the entity is generated. In),
    CONTENT#6982(   practice, the date can be generated at any time during the message),
    CONTENT#6983(   origination without affecting its semantic value.),
      BREAK#6984,
    SECTION#6985(id=14.18.1, title=Clockless Origin Server Operation),
      BREAK#6986,
    CONTENT#6987(   Some origin server implementations might not have a clock available.),
    CONTENT#6988(   An origin server without a clock MUST NOT assign Expires or Last-),
    CONTENT#6989(   Modified values to a response, unless these values were associated),
    CONTENT#6990(   with the resource by a system or user with a reliable clock. It MAY),
    CONTENT#6991(   assign an Expires value that is known, at or before server),
    CONTENT#6992(   configuration time, to be in the past (this allows "pre-expiration"),
    CONTENT#6993(   of responses without storing separate Expires values for each),
    CONTENT#6994(   resource).),
      BREAK#6995,
      BREAK#6996,
      BREAK#6997,
      BREAK#6998,
      BREAK#6999,
      BREAK#7000,
      BREAK#7002,
      BREAK#7004,
      BREAK#7005,
    SECTION#7006(id=14.19, title=ETag),
      BREAK#7007,
    CONTENT#7008(   The ETag response-header field provides the current value of the),
    CONTENT#7009(   entity tag for the requested variant. The headers used with entity),
    CONTENT#7010(   tags are described in sections 14.24, 14.26 and 14.44. The entity tag),
    CONTENT#7011(   MAY be used for comparison with other entities from the same resource),
    CONTENT#7012(   (see section 13.3.3).),
      BREAK#7013,
    CONTENT#7014(      ETag = "ETag" ":" entity-tag),
      BREAK#7015,
    CONTENT#7016(   Examples:),
      BREAK#7017,
    CONTENT#7018(      ETag: "xyzzy"),
    CONTENT#7019(      ETag: W/"xyzzy"),
    CONTENT#7020(      ETag: ""),
      BREAK#7021,
    SECTION#7022(id=14.20, title=Expect),
      BREAK#7023,
    CONTENT#7024(   The Expect request-header field is used to indicate that particular),
    CONTENT#7025(   server behaviors are required by the client.),
      BREAK#7026,
    CONTENT#7027(      Expect       =  "Expect" ":" 1#expectation),
      BREAK#7028,
    CONTENT#7029(      expectation  =  "100-continue" | expectation-extension),
    CONTENT#7030(      expectation-extension =  token [ "=" ( token | quoted-string )),
    CONTENT#7031(                               *expect-params ]),
    CONTENT#7032(      expect-params =  ";" token [ "=" ( token | quoted-string ) ]),
      BREAK#7033,
      BREAK#7034,
    CONTENT#7035(   A server that does not understand or is unable to comply with any of),
    CONTENT#7036(   the expectation values in the Expect field of a request MUST respond),
    CONTENT#7037(   with appropriate error status. The server MUST respond with a 417),
    CONTENT#7038(   (Expectation Failed) status if any of the expectations cannot be met),
    CONTENT#7039(   or, if there are other problems with the request, some other 4xx),
    CONTENT#7040(   status.),
      BREAK#7041,
    CONTENT#7042(   This header field is defined with extensible syntax to allow for),
    CONTENT#7043(   future extensions. If a server receives a request containing an),
    CONTENT#7044(   Expect field that includes an expectation-extension that it does not),
    CONTENT#7045(   support, it MUST respond with a 417 (Expectation Failed) status.),
      BREAK#7046,
    CONTENT#7047(   Comparison of expectation values is case-insensitive for unquoted),
    CONTENT#7048(   tokens (including the 100-continue token), and is case-sensitive for),
    CONTENT#7049(   quoted-string expectation-extensions.),
      BREAK#7050,
      BREAK#7051,
      BREAK#7052,
      BREAK#7053,
      BREAK#7054,
      BREAK#7055,
      BREAK#7056,
      BREAK#7058,
      BREAK#7060,
      BREAK#7061,
    CONTENT#7062(   The Expect mechanism is hop-by-hop: that is, an HTTP/1.1 proxy MUST),
    CONTENT#7063(   return a 417 (Expectation Failed) status if it receives a request),
    CONTENT#7064(   with an expectation that it cannot meet. However, the Expect),
    CONTENT#7065(   request-header itself is end-to-end; it MUST be forwarded if the),
    CONTENT#7066(   request is forwarded.),
      BREAK#7067,
    CONTENT#7068(   Many older HTTP/1.0 and HTTP/1.1 applications do not understand the),
    CONTENT#7069(   Expect header.),
      BREAK#7070,
    CONTENT#7071(   See section 8.2.3 for the use of the 100 (continue) status.),
      BREAK#7072,
    SECTION#7073(id=14.21, title=Expires),
      BREAK#7074,
    CONTENT#7075(   The Expires entity-header field gives the date/time after which the),
    CONTENT#7076(   response is considered stale. A stale cache entry may not normally be),
    CONTENT#7077(   returned by a cache (either a proxy cache or a user agent cache)),
    CONTENT#7078(   unless it is first validated with the origin server (or with an),
    CONTENT#7079(   intermediate cache that has a fresh copy of the entity). See section),
    CONTENT#7080(   13.2 for further discussion of the expiration model.),
      BREAK#7081,
    CONTENT#7082(   The presence of an Expires field does not imply that the original),
    CONTENT#7083(   resource will change or cease to exist at, before, or after that),
    CONTENT#7084(   time.),
      BREAK#7085,
    CONTENT#7086(   The format is an absolute date and time as defined by HTTP-date in),
    CONTENT#7087(   section 3.3.1; it MUST be in RFC 1123 date format:),
      BREAK#7088,
    CONTENT#7089(      Expires = "Expires" ":" HTTP-date),
      BREAK#7090,
    CONTENT#7091(   An example of its use is),
      BREAK#7092,
    CONTENT#7093(      Expires: Thu, 01 Dec 1994 16:00:00 GMT),
      BREAK#7094,
    CONTENT#7095(      Note: if a response includes a Cache-Control field with the max-),
    CONTENT#7096(      age directive (see section 14.9.3), that directive overrides the),
    CONTENT#7097(      Expires field.),
      BREAK#7098,
    CONTENT#7099(   HTTP/1.1 clients and caches MUST treat other invalid date formats,),
    CONTENT#7100(   especially including the value "0", as in the past (i.e., "already),
    CONTENT#7101(   expired").),
      BREAK#7102,
    CONTENT#7103(   To mark a response as "already expired," an origin server sends an),
    CONTENT#7104(   Expires date that is equal to the Date header value. (See the rules),
    CONTENT#7105(   for expiration calculations in section 13.2.4.)),
      BREAK#7106,
      BREAK#7107,
      BREAK#7108,
      BREAK#7109,
      BREAK#7110,
      BREAK#7111,
      BREAK#7112,
      BREAK#7114,
      BREAK#7116,
      BREAK#7117,
    CONTENT#7118(   To mark a response as "never expires," an origin server sends an),
    CONTENT#7119(   Expires date approximately one year from the time the response is),
    CONTENT#7120(   sent. HTTP/1.1 servers SHOULD NOT send Expires dates more than one),
    CONTENT#7121(   year in the future.),
      BREAK#7122,
    CONTENT#7123(   The presence of an Expires header field with a date value of some),
    CONTENT#7124(   time in the future on a response that otherwise would by default be),
    CONTENT#7125(   non-cacheable indicates that the response is cacheable, unless),
    CONTENT#7126(   indicated otherwise by a Cache-Control header field (section 14.9).),
      BREAK#7127,
    SECTION#7128(id=14.22, title=From),
      BREAK#7129,
    CONTENT#7130(   The From request-header field, if given, SHOULD contain an Internet),
    CONTENT#7131(   e-mail address for the human user who controls the requesting user),
    CONTENT#7132(   agent. The address SHOULD be machine-usable, as defined by "mailbox"),
    CONTENT#7133(   in RFC 822 [9] as updated by RFC 1123 [8]:),
      BREAK#7134,
    CONTENT#7135(       From   = "From" ":" mailbox),
      BREAK#7136,
    CONTENT#7137(   An example is:),
      BREAK#7138,
    CONTENT#7139(       From: webmaster@w3.org),
      BREAK#7140,
    CONTENT#7141(   This header field MAY be used for logging purposes and as a means for),
    CONTENT#7142(   identifying the source of invalid or unwanted requests. It SHOULD NOT),
    CONTENT#7143(   be used as an insecure form of access protection. The interpretation),
    CONTENT#7144(   of this field is that the request is being performed on behalf of the),
    CONTENT#7145(   person given, who accepts responsibility for the method performed. In),
    CONTENT#7146(   particular, robot agents SHOULD include this header so that the),
    CONTENT#7147(   person responsible for running the robot can be contacted if problems),
    CONTENT#7148(   occur on the receiving end.),
      BREAK#7149,
    CONTENT#7150(   The Internet e-mail address in this field MAY be separate from the),
    CONTENT#7151(   Internet host which issued the request. For example, when a request),
    CONTENT#7152(   is passed through a proxy the original issuer's address SHOULD be),
    CONTENT#7153(   used.),
      BREAK#7154,
    CONTENT#7155(   The client SHOULD NOT send the From header field without the user's),
    CONTENT#7156(   approval, as it might conflict with the user's privacy interests or),
    CONTENT#7157(   their site's security policy. It is strongly recommended that the),
    CONTENT#7158(   user be able to disable, enable, and modify the value of this field),
    CONTENT#7159(   at any time prior to a request.),
      BREAK#7160,
    SECTION#7161(id=14.23, title=Host),
      BREAK#7162,
    CONTENT#7163(   The Host request-header field specifies the Internet host and port),
    CONTENT#7164(   number of the resource being requested, as obtained from the original),
    CONTENT#7165(   URI given by the user or referring resource (generally an HTTP URL,),
      BREAK#7166,
      BREAK#7167,
      BREAK#7168,
      BREAK#7170,
      BREAK#7172,
      BREAK#7173,
    CONTENT#7174(   as described in section 3.2.2). The Host field value MUST represent),
    CONTENT#7175(   the naming authority of the origin server or gateway given by the),
    CONTENT#7176(   original URL. This allows the origin server or gateway to),
    CONTENT#7177(   differentiate between internally-ambiguous URLs, such as the root "/"),
    CONTENT#7178(   URL of a server for multiple host names on a single IP address.),
      BREAK#7179,
    CONTENT#7180(       Host = "Host" ":" host [ ":" port ] ; Section 3.2.2),
      BREAK#7181,
    CONTENT#7182(   A "host" without any trailing port information implies the default),
    CONTENT#7183(   port for the service requested (e.g., "80" for an HTTP URL). For),
    CONTENT#7184(   example, a request on the origin server for),
    CONTENT#7185(   <http://www.w3.org/pub/WWW/> would properly include:),
      BREAK#7186,
    CONTENT#7187(       GET /pub/WWW/ HTTP/1.1),
    CONTENT#7188(       Host: www.w3.org),
      BREAK#7189,
    CONTENT#7190(   A client MUST include a Host header field in all HTTP/1.1 request),
    CONTENT#7191(   messages . If the requested URI does not include an Internet host),
    CONTENT#7192(   name for the service being requested, then the Host header field MUST),
    CONTENT#7193(   be given with an empty value. An HTTP/1.1 proxy MUST ensure that any),
    CONTENT#7194(   request message it forwards does contain an appropriate Host header),
    CONTENT#7195(   field that identifies the service being requested by the proxy. All),
    CONTENT#7196(   Internet-based HTTP/1.1 servers MUST respond with a 400 (Bad Request)),
    CONTENT#7197(   status code to any HTTP/1.1 request message which lacks a Host header),
    CONTENT#7198(   field.),
      BREAK#7199,
    CONTENT#7200(   See sections 5.2 and 19.6.1.1 for other requirements relating to),
    CONTENT#7201(   Host.),
      BREAK#7202,
    SECTION#7203(id=14.24, title=If-Match),
      BREAK#7204,
    CONTENT#7205(   The If-Match request-header field is used with a method to make it),
    CONTENT#7206(   conditional. A client that has one or more entities previously),
    CONTENT#7207(   obtained from the resource can verify that one of those entities is),
    CONTENT#7208(   current by including a list of their associated entity tags in the),
    CONTENT#7209(   If-Match header field. Entity tags are defined in section 3.11. The),
    CONTENT#7210(   purpose of this feature is to allow efficient updates of cached),
    CONTENT#7211(   information with a minimum amount of transaction overhead. It is also),
    CONTENT#7212(   used, on updating requests, to prevent inadvertent modification of),
    CONTENT#7213(   the wrong version of a resource. As a special case, the value "*"),
    CONTENT#7214(   matches any current entity of the resource.),
      BREAK#7215,
    CONTENT#7216(       If-Match = "If-Match" ":" ( "*" | 1#entity-tag )),
      BREAK#7217,
    CONTENT#7218(   If any of the entity tags match the entity tag of the entity that),
    CONTENT#7219(   would have been returned in the response to a similar GET request),
    CONTENT#7220(   (without the If-Match header) on that resource, or if "*" is given),
      BREAK#7221,
      BREAK#7222,
      BREAK#7223,
      BREAK#7224,
      BREAK#7226,
      BREAK#7228,
      BREAK#7229,
    CONTENT#7230(   and any current entity exists for that resource, then the server MAY),
    CONTENT#7231(   perform the requested method as if the If-Match header field did not),
    CONTENT#7232(   exist.),
      BREAK#7233,
    CONTENT#7234(   A server MUST use the strong comparison function (see section 13.3.3)),
    CONTENT#7235(   to compare the entity tags in If-Match.),
      BREAK#7236,
    CONTENT#7237(   If none of the entity tags match, or if "*" is given and no current),
    CONTENT#7238(   entity exists, the server MUST NOT perform the requested method, and),
    CONTENT#7239(   MUST return a 412 (Precondition Failed) response. This behavior is),
    CONTENT#7240(   most useful when the client wants to prevent an updating method, such),
    CONTENT#7241(   as PUT, from modifying a resource that has changed since the client),
    CONTENT#7242(   last retrieved it.),
      BREAK#7243,
    CONTENT#7244(   If the request would, without the If-Match header field, result in),
    CONTENT#7245(   anything other than a 2xx or 412 status, then the If-Match header),
    CONTENT#7246(   MUST be ignored.),
      BREAK#7247,
    CONTENT#7248(   The meaning of "If-Match: *" is that the method SHOULD be performed),
    CONTENT#7249(   if the representation selected by the origin server (or by a cache,),
    CONTENT#7250(   possibly using the Vary mechanism, see section 14.44) exists, and),
    CONTENT#7251(   MUST NOT be performed if the representation does not exist.),
      BREAK#7252,
    CONTENT#7253(   A request intended to update a resource (e.g., a PUT) MAY include an),
    CONTENT#7254(   If-Match header field to signal that the request method MUST NOT be),
    CONTENT#7255(   applied if the entity corresponding to the If-Match value (a single),
    CONTENT#7256(   entity tag) is no longer a representation of that resource. This),
    CONTENT#7257(   allows the user to indicate that they do not wish the request to be),
    CONTENT#7258(   successful if the resource has been changed without their knowledge.),
    CONTENT#7259(   Examples:),
      BREAK#7260,
    CONTENT#7261(       If-Match: "xyzzy"),
    CONTENT#7262(       If-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"),
    CONTENT#7263(       If-Match: *),
      BREAK#7264,
    CONTENT#7265(   The result of a request having both an If-Match header field and),
    CONTENT#7266(   either an If-None-Match or an If-Modified-Since header fields is),
    CONTENT#7267(   undefined by this specification.),
      BREAK#7268,
    SECTION#7269(id=14.25, title=If-Modified-Since),
      BREAK#7270,
    CONTENT#7271(   The If-Modified-Since request-header field is used with a method to),
    CONTENT#7272(   make it conditional: if the requested variant has not been modified),
    CONTENT#7273(   since the time specified in this field, an entity will not be),
    CONTENT#7274(   returned from the server; instead, a 304 (not modified) response will),
    CONTENT#7275(   be returned without any message-body.),
      BREAK#7276,
    CONTENT#7277(       If-Modified-Since = "If-Modified-Since" ":" HTTP-date),
      BREAK#7278,
      BREAK#7279,
      BREAK#7280,
      BREAK#7282,
      BREAK#7284,
      BREAK#7285,
    CONTENT#7286(   An example of the field is:),
      BREAK#7287,
    CONTENT#7288(       If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT),
      BREAK#7289,
    CONTENT#7290(   A GET method with an If-Modified-Since header and no Range header),
    CONTENT#7291(   requests that the identified entity be transferred only if it has),
    CONTENT#7292(   been modified since the date given by the If-Modified-Since header.),
    CONTENT#7293(   The algorithm for determining this includes the following cases:),
      BREAK#7294,
    CONTENT#7295(      a) If the request would normally result in anything other than a),
    CONTENT#7296(         200 (OK) status, or if the passed If-Modified-Since date is),
    CONTENT#7297(         invalid, the response is exactly the same as for a normal GET.),
    CONTENT#7298(         A date which is later than the server's current time is),
    CONTENT#7299(         invalid.),
      BREAK#7300,
    CONTENT#7301(      b) If the variant has been modified since the If-Modified-Since),
    CONTENT#7302(         date, the response is exactly the same as for a normal GET.),
      BREAK#7303,
    CONTENT#7304(      c) If the variant has not been modified since a valid If-),
    CONTENT#7305(         Modified-Since date, the server SHOULD return a 304 (Not),
    CONTENT#7306(         Modified) response.),
      BREAK#7307,
    CONTENT#7308(   The purpose of this feature is to allow efficient updates of cached),
    CONTENT#7309(   information with a minimum amount of transaction overhead.),
      BREAK#7310,
    CONTENT#7311(      Note: The Range request-header field modifies the meaning of If-),
    CONTENT#7312(      Modified-Since; see section 14.35 for full details.),
      BREAK#7313,
    CONTENT#7314(      Note: If-Modified-Since times are interpreted by the server, whose),
    CONTENT#7315(      clock might not be synchronized with the client.),
      BREAK#7316,
    CONTENT#7317(      Note: When handling an If-Modified-Since header field, some),
    CONTENT#7318(      servers will use an exact date comparison function, rather than a),
    CONTENT#7319(      less-than function, for deciding whether to send a 304 (Not),
    CONTENT#7320(      Modified) response. To get best results when sending an If-),
    CONTENT#7321(      Modified-Since header field for cache validation, clients are),
    CONTENT#7322(      advised to use the exact date string received in a previous Last-),
    CONTENT#7323(      Modified header field whenever possible.),
      BREAK#7324,
    CONTENT#7325(      Note: If a client uses an arbitrary date in the If-Modified-Since),
    CONTENT#7326(      header instead of a date taken from the Last-Modified header for),
    CONTENT#7327(      the same request, the client should be aware of the fact that this),
    CONTENT#7328(      date is interpreted in the server's understanding of time. The),
    CONTENT#7329(      client should consider unsynchronized clocks and rounding problems),
    CONTENT#7330(      due to the different encodings of time between the client and),
    CONTENT#7331(      server. This includes the possibility of race conditions if the),
    CONTENT#7332(      document has changed between the time it was first requested and),
    CONTENT#7333(      the If-Modified-Since date of a subsequent request, and the),
      BREAK#7334,
      BREAK#7335,
      BREAK#7336,
      BREAK#7338,
      BREAK#7340,
      BREAK#7341,
    CONTENT#7342(      possibility of clock-skew-related problems if the If-Modified-),
    CONTENT#7343(      Since date is derived from the client's clock without correction),
    CONTENT#7344(      to the server's clock. Corrections for different time bases),
    CONTENT#7345(      between client and server are at best approximate due to network),
    CONTENT#7346(      latency.),
      BREAK#7347,
    CONTENT#7348(   The result of a request having both an If-Modified-Since header field),
    CONTENT#7349(   and either an If-Match or an If-Unmodified-Since header fields is),
    CONTENT#7350(   undefined by this specification.),
      BREAK#7351,
    SECTION#7352(id=14.26, title=If-None-Match),
      BREAK#7353,
    CONTENT#7354(   The If-None-Match request-header field is used with a method to make),
    CONTENT#7355(   it conditional. A client that has one or more entities previously),
    CONTENT#7356(   obtained from the resource can verify that none of those entities is),
    CONTENT#7357(   current by including a list of their associated entity tags in the),
    CONTENT#7358(   If-None-Match header field. The purpose of this feature is to allow),
    CONTENT#7359(   efficient updates of cached information with a minimum amount of),
    CONTENT#7360(   transaction overhead. It is also used to prevent a method (e.g. PUT)),
    CONTENT#7361(   from inadvertently modifying an existing resource when the client),
    CONTENT#7362(   believes that the resource does not exist.),
      BREAK#7363,
    CONTENT#7364(   As a special case, the value "*" matches any current entity of the),
    CONTENT#7365(   resource.),
      BREAK#7366,
    CONTENT#7367(       If-None-Match = "If-None-Match" ":" ( "*" | 1#entity-tag )),
      BREAK#7368,
    CONTENT#7369(   If any of the entity tags match the entity tag of the entity that),
    CONTENT#7370(   would have been returned in the response to a similar GET request),
    CONTENT#7371(   (without the If-None-Match header) on that resource, or if "*" is),
    CONTENT#7372(   given and any current entity exists for that resource, then the),
    CONTENT#7373(   server MUST NOT perform the requested method, unless required to do),
    CONTENT#7374(   so because the resource's modification date fails to match that),
    CONTENT#7375(   supplied in an If-Modified-Since header field in the request.),
    CONTENT#7376(   Instead, if the request method was GET or HEAD, the server SHOULD),
    CONTENT#7377(   respond with a 304 (Not Modified) response, including the cache-),
    CONTENT#7378(   related header fields (particularly ETag) of one of the entities that),
    CONTENT#7379(   matched. For all other request methods, the server MUST respond with),
    CONTENT#7380(   a status of 412 (Precondition Failed).),
      BREAK#7381,
    CONTENT#7382(   See section 13.3.3 for rules on how to determine if two entities tags),
    CONTENT#7383(   match. The weak comparison function can only be used with GET or HEAD),
    CONTENT#7384(   requests.),
      BREAK#7385,
      BREAK#7386,
      BREAK#7387,
      BREAK#7388,
      BREAK#7389,
      BREAK#7390,
      BREAK#7391,
      BREAK#7392,
      BREAK#7394,
      BREAK#7396,
      BREAK#7397,
    CONTENT#7398(   If none of the entity tags match, then the server MAY perform the),
    CONTENT#7399(   requested method as if the If-None-Match header field did not exist,),
    CONTENT#7400(   but MUST also ignore any If-Modified-Since header field(s) in the),
    CONTENT#7401(   request. That is, if no entity tags match, then the server MUST NOT),
    CONTENT#7402(   return a 304 (Not Modified) response.),
      BREAK#7403,
    CONTENT#7404(   If the request would, without the If-None-Match header field, result),
    CONTENT#7405(   in anything other than a 2xx or 304 status, then the If-None-Match),
    CONTENT#7406(   header MUST be ignored. (See section 13.3.4 for a discussion of),
    CONTENT#7407(   server behavior when both If-Modified-Since and If-None-Match appear),
    CONTENT#7408(   in the same request.)),
      BREAK#7409,
    CONTENT#7410(   The meaning of "If-None-Match: *" is that the method MUST NOT be),
    CONTENT#7411(   performed if the representation selected by the origin server (or by),
    CONTENT#7412(   a cache, possibly using the Vary mechanism, see section 14.44)),
    CONTENT#7413(   exists, and SHOULD be performed if the representation does not exist.),
    CONTENT#7414(   This feature is intended to be useful in preventing races between PUT),
    CONTENT#7415(   operations.),
      BREAK#7416,
    CONTENT#7417(   Examples:),
      BREAK#7418,
    CONTENT#7419(       If-None-Match: "xyzzy"),
    CONTENT#7420(       If-None-Match: W/"xyzzy"),
    CONTENT#7421(       If-None-Match: "xyzzy", "r2d2xxxx", "c3piozzzz"),
    CONTENT#7422(       If-None-Match: W/"xyzzy", W/"r2d2xxxx", W/"c3piozzzz"),
    CONTENT#7423(       If-None-Match: *),
      BREAK#7424,
    CONTENT#7425(   The result of a request having both an If-None-Match header field and),
    CONTENT#7426(   either an If-Match or an If-Unmodified-Since header fields is),
    CONTENT#7427(   undefined by this specification.),
      BREAK#7428,
    SECTION#7429(id=14.27, title=If-Range),
      BREAK#7430,
    CONTENT#7431(   If a client has a partial copy of an entity in its cache, and wishes),
    CONTENT#7432(   to have an up-to-date copy of the entire entity in its cache, it),
    CONTENT#7433(   could use the Range request-header with a conditional GET (using),
    CONTENT#7434(   either or both of If-Unmodified-Since and If-Match.) However, if the),
    CONTENT#7435(   condition fails because the entity has been modified, the client),
    CONTENT#7436(   would then have to make a second request to obtain the entire current),
    CONTENT#7437(   entity-body.),
      BREAK#7438,
    CONTENT#7439(   The If-Range header allows a client to "short-circuit" the second),
    CONTENT#7440(   request. Informally, its meaning is `if the entity is unchanged, send),
    CONTENT#7441(   me the part(s) that I am missing; otherwise, send me the entire new),
    CONTENT#7442(   entity'.),
      BREAK#7443,
    CONTENT#7444(        If-Range = "If-Range" ":" ( entity-tag | HTTP-date )),
      BREAK#7445,
      BREAK#7446,
      BREAK#7447,
      BREAK#7448,
      BREAK#7450,
      BREAK#7452,
      BREAK#7453,
    CONTENT#7454(   If the client has no entity tag for an entity, but does have a Last-),
    CONTENT#7455(   Modified date, it MAY use that date in an If-Range header. (The),
    CONTENT#7456(   server can distinguish between a valid HTTP-date and any form of),
    CONTENT#7457(   entity-tag by examining no more than two characters.) The If-Range),
    CONTENT#7458(   header SHOULD only be used together with a Range header, and MUST be),
    CONTENT#7459(   ignored if the request does not include a Range header, or if the),
    CONTENT#7460(   server does not support the sub-range operation.),
      BREAK#7461,
    CONTENT#7462(   If the entity tag given in the If-Range header matches the current),
    CONTENT#7463(   entity tag for the entity, then the server SHOULD provide the),
    CONTENT#7464(   specified sub-range of the entity using a 206 (Partial content)),
    CONTENT#7465(   response. If the entity tag does not match, then the server SHOULD),
    CONTENT#7466(   return the entire entity using a 200 (OK) response.),
      BREAK#7467,
    SECTION#7468(id=14.28, title=If-Unmodified-Since),
      BREAK#7469,
    CONTENT#7470(   The If-Unmodified-Since request-header field is used with a method to),
    CONTENT#7471(   make it conditional. If the requested resource has not been modified),
    CONTENT#7472(   since the time specified in this field, the server SHOULD perform the),
    CONTENT#7473(   requested operation as if the If-Unmodified-Since header were not),
    CONTENT#7474(   present.),
      BREAK#7475,
    CONTENT#7476(   If the requested variant has been modified since the specified time,),
    CONTENT#7477(   the server MUST NOT perform the requested operation, and MUST return),
    CONTENT#7478(   a 412 (Precondition Failed).),
      BREAK#7479,
    CONTENT#7480(      If-Unmodified-Since = "If-Unmodified-Since" ":" HTTP-date),
      BREAK#7481,
    CONTENT#7482(   An example of the field is:),
      BREAK#7483,
    CONTENT#7484(       If-Unmodified-Since: Sat, 29 Oct 1994 19:43:31 GMT),
      BREAK#7485,
    CONTENT#7486(   If the request normally (i.e., without the If-Unmodified-Since),
    CONTENT#7487(   header) would result in anything other than a 2xx or 412 status, the),
    CONTENT#7488(   If-Unmodified-Since header SHOULD be ignored.),
      BREAK#7489,
    CONTENT#7490(   If the specified date is invalid, the header is ignored.),
      BREAK#7491,
    CONTENT#7492(   The result of a request having both an If-Unmodified-Since header),
    CONTENT#7493(   field and either an If-None-Match or an If-Modified-Since header),
    CONTENT#7494(   fields is undefined by this specification.),
      BREAK#7495,
    SECTION#7496(id=14.29, title=Last-Modified),
      BREAK#7497,
    CONTENT#7498(   The Last-Modified entity-header field indicates the date and time at),
    CONTENT#7499(   which the origin server believes the variant was last modified.),
      BREAK#7500,
    CONTENT#7501(       Last-Modified  = "Last-Modified" ":" HTTP-date),
      BREAK#7502,
      BREAK#7503,
      BREAK#7504,
      BREAK#7506,
      BREAK#7508,
      BREAK#7509,
    CONTENT#7510(   An example of its use is),
      BREAK#7511,
    CONTENT#7512(       Last-Modified: Tue, 15 Nov 1994 12:45:26 GMT),
      BREAK#7513,
    CONTENT#7514(   The exact meaning of this header field depends on the implementation),
    CONTENT#7515(   of the origin server and the nature of the original resource. For),
    CONTENT#7516(   files, it may be just the file system last-modified time. For),
    CONTENT#7517(   entities with dynamically included parts, it may be the most recent),
    CONTENT#7518(   of the set of last-modify times for its component parts. For database),
    CONTENT#7519(   gateways, it may be the last-update time stamp of the record. For),
    CONTENT#7520(   virtual objects, it may be the last time the internal state changed.),
      BREAK#7521,
    CONTENT#7522(   An origin server MUST NOT send a Last-Modified date which is later),
    CONTENT#7523(   than the server's time of message origination. In such cases, where),
    CONTENT#7524(   the resource's last modification would indicate some time in the),
    CONTENT#7525(   future, the server MUST replace that date with the message),
    CONTENT#7526(   origination date.),
      BREAK#7527,
    CONTENT#7528(   An origin server SHOULD obtain the Last-Modified value of the entity),
    CONTENT#7529(   as close as possible to the time that it generates the Date value of),
    CONTENT#7530(   its response. This allows a recipient to make an accurate assessment),
    CONTENT#7531(   of the entity's modification time, especially if the entity changes),
    CONTENT#7532(   near the time that the response is generated.),
      BREAK#7533,
    CONTENT#7534(   HTTP/1.1 servers SHOULD send Last-Modified whenever feasible.),
      BREAK#7535,
    SECTION#7536(id=14.30, title=Location),
      BREAK#7537,
    CONTENT#7538(   The Location response-header field is used to redirect the recipient),
    CONTENT#7539(   to a location other than the Request-URI for completion of the),
    CONTENT#7540(   request or identification of a new resource. For 201 (Created)),
    CONTENT#7541(   responses, the Location is that of the new resource which was created),
    CONTENT#7542(   by the request. For 3xx responses, the location SHOULD indicate the),
    CONTENT#7543(   server's preferred URI for automatic redirection to the resource. The),
    CONTENT#7544(   field value consists of a single absolute URI.),
      BREAK#7545,
    CONTENT#7546(       Location       = "Location" ":" absoluteURI),
      BREAK#7547,
    CONTENT#7548(   An example is:),
      BREAK#7549,
    CONTENT#7550(       Location: http://www.w3.org/pub/WWW/People.html),
      BREAK#7551,
    CONTENT#7552(      Note: The Content-Location header field (section 14.14) differs),
    CONTENT#7553(      from Location in that the Content-Location identifies the original),
    CONTENT#7554(      location of the entity enclosed in the request. It is therefore),
    CONTENT#7555(      possible for a response to contain header fields for both Location),
    CONTENT#7556(      and Content-Location. Also see section 13.10 for cache),
    CONTENT#7557(      requirements of some methods.),
      BREAK#7558,
      BREAK#7559,
      BREAK#7560,
      BREAK#7562,
      BREAK#7564,
      BREAK#7565,
    SECTION#7566(id=14.31, title=Max-Forwards),
      BREAK#7567,
    CONTENT#7568(   The Max-Forwards request-header field provides a mechanism with the),
    CONTENT#7569(   TRACE (section 9.8) and OPTIONS (section 9.2) methods to limit the),
    CONTENT#7570(   number of proxies or gateways that can forward the request to the),
    CONTENT#7571(   next inbound server. This can be useful when the client is attempting),
    CONTENT#7572(   to trace a request chain which appears to be failing or looping in),
    CONTENT#7573(   mid-chain.),
      BREAK#7574,
    CONTENT#7575(       Max-Forwards   = "Max-Forwards" ":" 1*DIGIT),
      BREAK#7576,
    CONTENT#7577(   The Max-Forwards value is a decimal integer indicating the remaining),
    CONTENT#7578(   number of times this request message may be forwarded.),
      BREAK#7579,
    CONTENT#7580(   Each proxy or gateway recipient of a TRACE or OPTIONS request),
    CONTENT#7581(   containing a Max-Forwards header field MUST check and update its),
    CONTENT#7582(   value prior to forwarding the request. If the received value is zero),
    CONTENT#7583(   (0), the recipient MUST NOT forward the request; instead, it MUST),
    CONTENT#7584(   respond as the final recipient. If the received Max-Forwards value is),
    CONTENT#7585(   greater than zero, then the forwarded message MUST contain an updated),
    CONTENT#7586(   Max-Forwards field with a value decremented by one (1).),
      BREAK#7587,
    CONTENT#7588(   The Max-Forwards header field MAY be ignored for all other methods),
    CONTENT#7589(   defined by this specification and for any extension methods for which),
    CONTENT#7590(   it is not explicitly referred to as part of that method definition.),
      BREAK#7591,
    SECTION#7592(id=14.32, title=Pragma),
      BREAK#7593,
    CONTENT#7594(   The Pragma general-header field is used to include implementation-),
    CONTENT#7595(   specific directives that might apply to any recipient along the),
    CONTENT#7596(   request/response chain. All pragma directives specify optional),
    CONTENT#7597(   behavior from the viewpoint of the protocol; however, some systems),
    CONTENT#7598(   MAY require that behavior be consistent with the directives.),
      BREAK#7599,
    CONTENT#7600(       Pragma            = "Pragma" ":" 1#pragma-directive),
    CONTENT#7601(       pragma-directive  = "no-cache" | extension-pragma),
    CONTENT#7602(       extension-pragma  = token [ "=" ( token | quoted-string ) ]),
      BREAK#7603,
    CONTENT#7604(   When the no-cache directive is present in a request message, an),
    CONTENT#7605(   application SHOULD forward the request toward the origin server even),
    CONTENT#7606(   if it has a cached copy of what is being requested. This pragma),
    CONTENT#7607(   directive has the same semantics as the no-cache cache-directive (see),
    CONTENT#7608(   section 14.9) and is defined here for backward compatibility with),
    CONTENT#7609(   HTTP/1.0. Clients SHOULD include both header fields when a no-cache),
    CONTENT#7610(   request is sent to a server not known to be HTTP/1.1 compliant.),
      BREAK#7611,
      BREAK#7612,
      BREAK#7613,
      BREAK#7614,
      BREAK#7615,
      BREAK#7616,
      BREAK#7618,
      BREAK#7620,
      BREAK#7621,
    CONTENT#7622(   Pragma directives MUST be passed through by a proxy or gateway),
    CONTENT#7623(   application, regardless of their significance to that application,),
    CONTENT#7624(   since the directives might be applicable to all recipients along the),
    CONTENT#7625(   request/response chain. It is not possible to specify a pragma for a),
    CONTENT#7626(   specific recipient; however, any pragma directive not relevant to a),
    CONTENT#7627(   recipient SHOULD be ignored by that recipient.),
      BREAK#7628,
    CONTENT#7629(   HTTP/1.1 caches SHOULD treat "Pragma: no-cache" as if the client had),
    CONTENT#7630(   sent "Cache-Control: no-cache". No new Pragma directives will be),
    CONTENT#7631(   defined in HTTP.),
      BREAK#7632,
    CONTENT#7633(      Note: because the meaning of "Pragma: no-cache as a response),
    CONTENT#7634(      header field is not actually specified, it does not provide a),
    CONTENT#7635(      reliable replacement for "Cache-Control: no-cache" in a response),
      BREAK#7636,
    SECTION#7637(id=14.33, title=Proxy-Authenticate),
      BREAK#7638,
    CONTENT#7639(   The Proxy-Authenticate response-header field MUST be included as part),
    CONTENT#7640(   of a 407 (Proxy Authentication Required) response. The field value),
    CONTENT#7641(   consists of a challenge that indicates the authentication scheme and),
    CONTENT#7642(   parameters applicable to the proxy for this Request-URI.),
      BREAK#7643,
    CONTENT#7644(       Proxy-Authenticate  = "Proxy-Authenticate" ":" 1#challenge),
      BREAK#7645,
    CONTENT#7646(   The HTTP access authentication process is described in "HTTP),
    CONTENT#7647(   Authentication: Basic and Digest Access Authentication" [43]. Unlike),
    CONTENT#7648(   WWW-Authenticate, the Proxy-Authenticate header field applies only to),
    CONTENT#7649(   the current connection and SHOULD NOT be passed on to downstream),
    CONTENT#7650(   clients. However, an intermediate proxy might need to obtain its own),
    CONTENT#7651(   credentials by requesting them from the downstream client, which in),
    CONTENT#7652(   some circumstances will appear as if the proxy is forwarding the),
    CONTENT#7653(   Proxy-Authenticate header field.),
      BREAK#7654,
    SECTION#7655(id=14.34, title=Proxy-Authorization),
      BREAK#7656,
    CONTENT#7657(   The Proxy-Authorization request-header field allows the client to),
    CONTENT#7658(   identify itself (or its user) to a proxy which requires),
    CONTENT#7659(   authentication. The Proxy-Authorization field value consists of),
    CONTENT#7660(   credentials containing the authentication information of the user),
    CONTENT#7661(   agent for the proxy and/or realm of the resource being requested.),
      BREAK#7662,
    CONTENT#7663(       Proxy-Authorization     = "Proxy-Authorization" ":" credentials),
      BREAK#7664,
    CONTENT#7665(   The HTTP access authentication process is described in "HTTP),
    CONTENT#7666(   Authentication: Basic and Digest Access Authentication" [43] . Unlike),
    CONTENT#7667(   Authorization, the Proxy-Authorization header field applies only to),
    CONTENT#7668(   the next outbound proxy that demanded authentication using the Proxy-),
    CONTENT#7669(   Authenticate field. When multiple proxies are used in a chain, the),
      BREAK#7670,
      BREAK#7671,
      BREAK#7672,
      BREAK#7674,
      BREAK#7676,
      BREAK#7677,
    CONTENT#7678(   Proxy-Authorization header field is consumed by the first outbound),
    CONTENT#7679(   proxy that was expecting to receive credentials. A proxy MAY relay),
    CONTENT#7680(   the credentials from the client request to the next proxy if that is),
    CONTENT#7681(   the mechanism by which the proxies cooperatively authenticate a given),
    CONTENT#7682(   request.),
      BREAK#7683,
    SECTION#7684(id=14.35, title=Range),
      BREAK#7685,
    SECTION#7686(id=14.35.1, title=Byte Ranges),
      BREAK#7687,
    CONTENT#7688(   Since all HTTP entities are represented in HTTP messages as sequences),
    CONTENT#7689(   of bytes, the concept of a byte range is meaningful for any HTTP),
    CONTENT#7690(   entity. (However, not all clients and servers need to support byte-),
    CONTENT#7691(   range operations.)),
      BREAK#7692,
    CONTENT#7693(   Byte range specifications in HTTP apply to the sequence of bytes in),
    CONTENT#7694(   the entity-body (not necessarily the same as the message-body).),
      BREAK#7695,
    CONTENT#7696(   A byte range operation MAY specify a single range of bytes, or a set),
    CONTENT#7697(   of ranges within a single entity.),
      BREAK#7698,
    CONTENT#7699(       ranges-specifier = byte-ranges-specifier),
    CONTENT#7700(       byte-ranges-specifier = bytes-unit "=" byte-range-set),
    CONTENT#7701(       byte-range-set  = 1#( byte-range-spec | suffix-byte-range-spec )),
    CONTENT#7702(       byte-range-spec = first-byte-pos "-" [last-byte-pos]),
    CONTENT#7703(       first-byte-pos  = 1*DIGIT),
    CONTENT#7704(       last-byte-pos   = 1*DIGIT),
      BREAK#7705,
    CONTENT#7706(   The first-byte-pos value in a byte-range-spec gives the byte-offset),
    CONTENT#7707(   of the first byte in a range. The last-byte-pos value gives the),
    CONTENT#7708(   byte-offset of the last byte in the range; that is, the byte),
    CONTENT#7709(   positions specified are inclusive. Byte offsets start at zero.),
      BREAK#7710,
    CONTENT#7711(   If the last-byte-pos value is present, it MUST be greater than or),
    CONTENT#7712(   equal to the first-byte-pos in that byte-range-spec, or the byte-),
    CONTENT#7713(   range-spec is syntactically invalid. The recipient of a byte-range-),
    CONTENT#7714(   set that includes one or more syntactically invalid byte-range-spec),
    CONTENT#7715(   values MUST ignore the header field that includes that byte-range-),
    CONTENT#7716(   set.),
      BREAK#7717,
    CONTENT#7718(   If the last-byte-pos value is absent, or if the value is greater than),
    CONTENT#7719(   or equal to the current length of the entity-body, last-byte-pos is),
    CONTENT#7720(   taken to be equal to one less than the current length of the entity-),
    CONTENT#7721(   body in bytes.),
      BREAK#7722,
    CONTENT#7723(   By its choice of last-byte-pos, a client can limit the number of),
    CONTENT#7724(   bytes retrieved without knowing the size of the entity.),
      BREAK#7725,
      BREAK#7726,
      BREAK#7727,
      BREAK#7728,
      BREAK#7730,
      BREAK#7732,
      BREAK#7733,
    CONTENT#7734(       suffix-byte-range-spec = "-" suffix-length),
    CONTENT#7735(       suffix-length = 1*DIGIT),
      BREAK#7736,
    CONTENT#7737(   A suffix-byte-range-spec is used to specify the suffix of the),
    CONTENT#7738(   entity-body, of a length given by the suffix-length value. (That is,),
    CONTENT#7739(   this form specifies the last N bytes of an entity-body.) If the),
    CONTENT#7740(   entity is shorter than the specified suffix-length, the entire),
    CONTENT#7741(   entity-body is used.),
      BREAK#7742,
    CONTENT#7743(   If a syntactically valid byte-range-set includes at least one byte-),
    CONTENT#7744(   range-spec whose first-byte-pos is less than the current length of),
    CONTENT#7745(   the entity-body, or at least one suffix-byte-range-spec with a non-),
    CONTENT#7746(   zero suffix-length, then the byte-range-set is satisfiable.),
    CONTENT#7747(   Otherwise, the byte-range-set is unsatisfiable. If the byte-range-set),
    CONTENT#7748(   is unsatisfiable, the server SHOULD return a response with a status),
    CONTENT#7749(   of 416 (Requested range not satisfiable). Otherwise, the server),
    CONTENT#7750(   SHOULD return a response with a status of 206 (Partial Content)),
    CONTENT#7751(   containing the satisfiable ranges of the entity-body.),
      BREAK#7752,
    CONTENT#7753(   Examples of byte-ranges-specifier values (assuming an entity-body of),
    CONTENT#7754(   length 10000):),
      BREAK#7755,
    CONTENT#7756(      - The first 500 bytes (byte offsets 0-499, inclusive):  bytes=0-),
    CONTENT#7757(        499),
      BREAK#7758,
    CONTENT#7759(      - The second 500 bytes (byte offsets 500-999, inclusive):),
    CONTENT#7760(        bytes=500-999),
      BREAK#7761,
    CONTENT#7762(      - The final 500 bytes (byte offsets 9500-9999, inclusive):),
    CONTENT#7763(        bytes=-500),
      BREAK#7764,
    CONTENT#7765(      - Or bytes=9500-),
      BREAK#7766,
    CONTENT#7767(      - The first and last bytes only (bytes 0 and 9999):  bytes=0-0,-1),
      BREAK#7768,
    CONTENT#7769(      - Several legal but not canonical specifications of the second 500),
    CONTENT#7770(        bytes (byte offsets 500-999, inclusive):),
    CONTENT#7771(         bytes=500-600,601-999),
    CONTENT#7772(         bytes=500-700,601-999),
      BREAK#7773,
    SECTION#7774(id=14.35.2, title=Range Retrieval Requests),
      BREAK#7775,
    CONTENT#7776(   HTTP retrieval requests using conditional or unconditional GET),
    CONTENT#7777(   methods MAY request one or more sub-ranges of the entity, instead of),
    CONTENT#7778(   the entire entity, using the Range request header, which applies to),
    CONTENT#7779(   the entity returned as the result of the request:),
      BREAK#7780,
    CONTENT#7781(      Range = "Range" ":" ranges-specifier),
      BREAK#7782,
      BREAK#7783,
      BREAK#7784,
      BREAK#7786,
      BREAK#7788,
      BREAK#7789,
    CONTENT#7790(   A server MAY ignore the Range header. However, HTTP/1.1 origin),
    CONTENT#7791(   servers and intermediate caches ought to support byte ranges when),
    CONTENT#7792(   possible, since Range supports efficient recovery from partially),
    CONTENT#7793(   failed transfers, and supports efficient partial retrieval of large),
    CONTENT#7794(   entities.),
      BREAK#7795,
    CONTENT#7796(   If the server supports the Range header and the specified range or),
    CONTENT#7797(   ranges are appropriate for the entity:),
      BREAK#7798,
    CONTENT#7799(      - The presence of a Range header in an unconditional GET modifies),
    CONTENT#7800(        what is returned if the GET is otherwise successful. In other),
    CONTENT#7801(        words, the response carries a status code of 206 (Partial),
    CONTENT#7802(        Content) instead of 200 (OK).),
      BREAK#7803,
    CONTENT#7804(      - The presence of a Range header in a conditional GET (a request),
    CONTENT#7805(        using one or both of If-Modified-Since and If-None-Match, or),
    CONTENT#7806(        one or both of If-Unmodified-Since and If-Match) modifies what),
    CONTENT#7807(        is returned if the GET is otherwise successful and the),
    CONTENT#7808(        condition is true. It does not affect the 304 (Not Modified)),
    CONTENT#7809(        response returned if the conditional is false.),
      BREAK#7810,
    CONTENT#7811(   In some cases, it might be more appropriate to use the If-Range),
    CONTENT#7812(   header (see section 14.27) in addition to the Range header.),
      BREAK#7813,
    CONTENT#7814(   If a proxy that supports ranges receives a Range request, forwards),
    CONTENT#7815(   the request to an inbound server, and receives an entire entity in),
    CONTENT#7816(   reply, it SHOULD only return the requested range to its client. It),
    CONTENT#7817(   SHOULD store the entire received response in its cache if that is),
    CONTENT#7818(   consistent with its cache allocation policies.),
      BREAK#7819,
    SECTION#7820(id=14.36, title=Referer),
      BREAK#7821,
    CONTENT#7822(   The Referer[sic] request-header field allows the client to specify,),
    CONTENT#7823(   for the server's benefit, the address (URI) of the resource from),
    CONTENT#7824(   which the Request-URI was obtained (the "referrer", although the),
    CONTENT#7825(   header field is misspelled.) The Referer request-header allows a),
    CONTENT#7826(   server to generate lists of back-links to resources for interest,),
    CONTENT#7827(   logging, optimized caching, etc. It also allows obsolete or mistyped),
    CONTENT#7828(   links to be traced for maintenance. The Referer field MUST NOT be),
    CONTENT#7829(   sent if the Request-URI was obtained from a source that does not have),
    CONTENT#7830(   its own URI, such as input from the user keyboard.),
      BREAK#7831,
    CONTENT#7832(       Referer        = "Referer" ":" ( absoluteURI | relativeURI )),
      BREAK#7833,
    CONTENT#7834(   Example:),
      BREAK#7835,
    CONTENT#7836(       Referer: http://www.w3.org/hypertext/DataSources/Overview.html),
      BREAK#7837,
      BREAK#7838,
      BREAK#7839,
      BREAK#7840,
      BREAK#7842,
      BREAK#7844,
      BREAK#7845,
    CONTENT#7846(   If the field value is a relative URI, it SHOULD be interpreted),
    CONTENT#7847(   relative to the Request-URI. The URI MUST NOT include a fragment. See),
    CONTENT#7848(   section 15.1.3 for security considerations.),
      BREAK#7849,
    SECTION#7850(id=14.37, title=Retry-After),
      BREAK#7851,
    CONTENT#7852(   The Retry-After response-header field can be used with a 503 (Service),
    CONTENT#7853(   Unavailable) response to indicate how long the service is expected to),
    CONTENT#7854(   be unavailable to the requesting client. This field MAY also be used),
    CONTENT#7855(   with any 3xx (Redirection) response to indicate the minimum time the),
    CONTENT#7856(   user-agent is asked wait before issuing the redirected request. The),
    CONTENT#7857(   value of this field can be either an HTTP-date or an integer number),
    CONTENT#7858(   of seconds (in decimal) after the time of the response.),
      BREAK#7859,
    CONTENT#7860(       Retry-After  = "Retry-After" ":" ( HTTP-date | delta-seconds )),
      BREAK#7861,
    CONTENT#7862(   Two examples of its use are),
      BREAK#7863,
    CONTENT#7864(       Retry-After: Fri, 31 Dec 1999 23:59:59 GMT),
    CONTENT#7865(       Retry-After: 120),
      BREAK#7866,
    CONTENT#7867(   In the latter example, the delay is 2 minutes.),
      BREAK#7868,
    SECTION#7869(id=14.38, title=Server),
      BREAK#7870,
    CONTENT#7871(   The Server response-header field contains information about the),
    CONTENT#7872(   software used by the origin server to handle the request. The field),
    CONTENT#7873(   can contain multiple product tokens (section 3.8) and comments),
    CONTENT#7874(   identifying the server and any significant subproducts. The product),
    CONTENT#7875(   tokens are listed in order of their significance for identifying the),
    CONTENT#7876(   application.),
      BREAK#7877,
    CONTENT#7878(       Server         = "Server" ":" 1*( product | comment )),
      BREAK#7879,
    CONTENT#7880(   Example:),
      BREAK#7881,
    CONTENT#7882(       Server: CERN/3.0 libwww/2.17),
      BREAK#7883,
    CONTENT#7884(   If the response is being forwarded through a proxy, the proxy),
    CONTENT#7885(   application MUST NOT modify the Server response-header. Instead, it),
    CONTENT#7886(   SHOULD include a Via field (as described in section 14.45).),
      BREAK#7887,
    CONTENT#7888(      Note: Revealing the specific software version of the server might),
    CONTENT#7889(      allow the server machine to become more vulnerable to attacks),
    CONTENT#7890(      against software that is known to contain security holes. Server),
    CONTENT#7891(      implementors are encouraged to make this field a configurable),
    CONTENT#7892(      option.),
      BREAK#7893,
      BREAK#7894,
      BREAK#7895,
      BREAK#7896,
      BREAK#7898,
      BREAK#7900,
      BREAK#7901,
    SECTION#7902(id=14.39, title=TE),
      BREAK#7903,
    CONTENT#7904(   The TE request-header field indicates what extension transfer-codings),
    CONTENT#7905(   it is willing to accept in the response and whether or not it is),
    CONTENT#7906(   willing to accept trailer fields in a chunked transfer-coding. Its),
    CONTENT#7907(   value may consist of the keyword "trailers" and/or a comma-separated),
    CONTENT#7908(   list of extension transfer-coding names with optional accept),
    CONTENT#7909(   parameters (as described in section 3.6).),
      BREAK#7910,
    CONTENT#7911(       TE        = "TE" ":" #( t-codings )),
    CONTENT#7912(       t-codings = "trailers" | ( transfer-extension [ accept-params ] )),
      BREAK#7913,
    CONTENT#7914(   The presence of the keyword "trailers" indicates that the client is),
    CONTENT#7915(   willing to accept trailer fields in a chunked transfer-coding, as),
    CONTENT#7916(   defined in section 3.6.1. This keyword is reserved for use with),
    CONTENT#7917(   transfer-coding values even though it does not itself represent a),
    CONTENT#7918(   transfer-coding.),
      BREAK#7919,
    CONTENT#7920(   Examples of its use are:),
      BREAK#7921,
    CONTENT#7922(       TE: deflate),
    CONTENT#7923(       TE:),
    CONTENT#7924(       TE: trailers, deflate;q=0.5),
      BREAK#7925,
    CONTENT#7926(   The TE header field only applies to the immediate connection.),
    CONTENT#7927(   Therefore, the keyword MUST be supplied within a Connection header),
    CONTENT#7928(   field (section 14.10) whenever TE is present in an HTTP/1.1 message.),
      BREAK#7929,
    CONTENT#7930(   A server tests whether a transfer-coding is acceptable, according to),
    CONTENT#7931(   a TE field, using these rules:),
      BREAK#7932,
    CONTENT#7933(      1. The "chunked" transfer-coding is always acceptable. If the),
    CONTENT#7934(         keyword "trailers" is listed, the client indicates that it is),
    CONTENT#7935(         willing to accept trailer fields in the chunked response on),
    CONTENT#7936(         behalf of itself and any downstream clients. The implication is),
    CONTENT#7937(         that, if given, the client is stating that either all),
    CONTENT#7938(         downstream clients are willing to accept trailer fields in the),
    CONTENT#7939(         forwarded response, or that it will attempt to buffer the),
    CONTENT#7940(         response on behalf of downstream recipients.),
      BREAK#7941,
    CONTENT#7942(         Note: HTTP/1.1 does not define any means to limit the size of a),
    CONTENT#7943(         chunked response such that a client can be assured of buffering),
    CONTENT#7944(         the entire response.),
      BREAK#7945,
    CONTENT#7946(      2. If the transfer-coding being tested is one of the transfer-),
    CONTENT#7947(         codings listed in the TE field, then it is acceptable unless it),
    CONTENT#7948(         is accompanied by a qvalue of 0. (As defined in section 3.9, a),
    CONTENT#7949(         qvalue of 0 means "not acceptable.")),
      BREAK#7950,
      BREAK#7951,
      BREAK#7952,
      BREAK#7954,
      BREAK#7956,
      BREAK#7957,
    CONTENT#7958(      3. If multiple transfer-codings are acceptable, then the),
    CONTENT#7959(         acceptable transfer-coding with the highest non-zero qvalue is),
    CONTENT#7960(         preferred.  The "chunked" transfer-coding always has a qvalue),
    CONTENT#7961(         of 1.),
      BREAK#7962,
    CONTENT#7963(   If the TE field-value is empty or if no TE field is present, the only),
    CONTENT#7964(   transfer-coding  is "chunked". A message with no transfer-coding is),
    CONTENT#7965(   always acceptable.),
      BREAK#7966,
    SECTION#7967(id=14.40, title=Trailer),
      BREAK#7968,
    CONTENT#7969(   The Trailer general field value indicates that the given set of),
    CONTENT#7970(   header fields is present in the trailer of a message encoded with),
    CONTENT#7971(   chunked transfer-coding.),
      BREAK#7972,
    CONTENT#7973(       Trailer  = "Trailer" ":" 1#field-name),
      BREAK#7974,
    CONTENT#7975(   An HTTP/1.1 message SHOULD include a Trailer header field in a),
    CONTENT#7976(   message using chunked transfer-coding with a non-empty trailer. Doing),
    CONTENT#7977(   so allows the recipient to know which header fields to expect in the),
    CONTENT#7978(   trailer.),
      BREAK#7979,
    CONTENT#7980(   If no Trailer header field is present, the trailer SHOULD NOT include),
    CONTENT#7981(   any header fields. See section 3.6.1 for restrictions on the use of),
    CONTENT#7982(   trailer fields in a "chunked" transfer-coding.),
      BREAK#7983,
    CONTENT#7984(   Message header fields listed in the Trailer header field MUST NOT),
    CONTENT#7985(   include the following header fields:),
      BREAK#7986,
    CONTENT#7987(      . Transfer-Encoding),
      BREAK#7988,
    CONTENT#7989(      . Content-Length),
      BREAK#7990,
    CONTENT#7991(      . Trailer),
      BREAK#7992,
    SECTION#7993(id=14.41, title=Transfer-Encoding),
      BREAK#7994,
    CONTENT#7995(   The Transfer-Encoding general-header field indicates what (if any)),
    CONTENT#7996(   type of transformation has been applied to the message body in order),
    CONTENT#7997(   to safely transfer it between the sender and the recipient. This),
    CONTENT#7998(   differs from the content-coding in that the transfer-coding is a),
    CONTENT#7999(   property of the message, not of the entity.),
      BREAK#8000,
    CONTENT#8001(     Transfer-Encoding       = "Transfer-Encoding" ":" 1#transfer-coding),
      BREAK#8002,
    CONTENT#8003(   Transfer-codings are defined in section 3.6. An example is:),
      BREAK#8004,
    CONTENT#8005(     Transfer-Encoding: chunked),
      BREAK#8006,
      BREAK#8007,
      BREAK#8008,
      BREAK#8010,
      BREAK#8012,
      BREAK#8013,
    CONTENT#8014(   If multiple encodings have been applied to an entity, the transfer-),
    CONTENT#8015(   codings MUST be listed in the order in which they were applied.),
    CONTENT#8016(   Additional information about the encoding parameters MAY be provided),
    CONTENT#8017(   by other entity-header fields not defined by this specification.),
      BREAK#8018,
    CONTENT#8019(   Many older HTTP/1.0 applications do not understand the Transfer-),
    CONTENT#8020(   Encoding header.),
      BREAK#8021,
    SECTION#8022(id=14.42, title=Upgrade),
      BREAK#8023,
    CONTENT#8024(   The Upgrade general-header allows the client to specify what),
    CONTENT#8025(   additional communication protocols it supports and would like to use),
    CONTENT#8026(   if the server finds it appropriate to switch protocols. The server),
    CONTENT#8027(   MUST use the Upgrade header field within a 101 (Switching Protocols)),
    CONTENT#8028(   response to indicate which protocol(s) are being switched.),
      BREAK#8029,
    CONTENT#8030(       Upgrade        = "Upgrade" ":" 1#product),
      BREAK#8031,
    CONTENT#8032(   For example,),
      BREAK#8033,
    CONTENT#8034(       Upgrade: HTTP/2.0, SHTTP/1.3, IRC/6.9, RTA/x11),
      BREAK#8035,
    CONTENT#8036(   The Upgrade header field is intended to provide a simple mechanism),
    CONTENT#8037(   for transition from HTTP/1.1 to some other, incompatible protocol. It),
    CONTENT#8038(   does so by allowing the client to advertise its desire to use another),
    CONTENT#8039(   protocol, such as a later version of HTTP with a higher major version),
    CONTENT#8040(   number, even though the current request has been made using HTTP/1.1.),
    CONTENT#8041(   This eases the difficult transition between incompatible protocols by),
    CONTENT#8042(   allowing the client to initiate a request in the more commonly),
    CONTENT#8043(   supported protocol while indicating to the server that it would like),
    CONTENT#8044(   to use a "better" protocol if available (where "better" is determined),
    CONTENT#8045(   by the server, possibly according to the nature of the method and/or),
    CONTENT#8046(   resource being requested).),
      BREAK#8047,
    CONTENT#8048(   The Upgrade header field only applies to switching application-layer),
    CONTENT#8049(   protocols upon the existing transport-layer connection. Upgrade),
    CONTENT#8050(   cannot be used to insist on a protocol change; its acceptance and use),
    CONTENT#8051(   by the server is optional. The capabilities and nature of the),
    CONTENT#8052(   application-layer communication after the protocol change is entirely),
    CONTENT#8053(   dependent upon the new protocol chosen, although the first action),
    CONTENT#8054(   after changing the protocol MUST be a response to the initial HTTP),
    CONTENT#8055(   request containing the Upgrade header field.),
      BREAK#8056,
    CONTENT#8057(   The Upgrade header field only applies to the immediate connection.),
    CONTENT#8058(   Therefore, the upgrade keyword MUST be supplied within a Connection),
    CONTENT#8059(   header field (section 14.10) whenever Upgrade is present in an),
    CONTENT#8060(   HTTP/1.1 message.),
      BREAK#8061,
      BREAK#8062,
      BREAK#8063,
      BREAK#8064,
      BREAK#8066,
      BREAK#8068,
      BREAK#8069,
    CONTENT#8070(   The Upgrade header field cannot be used to indicate a switch to a),
    CONTENT#8071(   protocol on a different connection. For that purpose, it is more),
    CONTENT#8072(   appropriate to use a 301, 302, 303, or 305 redirection response.),
      BREAK#8073,
    CONTENT#8074(   This specification only defines the protocol name "HTTP" for use by),
    CONTENT#8075(   the family of Hypertext Transfer Protocols, as defined by the HTTP),
    CONTENT#8076(   version rules of section 3.1 and future updates to this),
    CONTENT#8077(   specification. Any token can be used as a protocol name; however, it),
    CONTENT#8078(   will only be useful if both the client and server associate the name),
    CONTENT#8079(   with the same protocol.),
      BREAK#8080,
    SECTION#8081(id=14.43, title=User-Agent),
      BREAK#8082,
    CONTENT#8083(   The User-Agent request-header field contains information about the),
    CONTENT#8084(   user agent originating the request. This is for statistical purposes,),
    CONTENT#8085(   the tracing of protocol violations, and automated recognition of user),
    CONTENT#8086(   agents for the sake of tailoring responses to avoid particular user),
    CONTENT#8087(   agent limitations. User agents SHOULD include this field with),
    CONTENT#8088(   requests. The field can contain multiple product tokens (section 3.8)),
    CONTENT#8089(   and comments identifying the agent and any subproducts which form a),
    CONTENT#8090(   significant part of the user agent. By convention, the product tokens),
    CONTENT#8091(   are listed in order of their significance for identifying the),
    CONTENT#8092(   application.),
      BREAK#8093,
    CONTENT#8094(       User-Agent     = "User-Agent" ":" 1*( product | comment )),
      BREAK#8095,
    CONTENT#8096(   Example:),
      BREAK#8097,
    CONTENT#8098(       User-Agent: CERN-LineMode/2.15 libwww/2.17b3),
      BREAK#8099,
    SECTION#8100(id=14.44, title=Vary),
      BREAK#8101,
    CONTENT#8102(   The Vary field value indicates the set of request-header fields that),
    CONTENT#8103(   fully determines, while the response is fresh, whether a cache is),
    CONTENT#8104(   permitted to use the response to reply to a subsequent request),
    CONTENT#8105(   without revalidation. For uncacheable or stale responses, the Vary),
    CONTENT#8106(   field value advises the user agent about the criteria that were used),
    CONTENT#8107(   to select the representation. A Vary field value of "*" implies that),
    CONTENT#8108(   a cache cannot determine from the request headers of a subsequent),
    CONTENT#8109(   request whether this response is the appropriate representation. See),
    CONTENT#8110(   section 13.6 for use of the Vary header field by caches.),
      BREAK#8111,
    CONTENT#8112(       Vary  = "Vary" ":" ( "*" | 1#field-name )),
      BREAK#8113,
    CONTENT#8114(   An HTTP/1.1 server SHOULD include a Vary header field with any),
    CONTENT#8115(   cacheable response that is subject to server-driven negotiation.),
    CONTENT#8116(   Doing so allows a cache to properly interpret future requests on that),
    CONTENT#8117(   resource and informs the user agent about the presence of negotiation),
      BREAK#8118,
      BREAK#8119,
      BREAK#8120,
      BREAK#8122,
      BREAK#8124,
      BREAK#8125,
    CONTENT#8126(   on that resource. A server MAY include a Vary header field with a),
    CONTENT#8127(   non-cacheable response that is subject to server-driven negotiation,),
    CONTENT#8128(   since this might provide the user agent with useful information about),
    CONTENT#8129(   the dimensions over which the response varies at the time of the),
    CONTENT#8130(   response.),
      BREAK#8131,
    CONTENT#8132(   A Vary field value consisting of a list of field-names signals that),
    CONTENT#8133(   the representation selected for the response is based on a selection),
    CONTENT#8134(   algorithm which considers ONLY the listed request-header field values),
    CONTENT#8135(   in selecting the most appropriate representation. A cache MAY assume),
    CONTENT#8136(   that the same selection will be made for future requests with the),
    CONTENT#8137(   same values for the listed field names, for the duration of time for),
    CONTENT#8138(   which the response is fresh.),
      BREAK#8139,
    CONTENT#8140(   The field-names given are not limited to the set of standard),
    CONTENT#8141(   request-header fields defined by this specification. Field names are),
    CONTENT#8142(   case-insensitive.),
      BREAK#8143,
    CONTENT#8144(   A Vary field value of "*" signals that unspecified parameters not),
    CONTENT#8145(   limited to the request-headers (e.g., the network address of the),
    CONTENT#8146(   client), play a role in the selection of the response representation.),
    CONTENT#8147(   The "*" value MUST NOT be generated by a proxy server; it may only be),
    CONTENT#8148(   generated by an origin server.),
      BREAK#8149,
    SECTION#8150(id=14.45, title=Via),
      BREAK#8151,
    CONTENT#8152(   The Via general-header field MUST be used by gateways and proxies to),
    CONTENT#8153(   indicate the intermediate protocols and recipients between the user),
    CONTENT#8154(   agent and the server on requests, and between the origin server and),
    CONTENT#8155(   the client on responses. It is analogous to the "Received" field of),
    CONTENT#8156(   RFC 822 [9] and is intended to be used for tracking message forwards,),
    CONTENT#8157(   avoiding request loops, and identifying the protocol capabilities of),
    CONTENT#8158(   all senders along the request/response chain.),
      BREAK#8159,
    CONTENT#8160(      Via =  "Via" ":" 1#( received-protocol received-by [ comment ] )),
    CONTENT#8161(      received-protocol = [ protocol-name "/" ] protocol-version),
    CONTENT#8162(      protocol-name     = token),
    CONTENT#8163(      protocol-version  = token),
    CONTENT#8164(      received-by       = ( host [ ":" port ] ) | pseudonym),
    CONTENT#8165(      pseudonym         = token),
      BREAK#8166,
    CONTENT#8167(   The received-protocol indicates the protocol version of the message),
    CONTENT#8168(   received by the server or client along each segment of the),
    CONTENT#8169(   request/response chain. The received-protocol version is appended to),
    CONTENT#8170(   the Via field value when the message is forwarded so that information),
    CONTENT#8171(   about the protocol capabilities of upstream applications remains),
    CONTENT#8172(   visible to all recipients.),
      BREAK#8173,
      BREAK#8174,
      BREAK#8175,
      BREAK#8176,
      BREAK#8178,
      BREAK#8180,
      BREAK#8181,
    CONTENT#8182(   The protocol-name is optional if and only if it would be "HTTP". The),
    CONTENT#8183(   received-by field is normally the host and optional port number of a),
    CONTENT#8184(   recipient server or client that subsequently forwarded the message.),
    CONTENT#8185(   However, if the real host is considered to be sensitive information,),
    CONTENT#8186(   it MAY be replaced by a pseudonym. If the port is not given, it MAY),
    CONTENT#8187(   be assumed to be the default port of the received-protocol.),
      BREAK#8188,
    CONTENT#8189(   Multiple Via field values represents each proxy or gateway that has),
    CONTENT#8190(   forwarded the message. Each recipient MUST append its information),
    CONTENT#8191(   such that the end result is ordered according to the sequence of),
    CONTENT#8192(   forwarding applications.),
      BREAK#8193,
    CONTENT#8194(   Comments MAY be used in the Via header field to identify the software),
    CONTENT#8195(   of the recipient proxy or gateway, analogous to the User-Agent and),
    CONTENT#8196(   Server header fields. However, all comments in the Via field are),
    CONTENT#8197(   optional and MAY be removed by any recipient prior to forwarding the),
    CONTENT#8198(   message.),
      BREAK#8199,
    CONTENT#8200(   For example, a request message could be sent from an HTTP/1.0 user),
    CONTENT#8201(   agent to an internal proxy code-named "fred", which uses HTTP/1.1 to),
    CONTENT#8202(   forward the request to a public proxy at nowhere.com, which completes),
    CONTENT#8203(   the request by forwarding it to the origin server at www.ics.uci.edu.),
    CONTENT#8204(   The request received by www.ics.uci.edu would then have the following),
    CONTENT#8205(   Via header field:),
      BREAK#8206,
    CONTENT#8207(       Via: 1.0 fred, 1.1 nowhere.com (Apache/1.1)),
      BREAK#8208,
    CONTENT#8209(   Proxies and gateways used as a portal through a network firewall),
    CONTENT#8210(   SHOULD NOT, by default, forward the names and ports of hosts within),
    CONTENT#8211(   the firewall region. This information SHOULD only be propagated if),
    CONTENT#8212(   explicitly enabled. If not enabled, the received-by host of any host),
    CONTENT#8213(   behind the firewall SHOULD be replaced by an appropriate pseudonym),
    CONTENT#8214(   for that host.),
      BREAK#8215,
    CONTENT#8216(   For organizations that have strong privacy requirements for hiding),
    CONTENT#8217(   internal structures, a proxy MAY combine an ordered subsequence of),
    CONTENT#8218(   Via header field entries with identical received-protocol values into),
    CONTENT#8219(   a single such entry. For example,),
      BREAK#8220,
    CONTENT#8221(       Via: 1.0 ricky, 1.1 ethel, 1.1 fred, 1.0 lucy),
      BREAK#8222,
    CONTENT#8223(        could be collapsed to),
      BREAK#8224,
    CONTENT#8225(       Via: 1.0 ricky, 1.1 mertz, 1.0 lucy),
      BREAK#8226,
      BREAK#8227,
      BREAK#8228,
      BREAK#8229,
      BREAK#8230,
      BREAK#8231,
      BREAK#8232,
      BREAK#8234,
      BREAK#8236,
      BREAK#8237,
    CONTENT#8238(   Applications SHOULD NOT combine multiple entries unless they are all),
    CONTENT#8239(   under the same organizational control and the hosts have already been),
    CONTENT#8240(   replaced by pseudonyms. Applications MUST NOT combine entries which),
    CONTENT#8241(   have different received-protocol values.),
      BREAK#8242,
    SECTION#8243(id=14.46, title=Warning),
      BREAK#8244,
    CONTENT#8245(   The Warning general-header field is used to carry additional),
    CONTENT#8246(   information about the status or transformation of a message which),
    CONTENT#8247(   might not be reflected in the message. This information is typically),
    CONTENT#8248(   used to warn about a possible lack of semantic transparency from),
    CONTENT#8249(   caching operations or transformations applied to the entity body of),
    CONTENT#8250(   the message.),
      BREAK#8251,
    CONTENT#8252(   Warning headers are sent with responses using:),
      BREAK#8253,
    CONTENT#8254(       Warning    = "Warning" ":" 1#warning-value),
      BREAK#8255,
    CONTENT#8256(       warning-value = warn-code SP warn-agent SP warn-text),
    CONTENT#8257(                                             [SP warn-date]),
      BREAK#8258,
    CONTENT#8259(       warn-code  = 3DIGIT),
    CONTENT#8260(       warn-agent = ( host [ ":" port ] ) | pseudonym),
    CONTENT#8261(                       ; the name or pseudonym of the server adding),
    CONTENT#8262(                       ; the Warning header, for use in debugging),
    CONTENT#8263(       warn-text  = quoted-string),
    CONTENT#8264(       warn-date  = <"> HTTP-date <">),
      BREAK#8265,
    CONTENT#8266(   A response MAY carry more than one Warning header.),
      BREAK#8267,
    CONTENT#8268(   The warn-text SHOULD be in a natural language and character set that),
    CONTENT#8269(   is most likely to be intelligible to the human user receiving the),
    CONTENT#8270(   response. This decision MAY be based on any available knowledge, such),
    CONTENT#8271(   as the location of the cache or user, the Accept-Language field in a),
    CONTENT#8272(   request, the Content-Language field in a response, etc. The default),
    CONTENT#8273(   language is English and the default character set is ISO-8859-1.),
      BREAK#8274,
    CONTENT#8275(   If a character set other than ISO-8859-1 is used, it MUST be encoded),
    CONTENT#8276(   in the warn-text using the method described in RFC 2047 [14].),
      BREAK#8277,
    CONTENT#8278(   Warning headers can in general be applied to any message, however),
    CONTENT#8279(   some specific warn-codes are specific to caches and can only be),
    CONTENT#8280(   applied to response messages. New Warning headers SHOULD be added),
    CONTENT#8281(   after any existing Warning headers. A cache MUST NOT delete any),
    CONTENT#8282(   Warning header that it received with a message. However, if a cache),
    CONTENT#8283(   successfully validates a cache entry, it SHOULD remove any Warning),
    CONTENT#8284(   headers previously attached to that entry except as specified for),
      BREAK#8285,
      BREAK#8286,
      BREAK#8287,
      BREAK#8288,
      BREAK#8290,
      BREAK#8292,
      BREAK#8293,
    CONTENT#8294(   specific Warning codes. It MUST then add any Warning headers received),
    CONTENT#8295(   in the validating response. In other words, Warning headers are those),
    CONTENT#8296(   that would be attached to the most recent relevant response.),
      BREAK#8297,
    CONTENT#8298(   When multiple Warning headers are attached to a response, the user),
    CONTENT#8299(   agent ought to inform the user of as many of them as possible, in the),
    CONTENT#8300(   order that they appear in the response. If it is not possible to),
    CONTENT#8301(   inform the user of all of the warnings, the user agent SHOULD follow),
    CONTENT#8302(   these heuristics:),
      BREAK#8303,
    CONTENT#8304(      - Warnings that appear early in the response take priority over),
    CONTENT#8305(        those appearing later in the response.),
      BREAK#8306,
    CONTENT#8307(      - Warnings in the user's preferred character set take priority),
    CONTENT#8308(        over warnings in other character sets but with identical warn-),
    CONTENT#8309(        codes and warn-agents.),
      BREAK#8310,
    CONTENT#8311(   Systems that generate multiple Warning headers SHOULD order them with),
    CONTENT#8312(   this user agent behavior in mind.),
      BREAK#8313,
    CONTENT#8314(   Requirements for the behavior of caches with respect to Warnings are),
    CONTENT#8315(   stated in section 13.1.2.),
      BREAK#8316,
    CONTENT#8317(   This is a list of the currently-defined warn-codes, each with a),
    CONTENT#8318(   recommended warn-text in English, and a description of its meaning.),
      BREAK#8319,
    CONTENT#8320(   110 Response is stale),
    CONTENT#8321(     MUST be included whenever the returned response is stale.),
      BREAK#8322,
    CONTENT#8323(   111 Revalidation failed),
    CONTENT#8324(     MUST be included if a cache returns a stale response because an),
    CONTENT#8325(     attempt to revalidate the response failed, due to an inability to),
    CONTENT#8326(     reach the server.),
      BREAK#8327,
    CONTENT#8328(   112 Disconnected operation),
    CONTENT#8329(     SHOULD be included if the cache is intentionally disconnected from),
    CONTENT#8330(     the rest of the network for a period of time.),
      BREAK#8331,
    CONTENT#8332(   113 Heuristic expiration),
    CONTENT#8333(     MUST be included if the cache heuristically chose a freshness),
    CONTENT#8334(     lifetime greater than 24 hours and the response's age is greater),
    CONTENT#8335(     than 24 hours.),
      BREAK#8336,
    CONTENT#8337(   199 Miscellaneous warning),
    CONTENT#8338(     The warning text MAY include arbitrary information to be presented),
    CONTENT#8339(     to a human user, or logged. A system receiving this warning MUST),
    CONTENT#8340(     NOT take any automated action, besides presenting the warning to),
    CONTENT#8341(     the user.),
      BREAK#8342,
      BREAK#8343,
      BREAK#8344,
      BREAK#8346,
      BREAK#8348,
      BREAK#8349,
    CONTENT#8350(   214 Transformation applied),
    CONTENT#8351(     MUST be added by an intermediate cache or proxy if it applies any),
    CONTENT#8352(     transformation changing the content-coding (as specified in the),
    CONTENT#8353(     Content-Encoding header) or media-type (as specified in the),
    CONTENT#8354(     Content-Type header) of the response, or the entity-body of the),
    CONTENT#8355(     response, unless this Warning code already appears in the response.),
      BREAK#8356,
    CONTENT#8357(   299 Miscellaneous persistent warning),
    CONTENT#8358(     The warning text MAY include arbitrary information to be presented),
    CONTENT#8359(     to a human user, or logged. A system receiving this warning MUST),
    CONTENT#8360(     NOT take any automated action.),
      BREAK#8361,
    CONTENT#8362(   If an implementation sends a message with one or more Warning headers),
    CONTENT#8363(   whose version is HTTP/1.0 or lower, then the sender MUST include in),
    CONTENT#8364(   each warning-value a warn-date that matches the date in the response.),
      BREAK#8365,
    CONTENT#8366(   If an implementation receives a message with a warning-value that),
    CONTENT#8367(   includes a warn-date, and that warn-date is different from the Date),
    CONTENT#8368(   value in the response, then that warning-value MUST be deleted from),
    CONTENT#8369(   the message before storing, forwarding, or using it. (This prevents),
    CONTENT#8370(   bad consequences of naive caching of Warning header fields.) If all),
    CONTENT#8371(   of the warning-values are deleted for this reason, the Warning header),
    CONTENT#8372(   MUST be deleted as well.),
      BREAK#8373,
    SECTION#8374(id=14.47, title=WWW-Authenticate),
      BREAK#8375,
    CONTENT#8376(   The WWW-Authenticate response-header field MUST be included in 401),
    CONTENT#8377(   (Unauthorized) response messages. The field value consists of at),
    CONTENT#8378(   least one challenge that indicates the authentication scheme(s) and),
    CONTENT#8379(   parameters applicable to the Request-URI.),
      BREAK#8380,
    CONTENT#8381(       WWW-Authenticate  = "WWW-Authenticate" ":" 1#challenge),
      BREAK#8382,
    CONTENT#8383(   The HTTP access authentication process is described in "HTTP),
    CONTENT#8384(   Authentication: Basic and Digest Access Authentication" [43]. User),
    CONTENT#8385(   agents are advised to take special care in parsing the WWW-),
    CONTENT#8386(   Authenticate field value as it might contain more than one challenge,),
    CONTENT#8387(   or if more than one WWW-Authenticate header field is provided, the),
    CONTENT#8388(   contents of a challenge itself can contain a comma-separated list of),
    CONTENT#8389(   authentication parameters.),
      BREAK#8390,
    SECTION#8391(id=15, title=Security Considerations),
      BREAK#8392,
    CONTENT#8393(   This section is meant to inform application developers, information),
    CONTENT#8394(   providers, and users of the security limitations in HTTP/1.1 as),
    CONTENT#8395(   described by this document. The discussion does not include),
    CONTENT#8396(   definitive solutions to the problems revealed, though it does make),
    CONTENT#8397(   some suggestions for reducing security risks.),
      BREAK#8398,
      BREAK#8399,
      BREAK#8400,
      BREAK#8402,
      BREAK#8404,
      BREAK#8405,
    SECTION#8406(id=15.1, title=Personal Information),
      BREAK#8407,
    CONTENT#8408(   HTTP clients are often privy to large amounts of personal information),
    CONTENT#8409(   (e.g. the user's name, location, mail address, passwords, encryption),
    CONTENT#8410(   keys, etc.), and SHOULD be very careful to prevent unintentional),
    CONTENT#8411(   leakage of this information via the HTTP protocol to other sources.),
    CONTENT#8412(   We very strongly recommend that a convenient interface be provided),
    CONTENT#8413(   for the user to control dissemination of such information, and that),
    CONTENT#8414(   designers and implementors be particularly careful in this area.),
    CONTENT#8415(   History shows that errors in this area often create serious security),
    CONTENT#8416(   and/or privacy problems and generate highly adverse publicity for the),
    CONTENT#8417(   implementor's company.),
      BREAK#8418,
    SECTION#8419(id=15.1.1, title=Abuse of Server Log Information),
      BREAK#8420,
    CONTENT#8421(   A server is in the position to save personal data about a user's),
    CONTENT#8422(   requests which might identify their reading patterns or subjects of),
    CONTENT#8423(   interest. This information is clearly confidential in nature and its),
    CONTENT#8424(   handling can be constrained by law in certain countries. People using),
    CONTENT#8425(   the HTTP protocol to provide data are responsible for ensuring that),
    CONTENT#8426(   such material is not distributed without the permission of any),
    CONTENT#8427(   individuals that are identifiable by the published results.),
      BREAK#8428,
    SECTION#8429(id=15.1.2, title=Transfer of Sensitive Information),
      BREAK#8430,
    CONTENT#8431(   Like any generic data transfer protocol, HTTP cannot regulate the),
    CONTENT#8432(   content of the data that is transferred, nor is there any a priori),
    CONTENT#8433(   method of determining the sensitivity of any particular piece of),
    CONTENT#8434(   information within the context of any given request. Therefore,),
    CONTENT#8435(   applications SHOULD supply as much control over this information as),
    CONTENT#8436(   possible to the provider of that information. Four header fields are),
    CONTENT#8437(   worth special mention in this context: Server, Via, Referer and From.),
      BREAK#8438,
    CONTENT#8439(   Revealing the specific software version of the server might allow the),
    CONTENT#8440(   server machine to become more vulnerable to attacks against software),
    CONTENT#8441(   that is known to contain security holes. Implementors SHOULD make the),
    CONTENT#8442(   Server header field a configurable option.),
      BREAK#8443,
    CONTENT#8444(   Proxies which serve as a portal through a network firewall SHOULD),
    CONTENT#8445(   take special precautions regarding the transfer of header information),
    CONTENT#8446(   that identifies the hosts behind the firewall. In particular, they),
    CONTENT#8447(   SHOULD remove, or replace with sanitized versions, any Via fields),
    CONTENT#8448(   generated behind the firewall.),
      BREAK#8449,
    CONTENT#8450(   The Referer header allows reading patterns to be studied and reverse),
    CONTENT#8451(   links drawn. Although it can be very useful, its power can be abused),
    CONTENT#8452(   if user details are not separated from the information contained in),
      BREAK#8453,
      BREAK#8454,
      BREAK#8455,
      BREAK#8456,
      BREAK#8458,
      BREAK#8460,
      BREAK#8461,
    CONTENT#8462(   the Referer. Even when the personal information has been removed, the),
    CONTENT#8463(   Referer header might indicate a private document's URI whose),
    CONTENT#8464(   publication would be inappropriate.),
      BREAK#8465,
    CONTENT#8466(   The information sent in the From field might conflict with the user's),
    CONTENT#8467(   privacy interests or their site's security policy, and hence it),
    CONTENT#8468(   SHOULD NOT be transmitted without the user being able to disable,),
    CONTENT#8469(   enable, and modify the contents of the field. The user MUST be able),
    CONTENT#8470(   to set the contents of this field within a user preference or),
    CONTENT#8471(   application defaults configuration.),
      BREAK#8472,
    CONTENT#8473(   We suggest, though do not require, that a convenient toggle interface),
    CONTENT#8474(   be provided for the user to enable or disable the sending of From and),
    CONTENT#8475(   Referer information.),
      BREAK#8476,
    CONTENT#8477(   The User-Agent (section 14.43) or Server (section 14.38) header),
    CONTENT#8478(   fields can sometimes be used to determine that a specific client or),
    CONTENT#8479(   server have a particular security hole which might be exploited.),
    CONTENT#8480(   Unfortunately, this same information is often used for other valuable),
    CONTENT#8481(   purposes for which HTTP currently has no better mechanism.),
      BREAK#8482,
    SECTION#8483(id=15.1.3, title=Encoding Sensitive Information in URI's),
      BREAK#8484,
    CONTENT#8485(   Because the source of a link might be private information or might),
    CONTENT#8486(   reveal an otherwise private information source, it is strongly),
    CONTENT#8487(   recommended that the user be able to select whether or not the),
    CONTENT#8488(   Referer field is sent. For example, a browser client could have a),
    CONTENT#8489(   toggle switch for browsing openly/anonymously, which would),
    CONTENT#8490(   respectively enable/disable the sending of Referer and From),
    CONTENT#8491(   information.),
      BREAK#8492,
    CONTENT#8493(   Clients SHOULD NOT include a Referer header field in a (non-secure)),
    CONTENT#8494(   HTTP request if the referring page was transferred with a secure),
    CONTENT#8495(   protocol.),
      BREAK#8496,
    CONTENT#8497(   Authors of services which use the HTTP protocol SHOULD NOT use GET),
    CONTENT#8498(   based forms for the submission of sensitive data, because this will),
    CONTENT#8499(   cause this data to be encoded in the Request-URI. Many existing),
    CONTENT#8500(   servers, proxies, and user agents will log the request URI in some),
    CONTENT#8501(   place where it might be visible to third parties. Servers can use),
    CONTENT#8502(   POST-based form submission instead),
      BREAK#8503,
    SECTION#8504(id=15.1.4, title=Privacy Issues Connected to Accept Headers),
      BREAK#8505,
    CONTENT#8506(   Accept request-headers can reveal information about the user to all),
    CONTENT#8507(   servers which are accessed. The Accept-Language header in particular),
    CONTENT#8508(   can reveal information the user would consider to be of a private),
    CONTENT#8509(   nature, because the understanding of particular languages is often),
      BREAK#8510,
      BREAK#8511,
      BREAK#8512,
      BREAK#8514,
      BREAK#8516,
      BREAK#8517,
    CONTENT#8518(   strongly correlated to the membership of a particular ethnic group.),
    CONTENT#8519(   User agents which offer the option to configure the contents of an),
    CONTENT#8520(   Accept-Language header to be sent in every request are strongly),
    CONTENT#8521(   encouraged to let the configuration process include a message which),
    CONTENT#8522(   makes the user aware of the loss of privacy involved.),
      BREAK#8523,
    CONTENT#8524(   An approach that limits the loss of privacy would be for a user agent),
    CONTENT#8525(   to omit the sending of Accept-Language headers by default, and to ask),
    CONTENT#8526(   the user whether or not to start sending Accept-Language headers to a),
    CONTENT#8527(   server if it detects, by looking for any Vary response-header fields),
    CONTENT#8528(   generated by the server, that such sending could improve the quality),
    CONTENT#8529(   of service.),
      BREAK#8530,
    CONTENT#8531(   Elaborate user-customized accept header fields sent in every request,),
    CONTENT#8532(   in particular if these include quality values, can be used by servers),
    CONTENT#8533(   as relatively reliable and long-lived user identifiers. Such user),
    CONTENT#8534(   identifiers would allow content providers to do click-trail tracking,),
    CONTENT#8535(   and would allow collaborating content providers to match cross-server),
    CONTENT#8536(   click-trails or form submissions of individual users. Note that for),
    CONTENT#8537(   many users not behind a proxy, the network address of the host),
    CONTENT#8538(   running the user agent will also serve as a long-lived user),
    CONTENT#8539(   identifier. In environments where proxies are used to enhance),
    CONTENT#8540(   privacy, user agents ought to be conservative in offering accept),
    CONTENT#8541(   header configuration options to end users. As an extreme privacy),
    CONTENT#8542(   measure, proxies could filter the accept headers in relayed requests.),
    CONTENT#8543(   General purpose user agents which provide a high degree of header),
    CONTENT#8544(   configurability SHOULD warn users about the loss of privacy which can),
    CONTENT#8545(   be involved.),
      BREAK#8546,
    SECTION#8547(id=15.2, title=Attacks Based On File and Path Names),
      BREAK#8548,
    CONTENT#8549(   Implementations of HTTP origin servers SHOULD be careful to restrict),
    CONTENT#8550(   the documents returned by HTTP requests to be only those that were),
    CONTENT#8551(   intended by the server administrators. If an HTTP server translates),
    CONTENT#8552(   HTTP URIs directly into file system calls, the server MUST take),
    CONTENT#8553(   special care not to serve files that were not intended to be),
    CONTENT#8554(   delivered to HTTP clients. For example, UNIX, Microsoft Windows, and),
    CONTENT#8555(   other operating systems use ".." as a path component to indicate a),
    CONTENT#8556(   directory level above the current one. On such a system, an HTTP),
    CONTENT#8557(   server MUST disallow any such construct in the Request-URI if it),
    CONTENT#8558(   would otherwise allow access to a resource outside those intended to),
    CONTENT#8559(   be accessible via the HTTP server. Similarly, files intended for),
    CONTENT#8560(   reference only internally to the server (such as access control),
    CONTENT#8561(   files, configuration files, and script code) MUST be protected from),
    CONTENT#8562(   inappropriate retrieval, since they might contain sensitive),
    CONTENT#8563(   information. Experience has shown that minor bugs in such HTTP server),
    CONTENT#8564(   implementations have turned into security risks.),
      BREAK#8565,
      BREAK#8566,
      BREAK#8567,
      BREAK#8568,
      BREAK#8570,
      BREAK#8572,
      BREAK#8573,
    SECTION#8574(id=15.3, title=DNS Spoofing),
      BREAK#8575,
    CONTENT#8576(   Clients using HTTP rely heavily on the Domain Name Service, and are),
    CONTENT#8577(   thus generally prone to security attacks based on the deliberate),
    CONTENT#8578(   mis-association of IP addresses and DNS names. Clients need to be),
    CONTENT#8579(   cautious in assuming the continuing validity of an IP number/DNS name),
    CONTENT#8580(   association.),
      BREAK#8581,
    CONTENT#8582(   In particular, HTTP clients SHOULD rely on their name resolver for),
    CONTENT#8583(   confirmation of an IP number/DNS name association, rather than),
    CONTENT#8584(   caching the result of previous host name lookups. Many platforms),
    CONTENT#8585(   already can cache host name lookups locally when appropriate, and),
    CONTENT#8586(   they SHOULD be configured to do so. It is proper for these lookups to),
    CONTENT#8587(   be cached, however, only when the TTL (Time To Live) information),
    CONTENT#8588(   reported by the name server makes it likely that the cached),
    CONTENT#8589(   information will remain useful.),
      BREAK#8590,
    CONTENT#8591(   If HTTP clients cache the results of host name lookups in order to),
    CONTENT#8592(   achieve a performance improvement, they MUST observe the TTL),
    CONTENT#8593(   information reported by DNS.),
      BREAK#8594,
    CONTENT#8595(   If HTTP clients do not observe this rule, they could be spoofed when),
    CONTENT#8596(   a previously-accessed server's IP address changes. As network),
    CONTENT#8597(   renumbering is expected to become increasingly common [24], the),
    CONTENT#8598(   possibility of this form of attack will grow. Observing this),
    CONTENT#8599(   requirement thus reduces this potential security vulnerability.),
      BREAK#8600,
    CONTENT#8601(   This requirement also improves the load-balancing behavior of clients),
    CONTENT#8602(   for replicated servers using the same DNS name and reduces the),
    CONTENT#8603(   likelihood of a user's experiencing failure in accessing sites which),
    CONTENT#8604(   use that strategy.),
      BREAK#8605,
    SECTION#8606(id=15.4, title=Location Headers and Spoofing),
      BREAK#8607,
    CONTENT#8608(   If a single server supports multiple organizations that do not trust),
    CONTENT#8609(   one another, then it MUST check the values of Location and Content-),
    CONTENT#8610(   Location headers in responses that are generated under control of),
    CONTENT#8611(   said organizations to make sure that they do not attempt to),
    CONTENT#8612(   invalidate resources over which they have no authority.),
      BREAK#8613,
    SECTION#8614(id=15.5, title=Content-Disposition Issues),
      BREAK#8615,
    CONTENT#8616(   RFC 1806 [35], from which the often implemented Content-Disposition),
    CONTENT#8617(   (see section 19.5.1) header in HTTP is derived, has a number of very),
    CONTENT#8618(   serious security considerations. Content-Disposition is not part of),
    CONTENT#8619(   the HTTP standard, but since it is widely implemented, we are),
    CONTENT#8620(   documenting its use and risks for implementors. See RFC 2183 [49]),
    CONTENT#8621(   (which updates RFC 1806) for details.),
      BREAK#8622,
      BREAK#8623,
      BREAK#8624,
      BREAK#8626,
      BREAK#8628,
      BREAK#8629,
    SECTION#8630(id=15.6, title=Authentication Credentials and Idle Clients),
      BREAK#8631,
    CONTENT#8632(   Existing HTTP clients and user agents typically retain authentication),
    CONTENT#8633(   information indefinitely. HTTP/1.1. does not provide a method for a),
    CONTENT#8634(   server to direct clients to discard these cached credentials. This is),
    CONTENT#8635(   a significant defect that requires further extensions to HTTP.),
    CONTENT#8636(   Circumstances under which credential caching can interfere with the),
    CONTENT#8637(   application's security model include but are not limited to:),
      BREAK#8638,
    CONTENT#8639(      - Clients which have been idle for an extended period following),
    CONTENT#8640(        which the server might wish to cause the client to reprompt the),
    CONTENT#8641(        user for credentials.),
      BREAK#8642,
    CONTENT#8643(      - Applications which include a session termination indication),
    CONTENT#8644(        (such as a `logout' or `commit' button on a page) after which),
    CONTENT#8645(        the server side of the application `knows' that there is no),
    CONTENT#8646(        further reason for the client to retain the credentials.),
      BREAK#8647,
    CONTENT#8648(   This is currently under separate study. There are a number of work-),
    CONTENT#8649(   arounds to parts of this problem, and we encourage the use of),
    CONTENT#8650(   password protection in screen savers, idle time-outs, and other),
    CONTENT#8651(   methods which mitigate the security problems inherent in this),
    CONTENT#8652(   problem. In particular, user agents which cache credentials are),
    CONTENT#8653(   encouraged to provide a readily accessible mechanism for discarding),
    CONTENT#8654(   cached credentials under user control.),
      BREAK#8655,
    SECTION#8656(id=15.7, title=Proxies and Caching),
      BREAK#8657,
    CONTENT#8658(   By their very nature, HTTP proxies are men-in-the-middle, and),
    CONTENT#8659(   represent an opportunity for man-in-the-middle attacks. Compromise of),
    CONTENT#8660(   the systems on which the proxies run can result in serious security),
    CONTENT#8661(   and privacy problems. Proxies have access to security-related),
    CONTENT#8662(   information, personal information about individual users and),
    CONTENT#8663(   organizations, and proprietary information belonging to users and),
    CONTENT#8664(   content providers. A compromised proxy, or a proxy implemented or),
    CONTENT#8665(   configured without regard to security and privacy considerations,),
    CONTENT#8666(   might be used in the commission of a wide range of potential attacks.),
      BREAK#8667,
    CONTENT#8668(   Proxy operators should protect the systems on which proxies run as),
    CONTENT#8669(   they would protect any system that contains or transports sensitive),
    CONTENT#8670(   information. In particular, log information gathered at proxies often),
    CONTENT#8671(   contains highly sensitive personal information, and/or information),
    CONTENT#8672(   about organizations. Log information should be carefully guarded, and),
    CONTENT#8673(   appropriate guidelines for use developed and followed. (Section),
    CONTENT#8674(   15.1.1).),
      BREAK#8675,
      BREAK#8676,
      BREAK#8677,
      BREAK#8678,
      BREAK#8679,
      BREAK#8680,
      BREAK#8682,
      BREAK#8684,
      BREAK#8685,
    CONTENT#8686(   Caching proxies provide additional potential vulnerabilities, since),
    CONTENT#8687(   the contents of the cache represent an attractive target for),
    CONTENT#8688(   malicious exploitation. Because cache contents persist after an HTTP),
    CONTENT#8689(   request is complete, an attack on the cache can reveal information),
    CONTENT#8690(   long after a user believes that the information has been removed from),
    CONTENT#8691(   the network. Therefore, cache contents should be protected as),
    CONTENT#8692(   sensitive information.),
      BREAK#8693,
    CONTENT#8694(   Proxy implementors should consider the privacy and security),
    CONTENT#8695(   implications of their design and coding decisions, and of the),
    CONTENT#8696(   configuration options they provide to proxy operators (especially the),
    CONTENT#8697(   default configuration).),
      BREAK#8698,
    CONTENT#8699(   Users of a proxy need to be aware that they are no trustworthier than),
    CONTENT#8700(   the people who run the proxy; HTTP itself cannot solve this problem.),
      BREAK#8701,
    CONTENT#8702(   The judicious use of cryptography, when appropriate, may suffice to),
    CONTENT#8703(   protect against a broad range of security and privacy attacks. Such),
    CONTENT#8704(   cryptography is beyond the scope of the HTTP/1.1 specification.),
      BREAK#8705,
    SECTION#8706(id=15.7.1, title=Denial of Service Attacks on Proxies),
      BREAK#8707,
    CONTENT#8708(   They exist. They are hard to defend against. Research continues.),
    CONTENT#8709(   Beware.),
      BREAK#8710,
    SECTION#8711(id=16, title=Acknowledgments),
      BREAK#8712,
    CONTENT#8713(   This specification makes heavy use of the augmented BNF and generic),
    CONTENT#8714(   constructs defined by David H. Crocker for RFC 822 [9]. Similarly, it),
    CONTENT#8715(   reuses many of the definitions provided by Nathaniel Borenstein and),
    CONTENT#8716(   Ned Freed for MIME [7]. We hope that their inclusion in this),
    CONTENT#8717(   specification will help reduce past confusion over the relationship),
    CONTENT#8718(   between HTTP and Internet mail message formats.),
      BREAK#8719,
    CONTENT#8720(   The HTTP protocol has evolved considerably over the years. It has),
    CONTENT#8721(   benefited from a large and active developer community--the many),
    CONTENT#8722(   people who have participated on the www-talk mailing list--and it is),
    CONTENT#8723(   that community which has been most responsible for the success of),
    CONTENT#8724(   HTTP and of the World-Wide Web in general. Marc Andreessen, Robert),
    CONTENT#8725(   Cailliau, Daniel W. Connolly, Bob Denny, John Franks, Jean-Francois),
    CONTENT#8726(   Groff, Phillip M. Hallam-Baker, Hakon W. Lie, Ari Luotonen, Rob),
    CONTENT#8727(   McCool, Lou Montulli, Dave Raggett, Tony Sanders, and Marc),
    CONTENT#8728(   VanHeyningen deserve special recognition for their efforts in),
    CONTENT#8729(   defining early aspects of the protocol.),
      BREAK#8730,
    CONTENT#8731(   This document has benefited greatly from the comments of all those),
    CONTENT#8732(   participating in the HTTP-WG. In addition to those already mentioned,),
    CONTENT#8733(   the following individuals have contributed to this specification:),
      BREAK#8734,
      BREAK#8735,
      BREAK#8736,
      BREAK#8738,
      BREAK#8740,
      BREAK#8741,
    CONTENT#8742(       Gary Adams                  Ross Patterson),
    CONTENT#8743(       Harald Tveit Alvestrand     Albert Lunde),
    CONTENT#8744(       Keith Ball                  John C. Mallery),
    CONTENT#8745(       Brian Behlendorf            Jean-Philippe Martin-Flatin),
    CONTENT#8746(       Paul Burchard               Mitra),
    CONTENT#8747(       Maurizio Codogno            David Morris),
    CONTENT#8748(       Mike Cowlishaw              Gavin Nicol),
    CONTENT#8749(       Roman Czyborra              Bill Perry),
    CONTENT#8750(       Michael A. Dolan            Jeffrey Perry),
    CONTENT#8751(       David J. Fiander            Scott Powers),
    CONTENT#8752(       Alan Freier                 Owen Rees),
    CONTENT#8753(       Marc Hedlund                Luigi Rizzo),
    CONTENT#8754(       Greg Herlihy                David Robinson),
    CONTENT#8755(       Koen Holtman                Marc Salomon),
    CONTENT#8756(       Alex Hopmann                Rich Salz),
    CONTENT#8757(       Bob Jernigan                Allan M. Schiffman),
    CONTENT#8758(       Shel Kaphan                 Jim Seidman),
    CONTENT#8759(       Rohit Khare                 Chuck Shotton),
    CONTENT#8760(       John Klensin                Eric W. Sink),
    CONTENT#8761(       Martijn Koster              Simon E. Spero),
    CONTENT#8762(       Alexei Kosut                Richard N. Taylor),
    CONTENT#8763(       David M. Kristol            Robert S. Thau),
    CONTENT#8764(       Daniel LaLiberte            Bill (BearHeart) Weinman),
    CONTENT#8765(       Ben Laurie                  Francois Yergeau),
    CONTENT#8766(       Paul J. Leach               Mary Ellen Zurko),
    CONTENT#8767(       Daniel DuBois               Josh Cohen),
      BREAK#8768,
      BREAK#8769,
    CONTENT#8770(   Much of the content and presentation of the caching design is due to),
    CONTENT#8771(   suggestions and comments from individuals including: Shel Kaphan,),
    CONTENT#8772(   Paul Leach, Koen Holtman, David Morris, and Larry Masinter.),
      BREAK#8773,
    CONTENT#8774(   Most of the specification of ranges is based on work originally done),
    CONTENT#8775(   by Ari Luotonen and John Franks, with additional input from Steve),
    CONTENT#8776(   Zilles.),
      BREAK#8777,
    CONTENT#8778(   Thanks to the "cave men" of Palo Alto. You know who you are.),
      BREAK#8779,
    CONTENT#8780(   Jim Gettys (the current editor of this document) wishes particularly),
    CONTENT#8781(   to thank Roy Fielding, the previous editor of this document, along),
    CONTENT#8782(   with John Klensin, Jeff Mogul, Paul Leach, Dave Kristol, Koen),
    CONTENT#8783(   Holtman, John Franks, Josh Cohen, Alex Hopmann, Scott Lawrence, and),
    CONTENT#8784(   Larry Masinter for their help. And thanks go particularly to Jeff),
    CONTENT#8785(   Mogul and Scott Lawrence for performing the "MUST/MAY/SHOULD" audit.),
      BREAK#8786,
      BREAK#8787,
      BREAK#8788,
      BREAK#8789,
      BREAK#8790,
      BREAK#8791,
      BREAK#8792,
      BREAK#8794,
      BREAK#8796,
      BREAK#8797,
    CONTENT#8798(   The Apache Group, Anselm Baird-Smith, author of Jigsaw, and Henrik),
    CONTENT#8799(   Frystyk implemented RFC 2068 early, and we wish to thank them for the),
    CONTENT#8800(   discovery of many of the problems that this document attempts to),
    CONTENT#8801(   rectify.),
      BREAK#8802,
    SECTION#8803(id=17, title=References),
      BREAK#8804,
    CONTENT#8805(   [1] Alvestrand, H., "Tags for the Identification of Languages", RFC),
    CONTENT#8806(       1766, March 1995.),
      BREAK#8807,
    CONTENT#8808(   [2] Anklesaria, F., McCahill, M., Lindner, P., Johnson, D., Torrey,),
    CONTENT#8809(       D. and B. Alberti, "The Internet Gopher Protocol (a distributed),
    CONTENT#8810(       document search and retrieval protocol)", RFC 1436, March 1993.),
      BREAK#8811,
    CONTENT#8812(   [3] Berners-Lee, T., "Universal Resource Identifiers in WWW", RFC),
    CONTENT#8813(       1630, June 1994.),
      BREAK#8814,
    CONTENT#8815(   [4] Berners-Lee, T., Masinter, L. and M. McCahill, "Uniform Resource),
    CONTENT#8816(       Locators (URL)", RFC 1738, December 1994.),
      BREAK#8817,
    CONTENT#8818(   [5] Berners-Lee, T. and D. Connolly, "Hypertext Markup Language -),
    CONTENT#8819(       2.0", RFC 1866, November 1995.),
      BREAK#8820,
    CONTENT#8821(   [6] Berners-Lee, T., Fielding, R. and H. Frystyk, "Hypertext Transfer),
    CONTENT#8822(       Protocol -- HTTP/1.0", RFC 1945, May 1996.),
      BREAK#8823,
    CONTENT#8824(   [7] Freed, N. and N. Borenstein, "Multipurpose Internet Mail),
    CONTENT#8825(       Extensions (MIME) Part One: Format of Internet Message Bodies",),
    CONTENT#8826(       RFC 2045, November 1996.),
      BREAK#8827,
    CONTENT#8828(   [8] Braden, R., "Requirements for Internet Hosts -- Communication),
    CONTENT#8829(       Layers", STD 3, RFC 1123, October 1989.),
      BREAK#8830,
    CONTENT#8831(   [9] Crocker, D., "Standard for The Format of ARPA Internet Text),
    CONTENT#8832(       Messages", STD 11, RFC 822, August 1982.),
      BREAK#8833,
    CONTENT#8834(   [10] Davis, F., Kahle, B., Morris, H., Salem, J., Shen, T., Wang, R.,),
    CONTENT#8835(        Sui, J., and M. Grinbaum, "WAIS Interface Protocol Prototype),
    CONTENT#8836(        Functional Specification," (v1.5), Thinking Machines),
    CONTENT#8837(        Corporation, April 1990.),
      BREAK#8838,
    CONTENT#8839(   [11] Fielding, R., "Relative Uniform Resource Locators", RFC 1808,),
    CONTENT#8840(        June 1995.),
      BREAK#8841,
    CONTENT#8842(   [12] Horton, M. and R. Adams, "Standard for Interchange of USENET),
    CONTENT#8843(        Messages", RFC 1036, December 1987.),
      BREAK#8844,
      BREAK#8845,
      BREAK#8846,
      BREAK#8847,
      BREAK#8848,
      BREAK#8850,
      BREAK#8852,
      BREAK#8853,
    CONTENT#8854(   [13] Kantor, B. and P. Lapsley, "Network News Transfer Protocol", RFC),
    CONTENT#8855(        977, February 1986.),
      BREAK#8856,
    CONTENT#8857(   [14] Moore, K., "MIME (Multipurpose Internet Mail Extensions) Part),
    CONTENT#8858(        Three: Message Header Extensions for Non-ASCII Text", RFC 2047,),
    CONTENT#8859(        November 1996.),
      BREAK#8860,
    CONTENT#8861(   [15] Nebel, E. and L. Masinter, "Form-based File Upload in HTML", RFC),
    CONTENT#8862(        1867, November 1995.),
      BREAK#8863,
    CONTENT#8864(   [16] Postel, J., "Simple Mail Transfer Protocol", STD 10, RFC 821,),
    CONTENT#8865(        August 1982.),
      BREAK#8866,
    CONTENT#8867(   [17] Postel, J., "Media Type Registration Procedure", RFC 1590,),
    CONTENT#8868(        November 1996.),
      BREAK#8869,
    CONTENT#8870(   [18] Postel, J. and J. Reynolds, "File Transfer Protocol", STD 9, RFC),
    CONTENT#8871(        959, October 1985.),
      BREAK#8872,
    CONTENT#8873(   [19] Reynolds, J. and J. Postel, "Assigned Numbers", STD 2, RFC 1700,),
    CONTENT#8874(        October 1994.),
      BREAK#8875,
    CONTENT#8876(   [20] Sollins, K. and L. Masinter, "Functional Requirements for),
    CONTENT#8877(        Uniform Resource Names", RFC 1737, December 1994.),
      BREAK#8878,
    CONTENT#8879(   [21] US-ASCII. Coded Character Set - 7-Bit American Standard Code for),
    CONTENT#8880(        Information Interchange. Standard ANSI X3.4-1986, ANSI, 1986.),
      BREAK#8881,
    CONTENT#8882(   [22] ISO-8859. International Standard -- Information Processing --),
    CONTENT#8883(        8-bit Single-Byte Coded Graphic Character Sets --),
    CONTENT#8884(        Part 1: Latin alphabet No. 1, ISO-8859-1:1987.),
    CONTENT#8885(        Part 2: Latin alphabet No. 2, ISO-8859-2, 1987.),
    CONTENT#8886(        Part 3: Latin alphabet No. 3, ISO-8859-3, 1988.),
    CONTENT#8887(        Part 4: Latin alphabet No. 4, ISO-8859-4, 1988.),
    CONTENT#8888(        Part 5: Latin/Cyrillic alphabet, ISO-8859-5, 1988.),
    CONTENT#8889(        Part 6: Latin/Arabic alphabet, ISO-8859-6, 1987.),
    CONTENT#8890(        Part 7: Latin/Greek alphabet, ISO-8859-7, 1987.),
    CONTENT#8891(        Part 8: Latin/Hebrew alphabet, ISO-8859-8, 1988.),
    CONTENT#8892(        Part 9: Latin alphabet No. 5, ISO-8859-9, 1990.),
      BREAK#8893,
    CONTENT#8894(   [23] Meyers, J. and M. Rose, "The Content-MD5 Header Field", RFC),
    CONTENT#8895(        1864, October 1995.),
      BREAK#8896,
    CONTENT#8897(   [24] Carpenter, B. and Y. Rekhter, "Renumbering Needs Work", RFC),
    CONTENT#8898(        1900, February 1996.),
      BREAK#8899,
    CONTENT#8900(   [25] Deutsch, P., "GZIP file format specification version 4.3", RFC),
    CONTENT#8901(        1952, May 1996.),
      BREAK#8902,
      BREAK#8903,
      BREAK#8904,
      BREAK#8906,
      BREAK#8908,
      BREAK#8909,
    CONTENT#8910(   [26] Venkata N. Padmanabhan, and Jeffrey C. Mogul. "Improving HTTP),
    CONTENT#8911(        Latency", Computer Networks and ISDN Systems, v. 28, pp. 25-35,),
    CONTENT#8912(        Dec. 1995. Slightly revised version of paper in Proc. 2nd),
    CONTENT#8913(        International WWW Conference '94: Mosaic and the Web, Oct. 1994,),
    CONTENT#8914(        which is available at),
    CONTENT#8915(        http://www.ncsa.uiuc.edu/SDG/IT94/Proceedings/DDay/mogul/HTTPLat),
    CONTENT#8916(        ency.html.),
      BREAK#8917,
    CONTENT#8918(   [27] Joe Touch, John Heidemann, and Katia Obraczka. "Analysis of HTTP),
    CONTENT#8919(        Performance", <URL: http://www.isi.edu/touch/pubs/http-perf96/>,),
    CONTENT#8920(        ISI Research Report ISI/RR-98-463, (original report dated Aug.),
    CONTENT#8921(        1996), USC/Information Sciences Institute, August 1998.),
      BREAK#8922,
    CONTENT#8923(   [28] Mills, D., "Network Time Protocol (Version 3) Specification,),
    CONTENT#8924(        Implementation and Analysis", RFC 1305, March 1992.),
      BREAK#8925,
    CONTENT#8926(   [29] Deutsch, P., "DEFLATE Compressed Data Format Specification),
    CONTENT#8927(        version 1.3", RFC 1951, May 1996.),
      BREAK#8928,
    CONTENT#8929(   [30] S. Spero, "Analysis of HTTP Performance Problems,"),
    CONTENT#8930(        http://sunsite.unc.edu/mdma-release/http-prob.html.),
      BREAK#8931,
    CONTENT#8932(   [31] Deutsch, P. and J. Gailly, "ZLIB Compressed Data Format),
    CONTENT#8933(        Specification version 3.3", RFC 1950, May 1996.),
      BREAK#8934,
    CONTENT#8935(   [32] Franks, J., Hallam-Baker, P., Hostetler, J., Leach, P.,),
    CONTENT#8936(        Luotonen, A., Sink, E. and L. Stewart, "An Extension to HTTP:),
    CONTENT#8937(        Digest Access Authentication", RFC 2069, January 1997.),
      BREAK#8938,
    CONTENT#8939(   [33] Fielding, R., Gettys, J., Mogul, J., Frystyk, H. and T.),
    CONTENT#8940(        Berners-Lee, "Hypertext Transfer Protocol -- HTTP/1.1", RFC),
    CONTENT#8941(        2068, January 1997.),
      BREAK#8942,
    CONTENT#8943(   [34] Bradner, S., "Key words for use in RFCs to Indicate Requirement),
    CONTENT#8944(        Levels", BCP 14, RFC 2119, March 1997.),
      BREAK#8945,
    CONTENT#8946(   [35] Troost, R. and Dorner, S., "Communicating Presentation),
    CONTENT#8947(        Information in Internet Messages: The Content-Disposition),
    CONTENT#8948(        Header", RFC 1806, June 1995.),
      BREAK#8949,
    CONTENT#8950(   [36] Mogul, J., Fielding, R., Gettys, J. and H. Frystyk, "Use and),
    CONTENT#8951(        Interpretation of HTTP Version Numbers", RFC 2145, May 1997.),
    CONTENT#8952(        [jg639]),
      BREAK#8953,
    CONTENT#8954(   [37] Palme, J., "Common Internet Message Headers", RFC 2076, February),
    CONTENT#8955(        1997. [jg640]),
      BREAK#8956,
      BREAK#8957,
      BREAK#8958,
      BREAK#8959,
      BREAK#8960,
      BREAK#8962,
      BREAK#8964,
      BREAK#8965,
    CONTENT#8966(   [38] Yergeau, F., "UTF-8, a transformation format of Unicode and),
    CONTENT#8967(        ISO-10646", RFC 2279, January 1998. [jg641]),
      BREAK#8968,
    CONTENT#8969(   [39] Nielsen, H.F., Gettys, J., Baird-Smith, A., Prud'hommeaux, E.,),
    CONTENT#8970(        Lie, H., and C. Lilley. "Network Performance Effects of),
    CONTENT#8971(        HTTP/1.1, CSS1, and PNG," Proceedings of ACM SIGCOMM '97, Cannes),
    CONTENT#8972(        France, September 1997.[jg642]),
      BREAK#8973,
    CONTENT#8974(   [40] Freed, N. and N. Borenstein, "Multipurpose Internet Mail),
    CONTENT#8975(        Extensions (MIME) Part Two: Media Types", RFC 2046, November),
    CONTENT#8976(        1996. [jg643]),
      BREAK#8977,
    CONTENT#8978(   [41] Alvestrand, H., "IETF Policy on Character Sets and Languages",),
    CONTENT#8979(        BCP 18, RFC 2277, January 1998. [jg644]),
      BREAK#8980,
    CONTENT#8981(   [42] Berners-Lee, T., Fielding, R. and L. Masinter, "Uniform Resource),
    CONTENT#8982(        Identifiers (URI): Generic Syntax and Semantics", RFC 2396,),
    CONTENT#8983(        August 1998. [jg645]),
      BREAK#8984,
    CONTENT#8985(   [43] Franks, J., Hallam-Baker, P., Hostetler, J., Lawrence, S.,),
    CONTENT#8986(        Leach, P., Luotonen, A., Sink, E. and L. Stewart, "HTTP),
    CONTENT#8987(        Authentication: Basic and Digest Access Authentication", RFC),
    CONTENT#8988(        2617, June 1999. [jg646]),
      BREAK#8989,
    CONTENT#8990(   [44] Luotonen, A., "Tunneling TCP based protocols through Web proxy),
    CONTENT#8991(        servers," Work in Progress. [jg647]),
      BREAK#8992,
    CONTENT#8993(   [45] Palme, J. and A. Hopmann, "MIME E-mail Encapsulation of),
    CONTENT#8994(        Aggregate Documents, such as HTML (MHTML)", RFC 2110, March),
    CONTENT#8995(        1997.),
      BREAK#8996,
    CONTENT#8997(   [46] Bradner, S., "The Internet Standards Process -- Revision 3", BCP),
    CONTENT#8998(        9, RFC 2026, October 1996.),
      BREAK#8999,
    CONTENT#9000(   [47] Masinter, L., "Hyper Text Coffee Pot Control Protocol),
    CONTENT#9001(        (HTCPCP/1.0)", RFC 2324, 1 April 1998.),
      BREAK#9002,
    CONTENT#9003(   [48] Freed, N. and N. Borenstein, "Multipurpose Internet Mail),
    CONTENT#9004(        Extensions (MIME) Part Five: Conformance Criteria and Examples",),
    CONTENT#9005(        RFC 2049, November 1996.),
      BREAK#9006,
    CONTENT#9007(   [49] Troost, R., Dorner, S. and K. Moore, "Communicating Presentation),
    CONTENT#9008(        Information in Internet Messages: The Content-Disposition Header),
    CONTENT#9009(        Field", RFC 2183, August 1997.),
      BREAK#9010,
      BREAK#9011,
      BREAK#9012,
      BREAK#9013,
      BREAK#9014,
      BREAK#9015,
      BREAK#9016,
      BREAK#9018,
      BREAK#9020,
      BREAK#9021,
    SECTION#9022(id=18, title=Authors' Addresses),
      BREAK#9023,
    CONTENT#9024(   Roy T. Fielding),
    CONTENT#9025(   Information and Computer Science),
    CONTENT#9026(   University of California, Irvine),
    CONTENT#9027(   Irvine, CA 92697-3425, USA),
      BREAK#9028,
    CONTENT#9029(   Fax: +1 (949) 824-1715),
    CONTENT#9030(   EMail: fielding@ics.uci.edu),
      BREAK#9031,
      BREAK#9032,
    CONTENT#9033(   James Gettys),
    CONTENT#9034(   World Wide Web Consortium),
    CONTENT#9035(   MIT Laboratory for Computer Science),
    CONTENT#9036(   545 Technology Square),
    CONTENT#9037(   Cambridge, MA 02139, USA),
      BREAK#9038,
    CONTENT#9039(   Fax: +1 (617) 258 8682),
    CONTENT#9040(   EMail: jg@w3.org),
      BREAK#9041,
      BREAK#9042,
    CONTENT#9043(   Jeffrey C. Mogul),
    CONTENT#9044(   Western Research Laboratory),
    CONTENT#9045(   Compaq Computer Corporation),
    CONTENT#9046(   250 University Avenue),
    CONTENT#9047(   Palo Alto, California, 94305, USA),
      BREAK#9048,
    CONTENT#9049(   EMail: mogul@wrl.dec.com),
      BREAK#9050,
      BREAK#9051,
    CONTENT#9052(   Henrik Frystyk Nielsen),
    CONTENT#9053(   World Wide Web Consortium),
    CONTENT#9054(   MIT Laboratory for Computer Science),
    CONTENT#9055(   545 Technology Square),
    CONTENT#9056(   Cambridge, MA 02139, USA),
      BREAK#9057,
    CONTENT#9058(   Fax: +1 (617) 258 8682),
    CONTENT#9059(   EMail: frystyk@w3.org),
      BREAK#9060,
      BREAK#9061,
    CONTENT#9062(   Larry Masinter),
    CONTENT#9063(   Xerox Corporation),
    CONTENT#9064(   3333 Coyote Hill Road),
    CONTENT#9065(   Palo Alto, CA 94034, USA),
      BREAK#9066,
    CONTENT#9067(   EMail: masinter@parc.xerox.com),
      BREAK#9068,
      BREAK#9069,
      BREAK#9070,
      BREAK#9071,
      BREAK#9072,
      BREAK#9074,
      BREAK#9076,
      BREAK#9077,
    CONTENT#9078(   Paul J. Leach),
    CONTENT#9079(   Microsoft Corporation),
    CONTENT#9080(   1 Microsoft Way),
    CONTENT#9081(   Redmond, WA 98052, USA),
      BREAK#9082,
    CONTENT#9083(   EMail: paulle@microsoft.com),
      BREAK#9084,
      BREAK#9085,
    CONTENT#9086(   Tim Berners-Lee),
    CONTENT#9087(   Director, World Wide Web Consortium),
    CONTENT#9088(   MIT Laboratory for Computer Science),
    CONTENT#9089(   545 Technology Square),
    CONTENT#9090(   Cambridge, MA 02139, USA),
      BREAK#9091,
    CONTENT#9092(   Fax: +1 (617) 258 8682),
    CONTENT#9093(   EMail: timbl@w3.org),
      BREAK#9094,
      BREAK#9095,
      BREAK#9096,
      BREAK#9097,
      BREAK#9098,
      BREAK#9099,
      BREAK#9100,
      BREAK#9101,
      BREAK#9102,
      BREAK#9103,
      BREAK#9104,
      BREAK#9105,
      BREAK#9106,
      BREAK#9107,
      BREAK#9108,
      BREAK#9109,
      BREAK#9110,
      BREAK#9111,
      BREAK#9112,
      BREAK#9113,
      BREAK#9114,
      BREAK#9115,
      BREAK#9116,
      BREAK#9117,
      BREAK#9118,
      BREAK#9119,
      BREAK#9120,
      BREAK#9121,
      BREAK#9122,
      BREAK#9123,
      BREAK#9124,
      BREAK#9125,
      BREAK#9126,
      BREAK#9127,
      BREAK#9128,
      BREAK#9130,
      BREAK#9132,
      BREAK#9133,
    SECTION#9134(id=19, title=Appendices),
      BREAK#9135,
    SECTION#9136(id=19.1, title=Internet Media Type message/http and application/http),
      BREAK#9137,
    CONTENT#9138(   In addition to defining the HTTP/1.1 protocol, this document serves),
    CONTENT#9139(   as the specification for the Internet media type "message/http" and),
    CONTENT#9140(   "application/http". The message/http type can be used to enclose a),
    CONTENT#9141(   single HTTP request or response message, provided that it obeys the),
    CONTENT#9142(   MIME restrictions for all "message" types regarding line length and),
    CONTENT#9143(   encodings. The application/http type can be used to enclose a),
    CONTENT#9144(   pipeline of one or more HTTP request or response messages (not),
    CONTENT#9145(   intermixed). The following is to be registered with IANA [17].),
      BREAK#9146,
    CONTENT#9147(       Media Type name:         message),
    CONTENT#9148(       Media subtype name:      http),
    CONTENT#9149(       Required parameters:     none),
    CONTENT#9150(       Optional parameters:     version, msgtype),
    CONTENT#9151(        version: The HTTP-Version number of the enclosed message),
    CONTENT#9152(                 (e.g., "1.1"). If not present, the version can be),
    CONTENT#9153(                 determined from the first line of the body.),
    CONTENT#9154(        msgtype: The message type -- "request" or "response". If not),
    CONTENT#9155(                 present, the type can be determined from the first),
    CONTENT#9156(                 line of the body.),
    CONTENT#9157(       Encoding considerations: only "7bit", "8bit", or "binary" are),
    CONTENT#9158(                                permitted),
    CONTENT#9159(       Security considerations: none),
      BREAK#9160,
    CONTENT#9161(       Media Type name:         application),
    CONTENT#9162(       Media subtype name:      http),
    CONTENT#9163(       Required parameters:     none),
    CONTENT#9164(       Optional parameters:     version, msgtype),
    CONTENT#9165(        version: The HTTP-Version number of the enclosed messages),
    CONTENT#9166(                 (e.g., "1.1"). If not present, the version can be),
    CONTENT#9167(                 determined from the first line of the body.),
    CONTENT#9168(        msgtype: The message type -- "request" or "response". If not),
    CONTENT#9169(                 present, the type can be determined from the first),
    CONTENT#9170(                 line of the body.),
    CONTENT#9171(       Encoding considerations: HTTP messages enclosed by this type),
    CONTENT#9172(                 are in "binary" format; use of an appropriate),
    CONTENT#9173(                 Content-Transfer-Encoding is required when),
    CONTENT#9174(                 transmitted via E-mail.),
    CONTENT#9175(       Security considerations: none),
      BREAK#9176,
      BREAK#9177,
      BREAK#9178,
      BREAK#9179,
      BREAK#9180,
      BREAK#9181,
      BREAK#9182,
      BREAK#9183,
      BREAK#9184,
      BREAK#9186,
      BREAK#9188,
      BREAK#9189,
    SECTION#9190(id=19.2, title=Internet Media Type multipart/byteranges),
      BREAK#9191,
    CONTENT#9192(   When an HTTP 206 (Partial Content) response message includes the),
    CONTENT#9193(   content of multiple ranges (a response to a request for multiple),
    CONTENT#9194(   non-overlapping ranges), these are transmitted as a multipart),
    CONTENT#9195(   message-body. The media type for this purpose is called),
    CONTENT#9196(   "multipart/byteranges".),
      BREAK#9197,
    CONTENT#9198(   The multipart/byteranges media type includes two or more parts, each),
    CONTENT#9199(   with its own Content-Type and Content-Range fields. The required),
    CONTENT#9200(   boundary parameter specifies the boundary string used to separate),
    CONTENT#9201(   each body-part.),
      BREAK#9202,
    CONTENT#9203(       Media Type name:         multipart),
    CONTENT#9204(       Media subtype name:      byteranges),
    CONTENT#9205(       Required parameters:     boundary),
    CONTENT#9206(       Optional parameters:     none),
    CONTENT#9207(       Encoding considerations: only "7bit", "8bit", or "binary" are),
    CONTENT#9208(                                permitted),
    CONTENT#9209(       Security considerations: none),
      BREAK#9210,
      BREAK#9211,
    CONTENT#9212(   For example:),
      BREAK#9213,
    CONTENT#9214(   HTTP/1.1 206 Partial Content),
    CONTENT#9215(   Date: Wed, 15 Nov 1995 06:25:24 GMT),
    CONTENT#9216(   Last-Modified: Wed, 15 Nov 1995 04:58:08 GMT),
    CONTENT#9217(   Content-type: multipart/byteranges; boundary=THIS_STRING_SEPARATES),
      BREAK#9218,
    CONTENT#9219(   --THIS_STRING_SEPARATES),
    CONTENT#9220(   Content-type: application/pdf),
    CONTENT#9221(   Content-range: bytes 500-999/8000),
      BREAK#9222,
    CONTENT#9223(   ...the first range...),
    CONTENT#9224(   --THIS_STRING_SEPARATES),
    CONTENT#9225(   Content-type: application/pdf),
    CONTENT#9226(   Content-range: bytes 7000-7999/8000),
      BREAK#9227,
    CONTENT#9228(   ...the second range),
    CONTENT#9229(   --THIS_STRING_SEPARATES--),
      BREAK#9230,
    CONTENT#9231(      Notes:),
      BREAK#9232,
    CONTENT#9233(      1) Additional CRLFs may precede the first boundary string in the),
    CONTENT#9234(         entity.),
      BREAK#9235,
      BREAK#9236,
      BREAK#9237,
      BREAK#9238,
      BREAK#9239,
      BREAK#9240,
      BREAK#9242,
      BREAK#9244,
      BREAK#9245,
    CONTENT#9246(      2) Although RFC 2046 [40] permits the boundary string to be),
    CONTENT#9247(         quoted, some existing implementations handle a quoted boundary),
    CONTENT#9248(         string incorrectly.),
      BREAK#9249,
    CONTENT#9250(      3) A number of browsers and servers were coded to an early draft),
    CONTENT#9251(         of the byteranges specification to use a media type of),
    CONTENT#9252(         multipart/x-byteranges, which is almost, but not quite),
    CONTENT#9253(         compatible with the version documented in HTTP/1.1.),
      BREAK#9254,
    SECTION#9255(id=19.3, title=Tolerant Applications),
      BREAK#9256,
    CONTENT#9257(   Although this document specifies the requirements for the generation),
    CONTENT#9258(   of HTTP/1.1 messages, not all applications will be correct in their),
    CONTENT#9259(   implementation. We therefore recommend that operational applications),
    CONTENT#9260(   be tolerant of deviations whenever those deviations can be),
    CONTENT#9261(   interpreted unambiguously.),
      BREAK#9262,
    CONTENT#9263(   Clients SHOULD be tolerant in parsing the Status-Line and servers),
    CONTENT#9264(   tolerant when parsing the Request-Line. In particular, they SHOULD),
    CONTENT#9265(   accept any amount of SP or HT characters between fields, even though),
    CONTENT#9266(   only a single SP is required.),
      BREAK#9267,
    CONTENT#9268(   The line terminator for message-header fields is the sequence CRLF.),
    CONTENT#9269(   However, we recommend that applications, when parsing such headers,),
    CONTENT#9270(   recognize a single LF as a line terminator and ignore the leading CR.),
      BREAK#9271,
    CONTENT#9272(   The character set of an entity-body SHOULD be labeled as the lowest),
    CONTENT#9273(   common denominator of the character codes used within that body, with),
    CONTENT#9274(   the exception that not labeling the entity is preferred over labeling),
    CONTENT#9275(   the entity with the labels US-ASCII or ISO-8859-1. See section 3.7.1),
    CONTENT#9276(   and 3.4.1.),
      BREAK#9277,
    CONTENT#9278(   Additional rules for requirements on parsing and encoding of dates),
    CONTENT#9279(   and other potential problems with date encodings include:),
      BREAK#9280,
    CONTENT#9281(      - HTTP/1.1 clients and caches SHOULD assume that an RFC-850 date),
    CONTENT#9282(        which appears to be more than 50 years in the future is in fact),
    CONTENT#9283(        in the past (this helps solve the "year 2000" problem).),
      BREAK#9284,
    CONTENT#9285(      - An HTTP/1.1 implementation MAY internally represent a parsed),
    CONTENT#9286(        Expires date as earlier than the proper value, but MUST NOT),
    CONTENT#9287(        internally represent a parsed Expires date as later than the),
    CONTENT#9288(        proper value.),
      BREAK#9289,
    CONTENT#9290(      - All expiration-related calculations MUST be done in GMT. The),
    CONTENT#9291(        local time zone MUST NOT influence the calculation or comparison),
    CONTENT#9292(        of an age or expiration time.),
      BREAK#9293,
      BREAK#9294,
      BREAK#9295,
      BREAK#9296,
      BREAK#9298,
      BREAK#9300,
      BREAK#9301,
    CONTENT#9302(      - If an HTTP header incorrectly carries a date value with a time),
    CONTENT#9303(        zone other than GMT, it MUST be converted into GMT using the),
    CONTENT#9304(        most conservative possible conversion.),
      BREAK#9305,
    SECTION#9306(id=19.4, title=Differences Between HTTP Entities and RFC 2045 Entities),
      BREAK#9307,
    CONTENT#9308(   HTTP/1.1 uses many of the constructs defined for Internet Mail (RFC),
    CONTENT#9309(   822 [9]) and the Multipurpose Internet Mail Extensions (MIME [7]) to),
    CONTENT#9310(   allow entities to be transmitted in an open variety of),
    CONTENT#9311(   representations and with extensible mechanisms. However, RFC 2045),
    CONTENT#9312(   discusses mail, and HTTP has a few features that are different from),
    CONTENT#9313(   those described in RFC 2045. These differences were carefully chosen),
    CONTENT#9314(   to optimize performance over binary connections, to allow greater),
    CONTENT#9315(   freedom in the use of new media types, to make date comparisons),
    CONTENT#9316(   easier, and to acknowledge the practice of some early HTTP servers),
    CONTENT#9317(   and clients.),
      BREAK#9318,
    CONTENT#9319(   This appendix describes specific areas where HTTP differs from RFC),
    CONTENT#9320(   2045. Proxies and gateways to strict MIME environments SHOULD be),
    CONTENT#9321(   aware of these differences and provide the appropriate conversions),
    CONTENT#9322(   where necessary. Proxies and gateways from MIME environments to HTTP),
    CONTENT#9323(   also need to be aware of the differences because some conversions),
    CONTENT#9324(   might be required.),
      BREAK#9325,
    SECTION#9326(id=19.4.1, title=MIME-Version),
      BREAK#9327,
    CONTENT#9328(   HTTP is not a MIME-compliant protocol. However, HTTP/1.1 messages MAY),
    CONTENT#9329(   include a single MIME-Version general-header field to indicate what),
    CONTENT#9330(   version of the MIME protocol was used to construct the message. Use),
    CONTENT#9331(   of the MIME-Version header field indicates that the message is in),
    CONTENT#9332(   full compliance with the MIME protocol (as defined in RFC 2045[7]).),
    CONTENT#9333(   Proxies/gateways are responsible for ensuring full compliance (where),
    CONTENT#9334(   possible) when exporting HTTP messages to strict MIME environments.),
      BREAK#9335,
    CONTENT#9336(       MIME-Version   = "MIME-Version" ":" 1*DIGIT "." 1*DIGIT),
      BREAK#9337,
    CONTENT#9338(   MIME version "1.0" is the default for use in HTTP/1.1. However,),
    CONTENT#9339(   HTTP/1.1 message parsing and semantics are defined by this document),
    CONTENT#9340(   and not the MIME specification.),
      BREAK#9341,
    SECTION#9342(id=19.4.2, title=Conversion to Canonical Form),
      BREAK#9343,
    CONTENT#9344(   RFC 2045 [7] requires that an Internet mail entity be converted to),
    CONTENT#9345(   canonical form prior to being transferred, as described in section 4),
    CONTENT#9346(   of RFC 2049 [48]. Section 3.7.1 of this document describes the forms),
    CONTENT#9347(   allowed for subtypes of the "text" media type when transmitted over),
    CONTENT#9348(   HTTP. RFC 2046 requires that content with a type of "text" represent),
    CONTENT#9349(   line breaks as CRLF and forbids the use of CR or LF outside of line),
      BREAK#9350,
      BREAK#9351,
      BREAK#9352,
      BREAK#9354,
      BREAK#9356,
      BREAK#9357,
    CONTENT#9358(   break sequences. HTTP allows CRLF, bare CR, and bare LF to indicate a),
    CONTENT#9359(   line break within text content when a message is transmitted over),
    CONTENT#9360(   HTTP.),
      BREAK#9361,
    CONTENT#9362(   Where it is possible, a proxy or gateway from HTTP to a strict MIME),
    CONTENT#9363(   environment SHOULD translate all line breaks within the text media),
    CONTENT#9364(   types described in section 3.7.1 of this document to the RFC 2049),
    CONTENT#9365(   canonical form of CRLF. Note, however, that this might be complicated),
    CONTENT#9366(   by the presence of a Content-Encoding and by the fact that HTTP),
    CONTENT#9367(   allows the use of some character sets which do not use octets 13 and),
    CONTENT#9368(   10 to represent CR and LF, as is the case for some multi-byte),
    CONTENT#9369(   character sets.),
      BREAK#9370,
    CONTENT#9371(   Implementors should note that conversion will break any cryptographic),
    CONTENT#9372(   checksums applied to the original content unless the original content),
    CONTENT#9373(   is already in canonical form. Therefore, the canonical form is),
    CONTENT#9374(   recommended for any content that uses such checksums in HTTP.),
      BREAK#9375,
    SECTION#9376(id=19.4.3, title=Conversion of Date Formats),
      BREAK#9377,
    CONTENT#9378(   HTTP/1.1 uses a restricted set of date formats (section 3.3.1) to),
    CONTENT#9379(   simplify the process of date comparison. Proxies and gateways from),
    CONTENT#9380(   other protocols SHOULD ensure that any Date header field present in a),
    CONTENT#9381(   message conforms to one of the HTTP/1.1 formats and rewrite the date),
    CONTENT#9382(   if necessary.),
      BREAK#9383,
    SECTION#9384(id=19.4.4, title=Introduction of Content-Encoding),
      BREAK#9385,
    CONTENT#9386(   RFC 2045 does not include any concept equivalent to HTTP/1.1's),
    CONTENT#9387(   Content-Encoding header field. Since this acts as a modifier on the),
    CONTENT#9388(   media type, proxies and gateways from HTTP to MIME-compliant),
    CONTENT#9389(   protocols MUST either change the value of the Content-Type header),
    CONTENT#9390(   field or decode the entity-body before forwarding the message. (Some),
    CONTENT#9391(   experimental applications of Content-Type for Internet mail have used),
    CONTENT#9392(   a media-type parameter of ";conversions=<content-coding>" to perform),
    CONTENT#9393(   a function equivalent to Content-Encoding. However, this parameter is),
    CONTENT#9394(   not part of RFC 2045.)),
      BREAK#9395,
    SECTION#9396(id=19.4.5, title=No Content-Transfer-Encoding),
      BREAK#9397,
    CONTENT#9398(   HTTP does not use the Content-Transfer-Encoding (CTE) field of RFC),
    CONTENT#9399(   2045. Proxies and gateways from MIME-compliant protocols to HTTP MUST),
    CONTENT#9400(   remove any non-identity CTE ("quoted-printable" or "base64") encoding),
    CONTENT#9401(   prior to delivering the response message to an HTTP client.),
      BREAK#9402,
    CONTENT#9403(   Proxies and gateways from HTTP to MIME-compliant protocols are),
    CONTENT#9404(   responsible for ensuring that the message is in the correct format),
    CONTENT#9405(   and encoding for safe transport on that protocol, where "safe),
      BREAK#9406,
      BREAK#9407,
      BREAK#9408,
      BREAK#9410,
      BREAK#9412,
      BREAK#9413,
    CONTENT#9414(   transport" is defined by the limitations of the protocol being used.),
    CONTENT#9415(   Such a proxy or gateway SHOULD label the data with an appropriate),
    CONTENT#9416(   Content-Transfer-Encoding if doing so will improve the likelihood of),
    CONTENT#9417(   safe transport over the destination protocol.),
      BREAK#9418,
    SECTION#9419(id=19.4.6, title=Introduction of Transfer-Encoding),
      BREAK#9420,
    CONTENT#9421(   HTTP/1.1 introduces the Transfer-Encoding header field (section),
    CONTENT#9422(   14.41). Proxies/gateways MUST remove any transfer-coding prior to),
    CONTENT#9423(   forwarding a message via a MIME-compliant protocol.),
      BREAK#9424,
    CONTENT#9425(   A process for decoding the "chunked" transfer-coding (section 3.6)),
    CONTENT#9426(   can be represented in pseudo-code as:),
      BREAK#9427,
    CONTENT#9428(       length := 0),
    CONTENT#9429(       read chunk-size, chunk-extension (if any) and CRLF),
    CONTENT#9430(       while (chunk-size > 0) {),
    CONTENT#9431(          read chunk-data and CRLF),
    CONTENT#9432(          append chunk-data to entity-body),
    CONTENT#9433(          length := length + chunk-size),
    CONTENT#9434(          read chunk-size and CRLF),
    CONTENT#9435(       }),
    CONTENT#9436(       read entity-header),
    CONTENT#9437(       while (entity-header not empty) {),
    CONTENT#9438(          append entity-header to existing header fields),
    CONTENT#9439(          read entity-header),
    CONTENT#9440(       }),
    CONTENT#9441(       Content-Length := length),
    CONTENT#9442(       Remove "chunked" from Transfer-Encoding),
      BREAK#9443,
    SECTION#9444(id=19.4.7, title=MHTML and Line Length Limitations),
      BREAK#9445,
    CONTENT#9446(   HTTP implementations which share code with MHTML [45] implementations),
    CONTENT#9447(   need to be aware of MIME line length limitations. Since HTTP does not),
    CONTENT#9448(   have this limitation, HTTP does not fold long lines. MHTML messages),
    CONTENT#9449(   being transported by HTTP follow all conventions of MHTML, including),
    CONTENT#9450(   line length limitations and folding, canonicalization, etc., since),
    CONTENT#9451(   HTTP transports all message-bodies as payload (see section 3.7.2) and),
    CONTENT#9452(   does not interpret the content or any MIME header lines that might be),
    CONTENT#9453(   contained therein.),
      BREAK#9454,
    SECTION#9455(id=19.5, title=Additional Features),
      BREAK#9456,
    CONTENT#9457(   RFC 1945 and RFC 2068 document protocol elements used by some),
    CONTENT#9458(   existing HTTP implementations, but not consistently and correctly),
    CONTENT#9459(   across most HTTP/1.1 applications. Implementors are advised to be),
    CONTENT#9460(   aware of these features, but cannot rely upon their presence in, or),
    CONTENT#9461(   interoperability with, other HTTP/1.1 applications. Some of these),
      BREAK#9462,
      BREAK#9463,
      BREAK#9464,
      BREAK#9466,
      BREAK#9468,
      BREAK#9469,
    CONTENT#9470(   describe proposed experimental features, and some describe features),
    CONTENT#9471(   that experimental deployment found lacking that are now addressed in),
    CONTENT#9472(   the base HTTP/1.1 specification.),
      BREAK#9473,
    CONTENT#9474(   A number of other headers, such as Content-Disposition and Title,),
    CONTENT#9475(   from SMTP and MIME are also often implemented (see RFC 2076 [37]).),
      BREAK#9476,
    SECTION#9477(id=19.5.1, title=Content-Disposition),
      BREAK#9478,
    CONTENT#9479(   The Content-Disposition response-header field has been proposed as a),
    CONTENT#9480(   means for the origin server to suggest a default filename if the user),
    CONTENT#9481(   requests that the content is saved to a file. This usage is derived),
    CONTENT#9482(   from the definition of Content-Disposition in RFC 1806 [35].),
      BREAK#9483,
    CONTENT#9484(        content-disposition = "Content-Disposition" ":"),
    CONTENT#9485(                              disposition-type *( ";" disposition-parm )),
    CONTENT#9486(        disposition-type = "attachment" | disp-extension-token),
    CONTENT#9487(        disposition-parm = filename-parm | disp-extension-parm),
    CONTENT#9488(        filename-parm = "filename" "=" quoted-string),
    CONTENT#9489(        disp-extension-token = token),
    CONTENT#9490(        disp-extension-parm = token "=" ( token | quoted-string )),
      BREAK#9491,
    CONTENT#9492(   An example is),
      BREAK#9493,
    CONTENT#9494(        Content-Disposition: attachment; filename="fname.ext"),
      BREAK#9495,
    CONTENT#9496(   The receiving user agent SHOULD NOT respect any directory path),
    CONTENT#9497(   information present in the filename-parm parameter, which is the only),
    CONTENT#9498(   parameter believed to apply to HTTP implementations at this time. The),
    CONTENT#9499(   filename SHOULD be treated as a terminal component only.),
      BREAK#9500,
    CONTENT#9501(   If this header is used in a response with the application/octet-),
    CONTENT#9502(   stream content-type, the implied suggestion is that the user agent),
    CONTENT#9503(   should not display the response, but directly enter a `save response),
    CONTENT#9504(   as...' dialog.),
      BREAK#9505,
    CONTENT#9506(   See section 15.5 for Content-Disposition security issues.),
      BREAK#9507,
    SECTION#9508(id=19.6, title=Compatibility with Previous Versions),
      BREAK#9509,
    CONTENT#9510(   It is beyond the scope of a protocol specification to mandate),
    CONTENT#9511(   compliance with previous versions. HTTP/1.1 was deliberately),
    CONTENT#9512(   designed, however, to make supporting previous versions easy. It is),
    CONTENT#9513(   worth noting that, at the time of composing this specification),
    CONTENT#9514(   (1996), we would expect commercial HTTP/1.1 servers to:),
      BREAK#9515,
    CONTENT#9516(      - recognize the format of the Request-Line for HTTP/0.9, 1.0, and),
    CONTENT#9517(        1.1 requests;),
      BREAK#9518,
      BREAK#9519,
      BREAK#9520,
      BREAK#9522,
      BREAK#9524,
      BREAK#9525,
    CONTENT#9526(      - understand any valid request in the format of HTTP/0.9, 1.0, or),
    CONTENT#9527(        1.1;),
      BREAK#9528,
    CONTENT#9529(      - respond appropriately with a message in the same major version),
    CONTENT#9530(        used by the client.),
      BREAK#9531,
    CONTENT#9532(   And we would expect HTTP/1.1 clients to:),
      BREAK#9533,
    CONTENT#9534(      - recognize the format of the Status-Line for HTTP/1.0 and 1.1),
    CONTENT#9535(        responses;),
      BREAK#9536,
    CONTENT#9537(      - understand any valid response in the format of HTTP/0.9, 1.0, or),
    CONTENT#9538(        1.1.),
      BREAK#9539,
    CONTENT#9540(   For most implementations of HTTP/1.0, each connection is established),
    CONTENT#9541(   by the client prior to the request and closed by the server after),
    CONTENT#9542(   sending the response. Some implementations implement the Keep-Alive),
    CONTENT#9543(   version of persistent connections described in section 19.7.1 of RFC),
    CONTENT#9544(   2068 [33].),
      BREAK#9545,
    SECTION#9546(id=19.6.1, title=Changes from HTTP/1.0),
      BREAK#9547,
    CONTENT#9548(   This section summarizes major differences between versions HTTP/1.0),
    CONTENT#9549(   and HTTP/1.1.),
      BREAK#9550,
    SECTION#9551(id=19.6.1.1, title=Changes to Simplify Multi-homed Web Servers and Conserve IP),
    CONTENT#9552(         Addresses),
      BREAK#9553,
    CONTENT#9554(   The requirements that clients and servers support the Host request-),
    CONTENT#9555(   header, report an error if the Host request-header (section 14.23) is),
    CONTENT#9556(   missing from an HTTP/1.1 request, and accept absolute URIs (section),
    CONTENT#9557(   5.1.2) are among the most important changes defined by this),
    CONTENT#9558(   specification.),
      BREAK#9559,
    CONTENT#9560(   Older HTTP/1.0 clients assumed a one-to-one relationship of IP),
    CONTENT#9561(   addresses and servers; there was no other established mechanism for),
    CONTENT#9562(   distinguishing the intended server of a request than the IP address),
    CONTENT#9563(   to which that request was directed. The changes outlined above will),
    CONTENT#9564(   allow the Internet, once older HTTP clients are no longer common, to),
    CONTENT#9565(   support multiple Web sites from a single IP address, greatly),
    CONTENT#9566(   simplifying large operational Web servers, where allocation of many),
    CONTENT#9567(   IP addresses to a single host has created serious problems. The),
    CONTENT#9568(   Internet will also be able to recover the IP addresses that have been),
    CONTENT#9569(   allocated for the sole purpose of allowing special-purpose domain),
    CONTENT#9570(   names to be used in root-level HTTP URLs. Given the rate of growth of),
    CONTENT#9571(   the Web, and the number of servers already deployed, it is extremely),
      BREAK#9572,
      BREAK#9573,
      BREAK#9574,
      BREAK#9575,
      BREAK#9576,
      BREAK#9578,
      BREAK#9580,
      BREAK#9581,
    CONTENT#9582(   important that all implementations of HTTP (including updates to),
    CONTENT#9583(   existing HTTP/1.0 applications) correctly implement these),
    CONTENT#9584(   requirements:),
      BREAK#9585,
    CONTENT#9586(      - Both clients and servers MUST support the Host request-header.),
      BREAK#9587,
    CONTENT#9588(      - A client that sends an HTTP/1.1 request MUST send a Host header.),
      BREAK#9589,
    CONTENT#9590(      - Servers MUST report a 400 (Bad Request) error if an HTTP/1.1),
    CONTENT#9591(        request does not include a Host request-header.),
      BREAK#9592,
    CONTENT#9593(      - Servers MUST accept absolute URIs.),
      BREAK#9594,
    SECTION#9595(id=19.6.2, title=Compatibility with HTTP/1.0 Persistent Connections),
      BREAK#9596,
    CONTENT#9597(   Some clients and servers might wish to be compatible with some),
    CONTENT#9598(   previous implementations of persistent connections in HTTP/1.0),
    CONTENT#9599(   clients and servers. Persistent connections in HTTP/1.0 are),
    CONTENT#9600(   explicitly negotiated as they are not the default behavior. HTTP/1.0),
    CONTENT#9601(   experimental implementations of persistent connections are faulty,),
    CONTENT#9602(   and the new facilities in HTTP/1.1 are designed to rectify these),
    CONTENT#9603(   problems. The problem was that some existing 1.0 clients may be),
    CONTENT#9604(   sending Keep-Alive to a proxy server that doesn't understand),
    CONTENT#9605(   Connection, which would then erroneously forward it to the next),
    CONTENT#9606(   inbound server, which would establish the Keep-Alive connection and),
    CONTENT#9607(   result in a hung HTTP/1.0 proxy waiting for the close on the),
    CONTENT#9608(   response. The result is that HTTP/1.0 clients must be prevented from),
    CONTENT#9609(   using Keep-Alive when talking to proxies.),
      BREAK#9610,
    CONTENT#9611(   However, talking to proxies is the most important use of persistent),
    CONTENT#9612(   connections, so that prohibition is clearly unacceptable. Therefore,),
    CONTENT#9613(   we need some other mechanism for indicating a persistent connection),
    CONTENT#9614(   is desired, which is safe to use even when talking to an old proxy),
    CONTENT#9615(   that ignores Connection. Persistent connections are the default for),
    CONTENT#9616(   HTTP/1.1 messages; we introduce a new keyword (Connection: close) for),
    CONTENT#9617(   declaring non-persistence. See section 14.10.),
      BREAK#9618,
    CONTENT#9619(   The original HTTP/1.0 form of persistent connections (the Connection:),
    CONTENT#9620(   Keep-Alive and Keep-Alive header) is documented in RFC 2068. [33]),
      BREAK#9621,
    SECTION#9622(id=19.6.3, title=Changes from RFC 2068),
      BREAK#9623,
    CONTENT#9624(   This specification has been carefully audited to correct and),
    CONTENT#9625(   disambiguate key word usage; RFC 2068 had many problems in respect to),
    CONTENT#9626(   the conventions laid out in RFC 2119 [34].),
      BREAK#9627,
    CONTENT#9628(   Clarified which error code should be used for inbound server failures),
    CONTENT#9629(   (e.g. DNS failures). (Section 10.5.5).),
      BREAK#9630,
      BREAK#9631,
      BREAK#9632,
      BREAK#9634,
      BREAK#9636,
      BREAK#9637,
    CONTENT#9638(   CREATE had a race that required an Etag be sent when a resource is),
    CONTENT#9639(   first created. (Section 10.2.2).),
      BREAK#9640,
    CONTENT#9641(   Content-Base was deleted from the specification: it was not),
    CONTENT#9642(   implemented widely, and there is no simple, safe way to introduce it),
    CONTENT#9643(   without a robust extension mechanism. In addition, it is used in a),
    CONTENT#9644(   similar, but not identical fashion in MHTML [45].),
      BREAK#9645,
    CONTENT#9646(   Transfer-coding and message lengths all interact in ways that),
    CONTENT#9647(   required fixing exactly when chunked encoding is used (to allow for),
    CONTENT#9648(   transfer encoding that may not be self delimiting); it was important),
    CONTENT#9649(   to straighten out exactly how message lengths are computed. (Sections),
    CONTENT#9650(   3.6, 4.4, 7.2.2, 13.5.2, 14.13, 14.16)),
      BREAK#9651,
    CONTENT#9652(   A content-coding of "identity" was introduced, to solve problems),
    CONTENT#9653(   discovered in caching. (section 3.5)),
      BREAK#9654,
    CONTENT#9655(   Quality Values of zero should indicate that "I don't want something"),
    CONTENT#9656(   to allow clients to refuse a representation. (Section 3.9)),
      BREAK#9657,
    CONTENT#9658(   The use and interpretation of HTTP version numbers has been clarified),
    CONTENT#9659(   by RFC 2145. Require proxies to upgrade requests to highest protocol),
    CONTENT#9660(   version they support to deal with problems discovered in HTTP/1.0),
    CONTENT#9661(   implementations (Section 3.1)),
      BREAK#9662,
    CONTENT#9663(   Charset wildcarding is introduced to avoid explosion of character set),
    CONTENT#9664(   names in accept headers. (Section 14.2)),
      BREAK#9665,
    CONTENT#9666(   A case was missed in the Cache-Control model of HTTP/1.1; s-maxage),
    CONTENT#9667(   was introduced to add this missing case. (Sections 13.4, 14.8, 14.9,),
    CONTENT#9668(   14.9.3)),
      BREAK#9669,
    CONTENT#9670(   The Cache-Control: max-age directive was not properly defined for),
    CONTENT#9671(   responses. (Section 14.9.3)),
      BREAK#9672,
    CONTENT#9673(   There are situations where a server (especially a proxy) does not),
    CONTENT#9674(   know the full length of a response but is capable of serving a),
    CONTENT#9675(   byterange request. We therefore need a mechanism to allow byteranges),
    CONTENT#9676(   with a content-range not indicating the full length of the message.),
    CONTENT#9677(   (Section 14.16)),
      BREAK#9678,
    CONTENT#9679(   Range request responses would become very verbose if all meta-data),
    CONTENT#9680(   were always returned; by allowing the server to only send needed),
    CONTENT#9681(   headers in a 206 response, this problem can be avoided. (Section),
    CONTENT#9682(   10.2.7, 13.5.3, and 14.27)),
      BREAK#9683,
      BREAK#9684,
      BREAK#9685,
      BREAK#9686,
      BREAK#9687,
      BREAK#9688,
      BREAK#9690,
      BREAK#9692,
      BREAK#9693,
    CONTENT#9694(   Fix problem with unsatisfiable range requests; there are two cases:),
    CONTENT#9695(   syntactic problems, and range doesn't exist in the document. The 416),
    CONTENT#9696(   status code was needed to resolve this ambiguity needed to indicate),
    CONTENT#9697(   an error for a byte range request that falls outside of the actual),
    CONTENT#9698(   contents of a document. (Section 10.4.17, 14.16)),
      BREAK#9699,
    CONTENT#9700(   Rewrite of message transmission requirements to make it much harder),
    CONTENT#9701(   for implementors to get it wrong, as the consequences of errors here),
    CONTENT#9702(   can have significant impact on the Internet, and to deal with the),
    CONTENT#9703(   following problems:),
      BREAK#9704,
    CONTENT#9705(      1. Changing "HTTP/1.1 or later" to "HTTP/1.1", in contexts where),
    CONTENT#9706(         this was incorrectly placing a requirement on the behavior of),
    CONTENT#9707(         an implementation of a future version of HTTP/1.x),
      BREAK#9708,
    CONTENT#9709(      2. Made it clear that user-agents should retry requests, not),
    CONTENT#9710(         "clients" in general.),
      BREAK#9711,
    CONTENT#9712(      3. Converted requirements for clients to ignore unexpected 100),
    CONTENT#9713(         (Continue) responses, and for proxies to forward 100 responses,),
    CONTENT#9714(         into a general requirement for 1xx responses.),
      BREAK#9715,
    CONTENT#9716(      4. Modified some TCP-specific language, to make it clearer that),
    CONTENT#9717(         non-TCP transports are possible for HTTP.),
      BREAK#9718,
    CONTENT#9719(      5. Require that the origin server MUST NOT wait for the request),
    CONTENT#9720(         body before it sends a required 100 (Continue) response.),
      BREAK#9721,
    CONTENT#9722(      6. Allow, rather than require, a server to omit 100 (Continue) if),
    CONTENT#9723(         it has already seen some of the request body.),
      BREAK#9724,
    CONTENT#9725(      7. Allow servers to defend against denial-of-service attacks and),
    CONTENT#9726(         broken clients.),
      BREAK#9727,
    CONTENT#9728(   This change adds the Expect header and 417 status code. The message),
    CONTENT#9729(   transmission requirements fixes are in sections 8.2, 10.4.18,),
    CONTENT#9730(   8.1.2.2, 13.11, and 14.20.),
      BREAK#9731,
    CONTENT#9732(   Proxies should be able to add Content-Length when appropriate.),
    CONTENT#9733(   (Section 13.5.2)),
      BREAK#9734,
    CONTENT#9735(   Clean up confusion between 403 and 404 responses. (Section 10.4.4,),
    CONTENT#9736(   10.4.5, and 10.4.11)),
      BREAK#9737,
    CONTENT#9738(   Warnings could be cached incorrectly, or not updated appropriately.),
    CONTENT#9739(   (Section 13.1.2, 13.2.4, 13.5.2, 13.5.3, 14.9.3, and 14.46) Warning),
    CONTENT#9740(   also needed to be a general header, as PUT or other methods may have),
    CONTENT#9741(   need for it in requests.),
      BREAK#9742,
      BREAK#9743,
      BREAK#9744,
      BREAK#9746,
      BREAK#9748,
      BREAK#9749,
    CONTENT#9750(   Transfer-coding had significant problems, particularly with),
    CONTENT#9751(   interactions with chunked encoding. The solution is that transfer-),
    CONTENT#9752(   codings become as full fledged as content-codings. This involves),
    CONTENT#9753(   adding an IANA registry for transfer-codings (separate from content),
    CONTENT#9754(   codings), a new header field (TE) and enabling trailer headers in the),
    CONTENT#9755(   future. Transfer encoding is a major performance benefit, so it was),
    CONTENT#9756(   worth fixing [39]. TE also solves another, obscure, downward),
    CONTENT#9757(   interoperability problem that could have occurred due to interactions),
    CONTENT#9758(   between authentication trailers, chunked encoding and HTTP/1.0),
    CONTENT#9759(   clients.(Section 3.6, 3.6.1, and 14.39)),
      BREAK#9760,
    CONTENT#9761(   The PATCH, LINK, UNLINK methods were defined but not commonly),
    CONTENT#9762(   implemented in previous versions of this specification. See RFC 2068),
    CONTENT#9763(   [33].),
      BREAK#9764,
    CONTENT#9765(   The Alternates, Content-Version, Derived-From, Link, URI, Public and),
    CONTENT#9766(   Content-Base header fields were defined in previous versions of this),
    CONTENT#9767(   specification, but not commonly implemented. See RFC 2068 [33].),
      BREAK#9768,
    SECTION#9769(id=20, title=Index),
      BREAK#9770,
    CONTENT#9771(   Please see the PostScript version of this RFC for the INDEX.),
      BREAK#9772,
      BREAK#9773,
      BREAK#9774,
      BREAK#9775,
      BREAK#9776,
      BREAK#9777,
      BREAK#9778,
      BREAK#9779,
      BREAK#9780,
      BREAK#9781,
      BREAK#9782,
      BREAK#9783,
      BREAK#9784,
      BREAK#9785,
      BREAK#9786,
      BREAK#9787,
      BREAK#9788,
      BREAK#9789,
      BREAK#9790,
      BREAK#9791,
      BREAK#9792,
      BREAK#9793,
      BREAK#9794,
      BREAK#9795,
      BREAK#9796,
      BREAK#9797,
      BREAK#9798,
      BREAK#9799,
      BREAK#9800,
      BREAK#9802,
      BREAK#9804,
      BREAK#9805,
    SECTION#9806(id=21, title=Full Copyright Statement),
      BREAK#9807,
    CONTENT#9808(   Copyright (C) The Internet Society (1999).  All Rights Reserved.),
      BREAK#9809,
    CONTENT#9810(   This document and translations of it may be copied and furnished to),
    CONTENT#9811(   others, and derivative works that comment on or otherwise explain it),
    CONTENT#9812(   or assist in its implementation may be prepared, copied, published),
    CONTENT#9813(   and distributed, in whole or in part, without restriction of any),
    CONTENT#9814(   kind, provided that the above copyright notice and this paragraph are),
    CONTENT#9815(   included on all such copies and derivative works.  However, this),
    CONTENT#9816(   document itself may not be modified in any way, such as by removing),
    CONTENT#9817(   the copyright notice or references to the Internet Society or other),
    CONTENT#9818(   Internet organizations, except as needed for the purpose of),
    CONTENT#9819(   developing Internet standards in which case the procedures for),
    CONTENT#9820(   copyrights defined in the Internet Standards process must be),
    CONTENT#9821(   followed, or as required to translate it into languages other than),
    CONTENT#9822(   English.),
      BREAK#9823,
    CONTENT#9824(   The limited permissions granted above are perpetual and will not be),
    CONTENT#9825(   revoked by the Internet Society or its successors or assigns.),
      BREAK#9826,
    CONTENT#9827(   This document and the information contained herein is provided on an),
    CONTENT#9828(   "AS IS" basis and THE INTERNET SOCIETY AND THE INTERNET ENGINEERING),
    CONTENT#9829(   TASK FORCE DISCLAIMS ALL WARRANTIES, EXPRESS OR IMPLIED, INCLUDING),
    CONTENT#9830(   BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE INFORMATION),
    CONTENT#9831(   HEREIN WILL NOT INFRINGE ANY RIGHTS OR ANY IMPLIED WARRANTIES OF),
    CONTENT#9832(   MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.),
      BREAK#9833,
      BREAK#9835,
    CONTENT#9836(   Funding for the RFC Editor function is currently provided by the),
    CONTENT#9837(   Internet Society.),
      BREAK#9838,
      BREAK#9839,
      BREAK#9840,
      BREAK#9841,
      BREAK#9842,
      BREAK#9843,
      BREAK#9844,
      BREAK#9845,
      BREAK#9846,
      BREAK#9847,
      BREAK#9848,
      BREAK#9849,
      BREAK#9850,
      BREAK#9851,
      BREAK#9852,
      BREAK#9853,
      BREAK#9854,
      BREAK#9855,
      BREAK#9856,
      BREAK#9858,
]
