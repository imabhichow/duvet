---
source: duvet/src/ietf.rs
expression: "Tokenizer::new(&rfc9000).collect::<Vec<_>>()"

---
[
      BREAK#1,
      BREAK#2,
      BREAK#3,
    CONTENT#8(                                                                May 2021),
      BREAK#9,
      BREAK#10,
    CONTENT#11(           QUIC: A UDP-Based Multiplexed and Secure Transport),
      BREAK#12,
      BREAK#14,
    CONTENT#15(   This document defines the core of the QUIC transport protocol.  QUIC),
    CONTENT#16(   provides applications with flow-controlled streams for structured),
    CONTENT#17(   communication, low-latency connection establishment, and network path),
    CONTENT#18(   migration.  QUIC includes security measures that ensure),
    CONTENT#19(   confidentiality, integrity, and availability in a range of deployment),
    CONTENT#20(   circumstances.  Accompanying documents describe the integration of),
    CONTENT#21(   TLS for key negotiation, loss detection, and an exemplary congestion),
    CONTENT#22(   control algorithm.),
      BREAK#23,
      BREAK#25,
    CONTENT#26(   This is an Internet Standards Track document.),
      BREAK#27,
    CONTENT#28(   This document is a product of the Internet Engineering Task Force),
    CONTENT#29(   (IETF).  It represents the consensus of the IETF community.  It has),
    CONTENT#30(   received public review and has been approved for publication by the),
    CONTENT#31(   Internet Engineering Steering Group (IESG).  Further information on),
    CONTENT#32(   Internet Standards is available in Section 2 of RFC 7841.),
      BREAK#33,
    CONTENT#34(   Information about the current status of this document, any errata,),
    CONTENT#35(   and how to provide feedback on it may be obtained at),
    CONTENT#36(   https://www.rfc-editor.org/info/rfc9000.),
      BREAK#37,
      BREAK#39,
    CONTENT#40(   Copyright (c) 2021 IETF Trust and the persons identified as the),
    CONTENT#41(   document authors.  All rights reserved.),
      BREAK#42,
    CONTENT#43(   This document is subject to BCP 78 and the IETF Trust's Legal),
    CONTENT#44(   Provisions Relating to IETF Documents),
    CONTENT#45(   (https://trustee.ietf.org/license-info) in effect on the date of),
    CONTENT#46(   publication of this document.  Please review these documents),
    CONTENT#47(   carefully, as they describe your rights and restrictions with respect),
    CONTENT#48(   to this document.  Code Components extracted from this document must),
    CONTENT#49(   include Simplified BSD License text as described in Section 4.e of),
    CONTENT#50(   the Trust Legal Provisions and are provided without warranty as),
    CONTENT#51(   described in the Simplified BSD License.),
      BREAK#52,
      BREAK#54,
    CONTENT#55(   1.  Overview),
    CONTENT#56(     1.1.  Document Structure),
    CONTENT#57(     1.2.  Terms and Definitions),
    CONTENT#58(     1.3.  Notational Conventions),
    CONTENT#59(   2.  Streams),
    CONTENT#60(     2.1.  Stream Types and Identifiers),
    CONTENT#61(     2.2.  Sending and Receiving Data),
    CONTENT#62(     2.3.  Stream Prioritization),
    CONTENT#63(     2.4.  Operations on Streams),
    CONTENT#64(   3.  Stream States),
    CONTENT#65(     3.1.  Sending Stream States),
    CONTENT#66(     3.2.  Receiving Stream States),
    CONTENT#67(     3.3.  Permitted Frame Types),
    CONTENT#68(     3.4.  Bidirectional Stream States),
    CONTENT#69(     3.5.  Solicited State Transitions),
    CONTENT#70(   4.  Flow Control),
    CONTENT#71(     4.1.  Data Flow Control),
    CONTENT#72(     4.2.  Increasing Flow Control Limits),
    CONTENT#73(     4.3.  Flow Control Performance),
    CONTENT#74(     4.4.  Handling Stream Cancellation),
    CONTENT#75(     4.5.  Stream Final Size),
    CONTENT#76(     4.6.  Controlling Concurrency),
    CONTENT#77(   5.  Connections),
    CONTENT#78(     5.1.  Connection ID),
    CONTENT#79(       5.1.1.  Issuing Connection IDs),
    CONTENT#80(       5.1.2.  Consuming and Retiring Connection IDs),
    CONTENT#81(     5.2.  Matching Packets to Connections),
    CONTENT#82(       5.2.1.  Client Packet Handling),
    CONTENT#83(       5.2.2.  Server Packet Handling),
    CONTENT#84(       5.2.3.  Considerations for Simple Load Balancers),
    CONTENT#85(     5.3.  Operations on Connections),
    CONTENT#86(   6.  Version Negotiation),
    CONTENT#87(     6.1.  Sending Version Negotiation Packets),
    CONTENT#88(     6.2.  Handling Version Negotiation Packets),
    CONTENT#89(     6.3.  Using Reserved Versions),
    CONTENT#90(   7.  Cryptographic and Transport Handshake),
    CONTENT#91(     7.1.  Example Handshake Flows),
    CONTENT#92(     7.2.  Negotiating Connection IDs),
    CONTENT#93(     7.3.  Authenticating Connection IDs),
    CONTENT#94(     7.4.  Transport Parameters),
    CONTENT#95(       7.4.1.  Values of Transport Parameters for 0-RTT),
    CONTENT#96(       7.4.2.  New Transport Parameters),
    CONTENT#97(     7.5.  Cryptographic Message Buffering),
    CONTENT#98(   8.  Address Validation),
    CONTENT#99(     8.1.  Address Validation during Connection Establishment),
    CONTENT#100(       8.1.1.  Token Construction),
    CONTENT#101(       8.1.2.  Address Validation Using Retry Packets),
    CONTENT#102(       8.1.3.  Address Validation for Future Connections),
    CONTENT#103(       8.1.4.  Address Validation Token Integrity),
    CONTENT#104(     8.2.  Path Validation),
    CONTENT#105(       8.2.1.  Initiating Path Validation),
    CONTENT#106(       8.2.2.  Path Validation Responses),
    CONTENT#107(       8.2.3.  Successful Path Validation),
    CONTENT#108(       8.2.4.  Failed Path Validation),
    CONTENT#109(   9.  Connection Migration),
    CONTENT#110(     9.1.  Probing a New Path),
    CONTENT#111(     9.2.  Initiating Connection Migration),
    CONTENT#112(     9.3.  Responding to Connection Migration),
    CONTENT#113(       9.3.1.  Peer Address Spoofing),
    CONTENT#114(       9.3.2.  On-Path Address Spoofing),
    CONTENT#115(       9.3.3.  Off-Path Packet Forwarding),
    CONTENT#116(     9.4.  Loss Detection and Congestion Control),
    CONTENT#117(     9.5.  Privacy Implications of Connection Migration),
    CONTENT#118(     9.6.  Server's Preferred Address),
    CONTENT#119(       9.6.1.  Communicating a Preferred Address),
    CONTENT#120(       9.6.2.  Migration to a Preferred Address),
    CONTENT#121(       9.6.3.  Interaction of Client Migration and Preferred Address),
    CONTENT#122(     9.7.  Use of IPv6 Flow Label and Migration),
    CONTENT#123(   10. Connection Termination),
    CONTENT#124(     10.1.  Idle Timeout),
    CONTENT#125(       10.1.1.  Liveness Testing),
    CONTENT#126(       10.1.2.  Deferring Idle Timeout),
    CONTENT#127(     10.2.  Immediate Close),
    CONTENT#128(       10.2.1.  Closing Connection State),
    CONTENT#129(       10.2.2.  Draining Connection State),
    CONTENT#130(       10.2.3.  Immediate Close during the Handshake),
    CONTENT#131(     10.3.  Stateless Reset),
    CONTENT#132(       10.3.1.  Detecting a Stateless Reset),
    CONTENT#133(       10.3.2.  Calculating a Stateless Reset Token),
    CONTENT#134(       10.3.3.  Looping),
    CONTENT#135(   11. Error Handling),
    CONTENT#136(     11.1.  Connection Errors),
    CONTENT#137(     11.2.  Stream Errors),
    CONTENT#138(   12. Packets and Frames),
    CONTENT#139(     12.1.  Protected Packets),
    CONTENT#140(     12.2.  Coalescing Packets),
    CONTENT#141(     12.3.  Packet Numbers),
    CONTENT#142(     12.4.  Frames and Frame Types),
    CONTENT#143(     12.5.  Frames and Number Spaces),
    CONTENT#144(   13. Packetization and Reliability),
    CONTENT#145(     13.1.  Packet Processing),
    CONTENT#146(     13.2.  Generating Acknowledgments),
    CONTENT#147(       13.2.1.  Sending ACK Frames),
    CONTENT#148(       13.2.2.  Acknowledgment Frequency),
    CONTENT#149(       13.2.3.  Managing ACK Ranges),
    CONTENT#150(       13.2.4.  Limiting Ranges by Tracking ACK Frames),
    CONTENT#151(       13.2.5.  Measuring and Reporting Host Delay),
    CONTENT#152(       13.2.6.  ACK Frames and Packet Protection),
    CONTENT#153(       13.2.7.  PADDING Frames Consume Congestion Window),
    CONTENT#154(     13.3.  Retransmission of Information),
    CONTENT#155(     13.4.  Explicit Congestion Notification),
    CONTENT#156(       13.4.1.  Reporting ECN Counts),
    CONTENT#157(       13.4.2.  ECN Validation),
    CONTENT#158(   14. Datagram Size),
    CONTENT#159(     14.1.  Initial Datagram Size),
    CONTENT#160(     14.2.  Path Maximum Transmission Unit),
    CONTENT#161(       14.2.1.  Handling of ICMP Messages by PMTUD),
    CONTENT#162(     14.3.  Datagram Packetization Layer PMTU Discovery),
    CONTENT#163(       14.3.1.  DPLPMTUD and Initial Connectivity),
    CONTENT#164(       14.3.2.  Validating the Network Path with DPLPMTUD),
    CONTENT#165(       14.3.3.  Handling of ICMP Messages by DPLPMTUD),
    CONTENT#166(     14.4.  Sending QUIC PMTU Probes),
    CONTENT#167(       14.4.1.  PMTU Probes Containing Source Connection ID),
    CONTENT#168(   15. Versions),
    CONTENT#169(   16. Variable-Length Integer Encoding),
    CONTENT#170(   17. Packet Formats),
    CONTENT#171(     17.1.  Packet Number Encoding and Decoding),
    CONTENT#172(     17.2.  Long Header Packets),
    CONTENT#173(       17.2.1.  Version Negotiation Packet),
    CONTENT#174(       17.2.2.  Initial Packet),
    CONTENT#175(       17.2.3.  0-RTT),
    CONTENT#176(       17.2.4.  Handshake Packet),
    CONTENT#177(       17.2.5.  Retry Packet),
    CONTENT#178(     17.3.  Short Header Packets),
    CONTENT#179(       17.3.1.  1-RTT Packet),
    CONTENT#180(     17.4.  Latency Spin Bit),
    CONTENT#181(   18. Transport Parameter Encoding),
    CONTENT#182(     18.1.  Reserved Transport Parameters),
    CONTENT#183(     18.2.  Transport Parameter Definitions),
    CONTENT#184(   19. Frame Types and Formats),
    CONTENT#185(     19.1.  PADDING Frames),
    CONTENT#186(     19.2.  PING Frames),
    CONTENT#187(     19.3.  ACK Frames),
    CONTENT#188(       19.3.1.  ACK Ranges),
    CONTENT#189(       19.3.2.  ECN Counts),
    CONTENT#190(     19.4.  RESET_STREAM Frames),
    CONTENT#191(     19.5.  STOP_SENDING Frames),
    CONTENT#192(     19.6.  CRYPTO Frames),
    CONTENT#193(     19.7.  NEW_TOKEN Frames),
    CONTENT#194(     19.8.  STREAM Frames),
    CONTENT#195(     19.9.  MAX_DATA Frames),
    CONTENT#196(     19.10. MAX_STREAM_DATA Frames),
    CONTENT#197(     19.11. MAX_STREAMS Frames),
    CONTENT#198(     19.12. DATA_BLOCKED Frames),
    CONTENT#199(     19.13. STREAM_DATA_BLOCKED Frames),
    CONTENT#200(     19.14. STREAMS_BLOCKED Frames),
    CONTENT#201(     19.15. NEW_CONNECTION_ID Frames),
    CONTENT#202(     19.16. RETIRE_CONNECTION_ID Frames),
    CONTENT#203(     19.17. PATH_CHALLENGE Frames),
    CONTENT#204(     19.18. PATH_RESPONSE Frames),
    CONTENT#205(     19.19. CONNECTION_CLOSE Frames),
    CONTENT#206(     19.20. HANDSHAKE_DONE Frames),
    CONTENT#207(     19.21. Extension Frames),
    CONTENT#208(   20. Error Codes),
    CONTENT#209(     20.1.  Transport Error Codes),
    CONTENT#210(     20.2.  Application Protocol Error Codes),
    CONTENT#211(   21. Security Considerations),
    CONTENT#212(     21.1.  Overview of Security Properties),
    CONTENT#213(       21.1.1.  Handshake),
    CONTENT#214(       21.1.2.  Protected Packets),
    CONTENT#215(       21.1.3.  Connection Migration),
    CONTENT#216(     21.2.  Handshake Denial of Service),
    CONTENT#217(     21.3.  Amplification Attack),
    CONTENT#218(     21.4.  Optimistic ACK Attack),
    CONTENT#219(     21.5.  Request Forgery Attacks),
    CONTENT#220(       21.5.1.  Control Options for Endpoints),
    CONTENT#221(       21.5.2.  Request Forgery with Client Initial Packets),
    CONTENT#222(       21.5.3.  Request Forgery with Preferred Addresses),
    CONTENT#223(       21.5.4.  Request Forgery with Spoofed Migration),
    CONTENT#224(       21.5.5.  Request Forgery with Version Negotiation),
    CONTENT#225(       21.5.6.  Generic Request Forgery Countermeasures),
    CONTENT#226(     21.6.  Slowloris Attacks),
    CONTENT#227(     21.7.  Stream Fragmentation and Reassembly Attacks),
    CONTENT#228(     21.8.  Stream Commitment Attack),
    CONTENT#229(     21.9.  Peer Denial of Service),
    CONTENT#230(     21.10. Explicit Congestion Notification Attacks),
    CONTENT#231(     21.11. Stateless Reset Oracle),
    CONTENT#232(     21.12. Version Downgrade),
    CONTENT#233(     21.13. Targeted Attacks by Routing),
    CONTENT#234(     21.14. Traffic Analysis),
    CONTENT#235(   22. IANA Considerations),
    CONTENT#236(     22.1.  Registration Policies for QUIC Registries),
    CONTENT#237(       22.1.1.  Provisional Registrations),
    CONTENT#238(       22.1.2.  Selecting Codepoints),
    CONTENT#239(       22.1.3.  Reclaiming Provisional Codepoints),
    CONTENT#240(       22.1.4.  Permanent Registrations),
    CONTENT#241(     22.2.  QUIC Versions Registry),
    CONTENT#242(     22.3.  QUIC Transport Parameters Registry),
    CONTENT#243(     22.4.  QUIC Frame Types Registry),
    CONTENT#244(     22.5.  QUIC Transport Error Codes Registry),
    CONTENT#245(   23. References),
    CONTENT#246(     23.1.  Normative References),
    CONTENT#247(     23.2.  Informative References),
    CONTENT#248(   Appendix A.  Pseudocode),
    CONTENT#249(     A.1.  Sample Variable-Length Integer Decoding),
    CONTENT#250(     A.2.  Sample Packet Number Encoding Algorithm),
    CONTENT#251(     A.3.  Sample Packet Number Decoding Algorithm),
    CONTENT#252(     A.4.  Sample ECN Validation Algorithm),
    CONTENT#253(   Contributors),
    CONTENT#254(   Authors' Addresses),
      BREAK#255,
    SECTION#256(id=1, title=Overview),
      BREAK#257,
    CONTENT#258(   QUIC is a secure general-purpose transport protocol.  This document),
    CONTENT#259(   defines version 1 of QUIC, which conforms to the version-independent),
    CONTENT#260(   properties of QUIC defined in [QUIC-INVARIANTS].),
      BREAK#261,
    CONTENT#262(   QUIC is a connection-oriented protocol that creates a stateful),
    CONTENT#263(   interaction between a client and server.),
      BREAK#264,
    CONTENT#265(   The QUIC handshake combines negotiation of cryptographic and),
    CONTENT#266(   transport parameters.  QUIC integrates the TLS handshake [TLS13],),
    CONTENT#267(   although using a customized framing for protecting packets.  The),
    CONTENT#268(   integration of TLS and QUIC is described in more detail in),
    CONTENT#269(   [QUIC-TLS].  The handshake is structured to permit the exchange of),
    CONTENT#270(   application data as soon as possible.  This includes an option for),
    CONTENT#271(   clients to send data immediately (0-RTT), which requires some form of),
    CONTENT#272(   prior communication or configuration to enable.),
      BREAK#273,
    CONTENT#274(   Endpoints communicate in QUIC by exchanging QUIC packets.  Most),
    CONTENT#275(   packets contain frames, which carry control information and),
    CONTENT#276(   application data between endpoints.  QUIC authenticates the entirety),
    CONTENT#277(   of each packet and encrypts as much of each packet as is practical.),
    CONTENT#278(   QUIC packets are carried in UDP datagrams [UDP] to better facilitate),
    CONTENT#279(   deployment in existing systems and networks.),
      BREAK#280,
    CONTENT#281(   Application protocols exchange information over a QUIC connection via),
    CONTENT#282(   streams, which are ordered sequences of bytes.  Two types of streams),
    CONTENT#283(   can be created: bidirectional streams, which allow both endpoints to),
    CONTENT#284(   send data; and unidirectional streams, which allow a single endpoint),
    CONTENT#285(   to send data.  A credit-based scheme is used to limit stream creation),
    CONTENT#286(   and to bound the amount of data that can be sent.),
      BREAK#287,
    CONTENT#288(   QUIC provides the necessary feedback to implement reliable delivery),
    CONTENT#289(   and congestion control.  An algorithm for detecting and recovering),
    CONTENT#290(   from loss of data is described in Section 6 of [QUIC-RECOVERY].  QUIC),
    CONTENT#291(   depends on congestion control to avoid network congestion.  An),
    CONTENT#292(   exemplary congestion control algorithm is described in Section 7 of),
    CONTENT#293(   [QUIC-RECOVERY].),
      BREAK#294,
    CONTENT#295(   QUIC connections are not strictly bound to a single network path.),
    CONTENT#296(   Connection migration uses connection identifiers to allow connections),
    CONTENT#297(   to transfer to a new network path.  Only clients are able to migrate),
    CONTENT#298(   in this version of QUIC.  This design also allows connections to),
    CONTENT#299(   continue after changes in network topology or address mappings, such),
    CONTENT#300(   as might be caused by NAT rebinding.),
      BREAK#301,
    CONTENT#302(   Once established, multiple options are provided for connection),
    CONTENT#303(   termination.  Applications can manage a graceful shutdown, endpoints),
    CONTENT#304(   can negotiate a timeout period, errors can cause immediate connection),
    CONTENT#305(   teardown, and a stateless mechanism provides for termination of),
    CONTENT#306(   connections after one endpoint has lost state.),
      BREAK#307,
    SECTION#308(id=1.1, title=Document Structure),
      BREAK#309,
    CONTENT#310(   This document describes the core QUIC protocol and is structured as),
    CONTENT#311(   follows:),
      BREAK#312,
    CONTENT#313(   *  Streams are the basic service abstraction that QUIC provides.),
      BREAK#314,
    CONTENT#315(      -  Section 2 describes core concepts related to streams,),
      BREAK#316,
    CONTENT#317(      -  Section 3 provides a reference model for stream states, and),
      BREAK#318,
    CONTENT#319(      -  Section 4 outlines the operation of flow control.),
      BREAK#320,
    CONTENT#321(   *  Connections are the context in which QUIC endpoints communicate.),
      BREAK#322,
    CONTENT#323(      -  Section 5 describes core concepts related to connections,),
      BREAK#324,
    CONTENT#325(      -  Section 6 describes version negotiation,),
      BREAK#326,
    CONTENT#327(      -  Section 7 details the process for establishing connections,),
      BREAK#328,
    CONTENT#329(      -  Section 8 describes address validation and critical denial-of-),
    CONTENT#330(         service mitigations,),
      BREAK#331,
    CONTENT#332(      -  Section 9 describes how endpoints migrate a connection to a new),
    CONTENT#333(         network path,),
      BREAK#334,
    CONTENT#335(      -  Section 10 lists the options for terminating an open),
    CONTENT#336(         connection, and),
      BREAK#337,
    CONTENT#338(      -  Section 11 provides guidance for stream and connection error),
    CONTENT#339(         handling.),
      BREAK#340,
    CONTENT#341(   *  Packets and frames are the basic unit used by QUIC to communicate.),
      BREAK#342,
    CONTENT#343(      -  Section 12 describes concepts related to packets and frames,),
      BREAK#344,
    CONTENT#345(      -  Section 13 defines models for the transmission, retransmission,),
    CONTENT#346(         and acknowledgment of data, and),
      BREAK#347,
    CONTENT#348(      -  Section 14 specifies rules for managing the size of datagrams),
    CONTENT#349(         carrying QUIC packets.),
      BREAK#350,
    CONTENT#351(   *  Finally, encoding details of QUIC protocol elements are described),
    CONTENT#352(      in:),
      BREAK#353,
    CONTENT#354(      -  Section 15 (versions),),
      BREAK#355,
    CONTENT#356(      -  Section 16 (integer encoding),),
      BREAK#357,
    CONTENT#358(      -  Section 17 (packet headers),),
      BREAK#359,
    CONTENT#360(      -  Section 18 (transport parameters),),
      BREAK#361,
    CONTENT#362(      -  Section 19 (frames), and),
      BREAK#363,
    CONTENT#364(      -  Section 20 (errors).),
      BREAK#365,
    CONTENT#366(   Accompanying documents describe QUIC's loss detection and congestion),
    CONTENT#367(   control [QUIC-RECOVERY], and the use of TLS and other cryptographic),
    CONTENT#368(   mechanisms [QUIC-TLS].),
      BREAK#369,
    CONTENT#370(   This document defines QUIC version 1, which conforms to the protocol),
    CONTENT#371(   invariants in [QUIC-INVARIANTS].),
      BREAK#372,
    CONTENT#373(   To refer to QUIC version 1, cite this document.  References to the),
    CONTENT#374(   limited set of version-independent properties of QUIC can cite),
    CONTENT#375(   [QUIC-INVARIANTS].),
      BREAK#376,
    SECTION#377(id=1.2, title=Terms and Definitions),
      BREAK#378,
    CONTENT#379(   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",),
    CONTENT#380(   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and),
    CONTENT#381(   "OPTIONAL" in this document are to be interpreted as described in BCP),
    CONTENT#382(   14 [RFC2119] [RFC8174] when, and only when, they appear in all),
    CONTENT#383(   capitals, as shown here.),
      BREAK#384,
    CONTENT#385(   Commonly used terms in this document are described below.),
      BREAK#386,
    CONTENT#387(   QUIC:  The transport protocol described by this document.  QUIC is a),
    CONTENT#388(      name, not an acronym.),
      BREAK#389,
    CONTENT#390(   Endpoint:  An entity that can participate in a QUIC connection by),
    CONTENT#391(      generating, receiving, and processing QUIC packets.  There are),
    CONTENT#392(      only two types of endpoints in QUIC: client and server.),
      BREAK#393,
    CONTENT#394(   Client:  The endpoint that initiates a QUIC connection.),
      BREAK#395,
    CONTENT#396(   Server:  The endpoint that accepts a QUIC connection.),
      BREAK#397,
    CONTENT#398(   QUIC packet:  A complete processable unit of QUIC that can be),
    CONTENT#399(      encapsulated in a UDP datagram.  One or more QUIC packets can be),
    CONTENT#400(      encapsulated in a single UDP datagram.),
      BREAK#401,
    CONTENT#402(   Ack-eliciting packet:  A QUIC packet that contains frames other than),
    CONTENT#403(      ACK, PADDING, and CONNECTION_CLOSE.  These cause a recipient to),
    CONTENT#404(      send an acknowledgment; see Section 13.2.1.),
      BREAK#405,
    CONTENT#406(   Frame:  A unit of structured protocol information.  There are),
    CONTENT#407(      multiple frame types, each of which carries different information.),
    CONTENT#408(      Frames are contained in QUIC packets.),
      BREAK#409,
    CONTENT#410(   Address:  When used without qualification, the tuple of IP version,),
    CONTENT#411(      IP address, and UDP port number that represents one end of a),
    CONTENT#412(      network path.),
      BREAK#413,
    CONTENT#414(   Connection ID:  An identifier that is used to identify a QUIC),
    CONTENT#415(      connection at an endpoint.  Each endpoint selects one or more),
    CONTENT#416(      connection IDs for its peer to include in packets sent towards the),
    CONTENT#417(      endpoint.  This value is opaque to the peer.),
      BREAK#418,
    CONTENT#419(   Stream:  A unidirectional or bidirectional channel of ordered bytes),
    CONTENT#420(      within a QUIC connection.  A QUIC connection can carry multiple),
    CONTENT#421(      simultaneous streams.),
      BREAK#422,
    CONTENT#423(   Application:  An entity that uses QUIC to send and receive data.),
      BREAK#424,
    CONTENT#425(   This document uses the terms "QUIC packets", "UDP datagrams", and "IP),
    CONTENT#426(   packets" to refer to the units of the respective protocols.  That is,),
    CONTENT#427(   one or more QUIC packets can be encapsulated in a UDP datagram, which),
    CONTENT#428(   is in turn encapsulated in an IP packet.),
      BREAK#429,
    SECTION#430(id=1.3, title=Notational Conventions),
      BREAK#431,
    CONTENT#432(   Packet and frame diagrams in this document use a custom format.  The),
    CONTENT#433(   purpose of this format is to summarize, not define, protocol),
    CONTENT#434(   elements.  Prose defines the complete semantics and details of),
    CONTENT#435(   structures.),
      BREAK#436,
    CONTENT#437(   Complex fields are named and then followed by a list of fields),
    CONTENT#438(   surrounded by a pair of matching braces.  Each field in this list is),
    CONTENT#439(   separated by commas.),
      BREAK#440,
    CONTENT#441(   Individual fields include length information, plus indications about),
    CONTENT#442(   fixed value, optionality, or repetitions.  Individual fields use the),
    CONTENT#443(   following notational conventions, with all lengths in bits:),
      BREAK#444,
    CONTENT#445(   x (A):  Indicates that x is A bits long),
      BREAK#446,
    CONTENT#447(   x (i):  Indicates that x holds an integer value using the variable-),
    CONTENT#448(      length encoding described in Section 16),
      BREAK#449,
    CONTENT#450(   x (A..B):  Indicates that x can be any length from A to B; A can be),
    CONTENT#451(      omitted to indicate a minimum of zero bits, and B can be omitted),
    CONTENT#452(      to indicate no set upper limit; values in this format always end),
    CONTENT#453(      on a byte boundary),
      BREAK#454,
    CONTENT#455(   x (L) = C:  Indicates that x has a fixed value of C; the length of x),
    CONTENT#456(      is described by L, which can use any of the length forms above),
      BREAK#457,
    CONTENT#458(   x (L) = C..D:  Indicates that x has a value in the range from C to D,),
    CONTENT#459(      inclusive, with the length described by L, as above),
      BREAK#460,
    CONTENT#461(   [x (L)]:  Indicates that x is optional and has a length of L),
      BREAK#462,
    CONTENT#463(   x (L) ...:  Indicates that x is repeated zero or more times and that),
    CONTENT#464(      each instance has a length of L),
      BREAK#465,
    CONTENT#466(   This document uses network byte order (that is, big endian) values.),
    CONTENT#467(   Fields are placed starting from the high-order bits of each byte.),
      BREAK#468,
    CONTENT#469(   By convention, individual fields reference a complex field by using),
    CONTENT#470(   the name of the complex field.),
      BREAK#471,
    CONTENT#472(   Figure 1 provides an example:),
      BREAK#473,
    CONTENT#474(   Example Structure {),
    CONTENT#475(     One-bit Field (1),),
    CONTENT#476(     7-bit Field with Fixed Value (7) = 61,),
    CONTENT#477(     Field with Variable-Length Integer (i),),
    CONTENT#478(     Arbitrary-Length Field (..),),
    CONTENT#479(     Variable-Length Field (8..24),),
    CONTENT#480(     Field With Minimum Length (16..),),
    CONTENT#481(     Field With Maximum Length (..128),),
    CONTENT#482(     [Optional Field (64)],),
    CONTENT#483(     Repeated Field (8) ...,),
    CONTENT#484(   }),
      BREAK#485,
    CONTENT#486(                          Figure 1: Example Format),
      BREAK#487,
    CONTENT#488(   When a single-bit field is referenced in prose, the position of that),
    CONTENT#489(   field can be clarified by using the value of the byte that carries),
    CONTENT#490(   the field with the field's value set.  For example, the value 0x80),
    CONTENT#491(   could be used to refer to the single-bit field in the most),
    CONTENT#492(   significant bit of the byte, such as One-bit Field in Figure 1.),
      BREAK#493,
    SECTION#494(id=2, title=Streams),
      BREAK#495,
    CONTENT#496(   Streams in QUIC provide a lightweight, ordered byte-stream),
    CONTENT#497(   abstraction to an application.  Streams can be unidirectional or),
    CONTENT#498(   bidirectional.),
      BREAK#499,
    CONTENT#500(   Streams can be created by sending data.  Other processes associated),
    CONTENT#501(   with stream management -- ending, canceling, and managing flow),
    CONTENT#502(   control -- are all designed to impose minimal overheads.  For),
    CONTENT#503(   instance, a single STREAM frame (Section 19.8) can open, carry data),
    CONTENT#504(   for, and close a stream.  Streams can also be long-lived and can last),
    CONTENT#505(   the entire duration of a connection.),
      BREAK#506,
    CONTENT#507(   Streams can be created by either endpoint, can concurrently send data),
    CONTENT#508(   interleaved with other streams, and can be canceled.  QUIC does not),
    CONTENT#509(   provide any means of ensuring ordering between bytes on different),
    CONTENT#510(   streams.),
      BREAK#511,
    CONTENT#512(   QUIC allows for an arbitrary number of streams to operate),
    CONTENT#513(   concurrently and for an arbitrary amount of data to be sent on any),
    CONTENT#514(   stream, subject to flow control constraints and stream limits; see),
    CONTENT#515(   Section 4.),
      BREAK#516,
    SECTION#517(id=2.1, title=Stream Types and Identifiers),
      BREAK#518,
    CONTENT#519(   Streams can be unidirectional or bidirectional.  Unidirectional),
    CONTENT#520(   streams carry data in one direction: from the initiator of the stream),
    CONTENT#521(   to its peer.  Bidirectional streams allow for data to be sent in both),
    CONTENT#522(   directions.),
      BREAK#523,
    CONTENT#524(   Streams are identified within a connection by a numeric value,),
    CONTENT#525(   referred to as the stream ID.  A stream ID is a 62-bit integer (0 to),
    CONTENT#526(   2^62-1) that is unique for all streams on a connection.  Stream IDs),
    CONTENT#527(   are encoded as variable-length integers; see Section 16.  A QUIC),
    CONTENT#528(   endpoint MUST NOT reuse a stream ID within a connection.),
      BREAK#529,
    CONTENT#530(   The least significant bit (0x01) of the stream ID identifies the),
    CONTENT#531(   initiator of the stream.  Client-initiated streams have even-numbered),
    CONTENT#532(   stream IDs (with the bit set to 0), and server-initiated streams have),
    CONTENT#533(   odd-numbered stream IDs (with the bit set to 1).),
      BREAK#534,
    CONTENT#535(   The second least significant bit (0x02) of the stream ID),
    CONTENT#536(   distinguishes between bidirectional streams (with the bit set to 0)),
    CONTENT#537(   and unidirectional streams (with the bit set to 1).),
      BREAK#538,
    CONTENT#539(   The two least significant bits from a stream ID therefore identify a),
    CONTENT#540(   stream as one of four types, as summarized in Table 1.),
      BREAK#541,
    CONTENT#542(                +======+==================================+),
    CONTENT#543(                | Bits | Stream Type                      |),
    CONTENT#544(                +======+==================================+),
    CONTENT#545(                | 0x00 | Client-Initiated, Bidirectional  |),
    CONTENT#546(                +------+----------------------------------+),
    CONTENT#547(                | 0x01 | Server-Initiated, Bidirectional  |),
    CONTENT#548(                +------+----------------------------------+),
    CONTENT#549(                | 0x02 | Client-Initiated, Unidirectional |),
    CONTENT#550(                +------+----------------------------------+),
    CONTENT#551(                | 0x03 | Server-Initiated, Unidirectional |),
    CONTENT#552(                +------+----------------------------------+),
      BREAK#553,
    CONTENT#554(                          Table 1: Stream ID Types),
      BREAK#555,
    CONTENT#556(   The stream space for each type begins at the minimum value (0x00),
    CONTENT#557(   through 0x03, respectively); successive streams of each type are),
    CONTENT#558(   created with numerically increasing stream IDs.  A stream ID that is),
    CONTENT#559(   used out of order results in all streams of that type with lower-),
    CONTENT#560(   numbered stream IDs also being opened.),
      BREAK#561,
    SECTION#562(id=2.2, title=Sending and Receiving Data),
      BREAK#563,
    CONTENT#564(   STREAM frames (Section 19.8) encapsulate data sent by an application.),
    CONTENT#565(   An endpoint uses the Stream ID and Offset fields in STREAM frames to),
    CONTENT#566(   place data in order.),
      BREAK#567,
    CONTENT#568(   Endpoints MUST be able to deliver stream data to an application as an),
    CONTENT#569(   ordered byte stream.  Delivering an ordered byte stream requires that),
    CONTENT#570(   an endpoint buffer any data that is received out of order, up to the),
    CONTENT#571(   advertised flow control limit.),
      BREAK#572,
    CONTENT#573(   QUIC makes no specific allowances for delivery of stream data out of),
    CONTENT#574(   order.  However, implementations MAY choose to offer the ability to),
    CONTENT#575(   deliver data out of order to a receiving application.),
      BREAK#576,
    CONTENT#577(   An endpoint could receive data for a stream at the same stream offset),
    CONTENT#578(   multiple times.  Data that has already been received can be),
    CONTENT#579(   discarded.  The data at a given offset MUST NOT change if it is sent),
    CONTENT#580(   multiple times; an endpoint MAY treat receipt of different data at),
    CONTENT#581(   the same offset within a stream as a connection error of type),
    CONTENT#582(   PROTOCOL_VIOLATION.),
      BREAK#583,
    CONTENT#584(   Streams are an ordered byte-stream abstraction with no other),
    CONTENT#585(   structure visible to QUIC.  STREAM frame boundaries are not expected),
    CONTENT#586(   to be preserved when data is transmitted, retransmitted after packet),
    CONTENT#587(   loss, or delivered to the application at a receiver.),
      BREAK#588,
    CONTENT#589(   An endpoint MUST NOT send data on any stream without ensuring that it),
    CONTENT#590(   is within the flow control limits set by its peer.  Flow control is),
    CONTENT#591(   described in detail in Section 4.),
      BREAK#592,
    SECTION#593(id=2.3, title=Stream Prioritization),
      BREAK#594,
    CONTENT#595(   Stream multiplexing can have a significant effect on application),
    CONTENT#596(   performance if resources allocated to streams are correctly),
    CONTENT#597(   prioritized.),
      BREAK#598,
    CONTENT#599(   QUIC does not provide a mechanism for exchanging prioritization),
    CONTENT#600(   information.  Instead, it relies on receiving priority information),
    CONTENT#601(   from the application.),
      BREAK#602,
    CONTENT#603(   A QUIC implementation SHOULD provide ways in which an application can),
    CONTENT#604(   indicate the relative priority of streams.  An implementation uses),
    CONTENT#605(   information provided by the application to determine how to allocate),
    CONTENT#606(   resources to active streams.),
      BREAK#607,
    SECTION#608(id=2.4, title=Operations on Streams),
      BREAK#609,
    CONTENT#610(   This document does not define an API for QUIC; it instead defines a),
    CONTENT#611(   set of functions on streams that application protocols can rely upon.),
    CONTENT#612(   An application protocol can assume that a QUIC implementation),
    CONTENT#613(   provides an interface that includes the operations described in this),
    CONTENT#614(   section.  An implementation designed for use with a specific),
    CONTENT#615(   application protocol might provide only those operations that are),
    CONTENT#616(   used by that protocol.),
      BREAK#617,
    CONTENT#618(   On the sending part of a stream, an application protocol can:),
      BREAK#619,
    CONTENT#620(   *  write data, understanding when stream flow control credit),
    CONTENT#621(      (Section 4.1) has successfully been reserved to send the written),
    CONTENT#622(      data;),
      BREAK#623,
    CONTENT#624(   *  end the stream (clean termination), resulting in a STREAM frame),
    CONTENT#625(      (Section 19.8) with the FIN bit set; and),
      BREAK#626,
    CONTENT#627(   *  reset the stream (abrupt termination), resulting in a RESET_STREAM),
    CONTENT#628(      frame (Section 19.4) if the stream was not already in a terminal),
    CONTENT#629(      state.),
      BREAK#630,
    CONTENT#631(   On the receiving part of a stream, an application protocol can:),
      BREAK#632,
    CONTENT#633(   *  read data; and),
      BREAK#634,
    CONTENT#635(   *  abort reading of the stream and request closure, possibly),
    CONTENT#636(      resulting in a STOP_SENDING frame (Section 19.5).),
      BREAK#637,
    CONTENT#638(   An application protocol can also request to be informed of state),
    CONTENT#639(   changes on streams, including when the peer has opened or reset a),
    CONTENT#640(   stream, when a peer aborts reading on a stream, when new data is),
    CONTENT#641(   available, and when data can or cannot be written to the stream due),
    CONTENT#642(   to flow control.),
      BREAK#643,
    SECTION#644(id=3, title=Stream States),
      BREAK#645,
    CONTENT#646(   This section describes streams in terms of their send or receive),
    CONTENT#647(   components.  Two state machines are described: one for the streams on),
    CONTENT#648(   which an endpoint transmits data (Section 3.1) and another for),
    CONTENT#649(   streams on which an endpoint receives data (Section 3.2).),
      BREAK#650,
    CONTENT#651(   Unidirectional streams use either the sending or receiving state),
    CONTENT#652(   machine, depending on the stream type and endpoint role.),
    CONTENT#653(   Bidirectional streams use both state machines at both endpoints.  For),
    CONTENT#654(   the most part, the use of these state machines is the same whether),
    CONTENT#655(   the stream is unidirectional or bidirectional.  The conditions for),
    CONTENT#656(   opening a stream are slightly more complex for a bidirectional stream),
    CONTENT#657(   because the opening of either the send or receive side causes the),
    CONTENT#658(   stream to open in both directions.),
      BREAK#659,
    CONTENT#660(   The state machines shown in this section are largely informative.),
    CONTENT#661(   This document uses stream states to describe rules for when and how),
    CONTENT#662(   different types of frames can be sent and the reactions that are),
    CONTENT#663(   expected when different types of frames are received.  Though these),
    CONTENT#664(   state machines are intended to be useful in implementing QUIC, these),
    CONTENT#665(   states are not intended to constrain implementations.  An),
    CONTENT#666(   implementation can define a different state machine as long as its),
    CONTENT#667(   behavior is consistent with an implementation that implements these),
    CONTENT#668(   states.),
      BREAK#669,
    CONTENT#670(      |  Note: In some cases, a single event or action can cause a),
    CONTENT#671(      |  transition through multiple states.  For instance, sending),
    CONTENT#672(      |  STREAM with a FIN bit set can cause two state transitions for a),
    CONTENT#673(      |  sending stream: from the "Ready" state to the "Send" state, and),
    CONTENT#674(      |  from the "Send" state to the "Data Sent" state.),
      BREAK#675,
    SECTION#676(id=3.1, title=Sending Stream States),
      BREAK#677,
    CONTENT#678(   Figure 2 shows the states for the part of a stream that sends data to),
    CONTENT#679(   a peer.),
      BREAK#680,
    CONTENT#681(          o),
    CONTENT#682(          | Create Stream (Sending)),
    CONTENT#683(          | Peer Creates Bidirectional Stream),
    CONTENT#684(          v),
    CONTENT#685(      +-------+),
    CONTENT#686(      | Ready | Send RESET_STREAM),
    CONTENT#687(      |       |-----------------------.),
    CONTENT#688(      +-------+                       |),
    CONTENT#689(          |                           |),
    CONTENT#690(          | Send STREAM /             |),
    CONTENT#691(          |      STREAM_DATA_BLOCKED  |),
    CONTENT#692(          v                           |),
    CONTENT#693(      +-------+                       |),
    CONTENT#694(      | Send  | Send RESET_STREAM     |),
    CONTENT#695(      |       |---------------------->|),
    CONTENT#696(      +-------+                       |),
    CONTENT#697(          |                           |),
    CONTENT#698(          | Send STREAM + FIN         |),
    CONTENT#699(          v                           v),
    CONTENT#700(      +-------+                   +-------+),
    CONTENT#701(      | Data  | Send RESET_STREAM | Reset |),
    CONTENT#702(      | Sent  |------------------>| Sent  |),
    CONTENT#703(      +-------+                   +-------+),
    CONTENT#704(          |                           |),
    CONTENT#705(          | Recv All ACKs             | Recv ACK),
    CONTENT#706(          v                           v),
    CONTENT#707(      +-------+                   +-------+),
    CONTENT#708(      | Data  |                   | Reset |),
    CONTENT#709(      | Recvd |                   | Recvd |),
    CONTENT#710(      +-------+                   +-------+),
      BREAK#711,
    CONTENT#712(               Figure 2: States for Sending Parts of Streams),
      BREAK#713,
    CONTENT#714(   The sending part of a stream that the endpoint initiates (types 0 and),
    CONTENT#715(   2 for clients, 1 and 3 for servers) is opened by the application.),
    CONTENT#716(   The "Ready" state represents a newly created stream that is able to),
    CONTENT#717(   accept data from the application.  Stream data might be buffered in),
    CONTENT#718(   this state in preparation for sending.),
      BREAK#719,
    CONTENT#720(   Sending the first STREAM or STREAM_DATA_BLOCKED frame causes a),
    CONTENT#721(   sending part of a stream to enter the "Send" state.  An),
    CONTENT#722(   implementation might choose to defer allocating a stream ID to a),
    CONTENT#723(   stream until it sends the first STREAM frame and enters this state,),
    CONTENT#724(   which can allow for better stream prioritization.),
      BREAK#725,
    CONTENT#726(   The sending part of a bidirectional stream initiated by a peer (type),
    CONTENT#727(   0 for a server, type 1 for a client) starts in the "Ready" state when),
    CONTENT#728(   the receiving part is created.),
      BREAK#729,
    CONTENT#730(   In the "Send" state, an endpoint transmits -- and retransmits as),
    CONTENT#731(   necessary -- stream data in STREAM frames.  The endpoint respects the),
    CONTENT#732(   flow control limits set by its peer and continues to accept and),
    CONTENT#733(   process MAX_STREAM_DATA frames.  An endpoint in the "Send" state),
    CONTENT#734(   generates STREAM_DATA_BLOCKED frames if it is blocked from sending by),
    CONTENT#735(   stream flow control limits (Section 4.1).),
      BREAK#736,
    CONTENT#737(   After the application indicates that all stream data has been sent),
    CONTENT#738(   and a STREAM frame containing the FIN bit is sent, the sending part),
    CONTENT#739(   of the stream enters the "Data Sent" state.  From this state, the),
    CONTENT#740(   endpoint only retransmits stream data as necessary.  The endpoint),
    CONTENT#741(   does not need to check flow control limits or send),
    CONTENT#742(   STREAM_DATA_BLOCKED frames for a stream in this state.),
    CONTENT#743(   MAX_STREAM_DATA frames might be received until the peer receives the),
    CONTENT#744(   final stream offset.  The endpoint can safely ignore any),
    CONTENT#745(   MAX_STREAM_DATA frames it receives from its peer for a stream in this),
    CONTENT#746(   state.),
      BREAK#747,
    CONTENT#748(   Once all stream data has been successfully acknowledged, the sending),
    CONTENT#749(   part of the stream enters the "Data Recvd" state, which is a terminal),
    CONTENT#750(   state.),
      BREAK#751,
    CONTENT#752(   From any state that is one of "Ready", "Send", or "Data Sent", an),
    CONTENT#753(   application can signal that it wishes to abandon transmission of),
    CONTENT#754(   stream data.  Alternatively, an endpoint might receive a STOP_SENDING),
    CONTENT#755(   frame from its peer.  In either case, the endpoint sends a),
    CONTENT#756(   RESET_STREAM frame, which causes the stream to enter the "Reset Sent"),
    CONTENT#757(   state.),
      BREAK#758,
    CONTENT#759(   An endpoint MAY send a RESET_STREAM as the first frame that mentions),
    CONTENT#760(   a stream; this causes the sending part of that stream to open and),
    CONTENT#761(   then immediately transition to the "Reset Sent" state.),
      BREAK#762,
    CONTENT#763(   Once a packet containing a RESET_STREAM has been acknowledged, the),
    CONTENT#764(   sending part of the stream enters the "Reset Recvd" state, which is a),
    CONTENT#765(   terminal state.),
      BREAK#766,
    SECTION#767(id=3.2, title=Receiving Stream States),
      BREAK#768,
    CONTENT#769(   Figure 3 shows the states for the part of a stream that receives data),
    CONTENT#770(   from a peer.  The states for a receiving part of a stream mirror only),
    CONTENT#771(   some of the states of the sending part of the stream at the peer.),
    CONTENT#772(   The receiving part of a stream does not track states on the sending),
    CONTENT#773(   part that cannot be observed, such as the "Ready" state.  Instead,),
    CONTENT#774(   the receiving part of a stream tracks the delivery of data to the),
    CONTENT#775(   application, some of which cannot be observed by the sender.),
      BREAK#776,
    CONTENT#777(          o),
    CONTENT#778(          | Recv STREAM / STREAM_DATA_BLOCKED / RESET_STREAM),
    CONTENT#779(          | Create Bidirectional Stream (Sending)),
    CONTENT#780(          | Recv MAX_STREAM_DATA / STOP_SENDING (Bidirectional)),
    CONTENT#781(          | Create Higher-Numbered Stream),
    CONTENT#782(          v),
    CONTENT#783(      +-------+),
    CONTENT#784(      | Recv  | Recv RESET_STREAM),
    CONTENT#785(      |       |-----------------------.),
    CONTENT#786(      +-------+                       |),
    CONTENT#787(          |                           |),
    CONTENT#788(          | Recv STREAM + FIN         |),
    CONTENT#789(          v                           |),
    CONTENT#790(      +-------+                       |),
    CONTENT#791(      | Size  | Recv RESET_STREAM     |),
    CONTENT#792(      | Known |---------------------->|),
    CONTENT#793(      +-------+                       |),
    CONTENT#794(          |                           |),
    CONTENT#795(          | Recv All Data             |),
    CONTENT#796(          v                           v),
    CONTENT#797(      +-------+ Recv RESET_STREAM +-------+),
    CONTENT#798(      | Data  |--- (optional) --->| Reset |),
    CONTENT#799(      | Recvd |  Recv All Data    | Recvd |),
    CONTENT#800(      +-------+<-- (optional) ----+-------+),
    CONTENT#801(          |                           |),
    CONTENT#802(          | App Read All Data         | App Read Reset),
    CONTENT#803(          v                           v),
    CONTENT#804(      +-------+                   +-------+),
    CONTENT#805(      | Data  |                   | Reset |),
    CONTENT#806(      | Read  |                   | Read  |),
    CONTENT#807(      +-------+                   +-------+),
      BREAK#808,
    CONTENT#809(              Figure 3: States for Receiving Parts of Streams),
      BREAK#810,
    CONTENT#811(   The receiving part of a stream initiated by a peer (types 1 and 3 for),
    CONTENT#812(   a client, or 0 and 2 for a server) is created when the first STREAM,),
    CONTENT#813(   STREAM_DATA_BLOCKED, or RESET_STREAM frame is received for that),
    CONTENT#814(   stream.  For bidirectional streams initiated by a peer, receipt of a),
    CONTENT#815(   MAX_STREAM_DATA or STOP_SENDING frame for the sending part of the),
    CONTENT#816(   stream also creates the receiving part.  The initial state for the),
    CONTENT#817(   receiving part of a stream is "Recv".),
      BREAK#818,
    CONTENT#819(   For a bidirectional stream, the receiving part enters the "Recv"),
    CONTENT#820(   state when the sending part initiated by the endpoint (type 0 for a),
    CONTENT#821(   client, type 1 for a server) enters the "Ready" state.),
      BREAK#822,
    CONTENT#823(   An endpoint opens a bidirectional stream when a MAX_STREAM_DATA or),
    CONTENT#824(   STOP_SENDING frame is received from the peer for that stream.),
    CONTENT#825(   Receiving a MAX_STREAM_DATA frame for an unopened stream indicates),
    CONTENT#826(   that the remote peer has opened the stream and is providing flow),
    CONTENT#827(   control credit.  Receiving a STOP_SENDING frame for an unopened),
    CONTENT#828(   stream indicates that the remote peer no longer wishes to receive),
    CONTENT#829(   data on this stream.  Either frame might arrive before a STREAM or),
    CONTENT#830(   STREAM_DATA_BLOCKED frame if packets are lost or reordered.),
      BREAK#831,
    CONTENT#832(   Before a stream is created, all streams of the same type with lower-),
    CONTENT#833(   numbered stream IDs MUST be created.  This ensures that the creation),
    CONTENT#834(   order for streams is consistent on both endpoints.),
      BREAK#835,
    CONTENT#836(   In the "Recv" state, the endpoint receives STREAM and),
    CONTENT#837(   STREAM_DATA_BLOCKED frames.  Incoming data is buffered and can be),
    CONTENT#838(   reassembled into the correct order for delivery to the application.),
    CONTENT#839(   As data is consumed by the application and buffer space becomes),
    CONTENT#840(   available, the endpoint sends MAX_STREAM_DATA frames to allow the),
    CONTENT#841(   peer to send more data.),
      BREAK#842,
    CONTENT#843(   When a STREAM frame with a FIN bit is received, the final size of the),
    CONTENT#844(   stream is known; see Section 4.5.  The receiving part of the stream),
    CONTENT#845(   then enters the "Size Known" state.  In this state, the endpoint no),
    CONTENT#846(   longer needs to send MAX_STREAM_DATA frames; it only receives any),
    CONTENT#847(   retransmissions of stream data.),
      BREAK#848,
    CONTENT#849(   Once all data for the stream has been received, the receiving part),
    CONTENT#850(   enters the "Data Recvd" state.  This might happen as a result of),
    CONTENT#851(   receiving the same STREAM frame that causes the transition to "Size),
    CONTENT#852(   Known".  After all data has been received, any STREAM or),
    CONTENT#853(   STREAM_DATA_BLOCKED frames for the stream can be discarded.),
      BREAK#854,
    CONTENT#855(   The "Data Recvd" state persists until stream data has been delivered),
    CONTENT#856(   to the application.  Once stream data has been delivered, the stream),
    CONTENT#857(   enters the "Data Read" state, which is a terminal state.),
      BREAK#858,
    CONTENT#859(   Receiving a RESET_STREAM frame in the "Recv" or "Size Known" state),
    CONTENT#860(   causes the stream to enter the "Reset Recvd" state.  This might cause),
    CONTENT#861(   the delivery of stream data to the application to be interrupted.),
      BREAK#862,
    CONTENT#863(   It is possible that all stream data has already been received when a),
    CONTENT#864(   RESET_STREAM is received (that is, in the "Data Recvd" state).),
    CONTENT#865(   Similarly, it is possible for remaining stream data to arrive after),
    CONTENT#866(   receiving a RESET_STREAM frame (the "Reset Recvd" state).  An),
    CONTENT#867(   implementation is free to manage this situation as it chooses.),
      BREAK#868,
    CONTENT#869(   Sending a RESET_STREAM means that an endpoint cannot guarantee),
    CONTENT#870(   delivery of stream data; however, there is no requirement that stream),
    CONTENT#871(   data not be delivered if a RESET_STREAM is received.  An),
    CONTENT#872(   implementation MAY interrupt delivery of stream data, discard any),
    CONTENT#873(   data that was not consumed, and signal the receipt of the),
    CONTENT#874(   RESET_STREAM.  A RESET_STREAM signal might be suppressed or withheld),
    CONTENT#875(   if stream data is completely received and is buffered to be read by),
    CONTENT#876(   the application.  If the RESET_STREAM is suppressed, the receiving),
    CONTENT#877(   part of the stream remains in "Data Recvd".),
      BREAK#878,
    CONTENT#879(   Once the application receives the signal indicating that the stream),
    CONTENT#880(   was reset, the receiving part of the stream transitions to the "Reset),
    CONTENT#881(   Read" state, which is a terminal state.),
      BREAK#882,
    SECTION#883(id=3.3, title=Permitted Frame Types),
      BREAK#884,
    CONTENT#885(   The sender of a stream sends just three frame types that affect the),
    CONTENT#886(   state of a stream at either the sender or the receiver: STREAM),
    CONTENT#887(   (Section 19.8), STREAM_DATA_BLOCKED (Section 19.13), and RESET_STREAM),
    CONTENT#888(   (Section 19.4).),
      BREAK#889,
    CONTENT#890(   A sender MUST NOT send any of these frames from a terminal state),
    CONTENT#891(   ("Data Recvd" or "Reset Recvd").  A sender MUST NOT send a STREAM or),
    CONTENT#892(   STREAM_DATA_BLOCKED frame for a stream in the "Reset Sent" state or),
    CONTENT#893(   any terminal state -- that is, after sending a RESET_STREAM frame.  A),
    CONTENT#894(   receiver could receive any of these three frames in any state, due to),
    CONTENT#895(   the possibility of delayed delivery of packets carrying them.),
      BREAK#896,
    CONTENT#897(   The receiver of a stream sends MAX_STREAM_DATA frames (Section 19.10)),
    CONTENT#898(   and STOP_SENDING frames (Section 19.5).),
      BREAK#899,
    CONTENT#900(   The receiver only sends MAX_STREAM_DATA frames in the "Recv" state.),
    CONTENT#901(   A receiver MAY send a STOP_SENDING frame in any state where it has),
    CONTENT#902(   not received a RESET_STREAM frame -- that is, states other than),
    CONTENT#903(   "Reset Recvd" or "Reset Read".  However, there is little value in),
    CONTENT#904(   sending a STOP_SENDING frame in the "Data Recvd" state, as all stream),
    CONTENT#905(   data has been received.  A sender could receive either of these two),
    CONTENT#906(   types of frames in any state as a result of delayed delivery of),
    CONTENT#907(   packets.),
      BREAK#908,
    SECTION#909(id=3.4, title=Bidirectional Stream States),
      BREAK#910,
    CONTENT#911(   A bidirectional stream is composed of sending and receiving parts.),
    CONTENT#912(   Implementations can represent states of the bidirectional stream as),
    CONTENT#913(   composites of sending and receiving stream states.  The simplest),
    CONTENT#914(   model presents the stream as "open" when either sending or receiving),
    CONTENT#915(   parts are in a non-terminal state and "closed" when both sending and),
    CONTENT#916(   receiving streams are in terminal states.),
      BREAK#917,
    CONTENT#918(   Table 2 shows a more complex mapping of bidirectional stream states),
    CONTENT#919(   that loosely correspond to the stream states defined in HTTP/2),
    CONTENT#920(   [HTTP2].  This shows that multiple states on sending or receiving),
    CONTENT#921(   parts of streams are mapped to the same composite state.  Note that),
    CONTENT#922(   this is just one possibility for such a mapping; this mapping),
    CONTENT#923(   requires that data be acknowledged before the transition to a),
    CONTENT#924(   "closed" or "half-closed" state.),
      BREAK#925,
    CONTENT#926(      +===================+=======================+=================+),
    CONTENT#927(      | Sending Part      | Receiving Part        | Composite State |),
    CONTENT#928(      +===================+=======================+=================+),
    CONTENT#929(      | No Stream / Ready | No Stream / Recv (*1) | idle            |),
    CONTENT#930(      +-------------------+-----------------------+-----------------+),
    CONTENT#931(      | Ready / Send /    | Recv / Size Known     | open            |),
    CONTENT#932(      | Data Sent         |                       |                 |),
    CONTENT#933(      +-------------------+-----------------------+-----------------+),
    CONTENT#934(      | Ready / Send /    | Data Recvd / Data     | half-closed     |),
    CONTENT#935(      | Data Sent         | Read                  | (remote)        |),
    CONTENT#936(      +-------------------+-----------------------+-----------------+),
    CONTENT#937(      | Ready / Send /    | Reset Recvd / Reset   | half-closed     |),
    CONTENT#938(      | Data Sent         | Read                  | (remote)        |),
    CONTENT#939(      +-------------------+-----------------------+-----------------+),
    CONTENT#940(      | Data Recvd        | Recv / Size Known     | half-closed     |),
    CONTENT#941(      |                   |                       | (local)         |),
    CONTENT#942(      +-------------------+-----------------------+-----------------+),
    CONTENT#943(      | Reset Sent /      | Recv / Size Known     | half-closed     |),
    CONTENT#944(      | Reset Recvd       |                       | (local)         |),
    CONTENT#945(      +-------------------+-----------------------+-----------------+),
    CONTENT#946(      | Reset Sent /      | Data Recvd / Data     | closed          |),
    CONTENT#947(      | Reset Recvd       | Read                  |                 |),
    CONTENT#948(      +-------------------+-----------------------+-----------------+),
    CONTENT#949(      | Reset Sent /      | Reset Recvd / Reset   | closed          |),
    CONTENT#950(      | Reset Recvd       | Read                  |                 |),
    CONTENT#951(      +-------------------+-----------------------+-----------------+),
    CONTENT#952(      | Data Recvd        | Data Recvd / Data     | closed          |),
    CONTENT#953(      |                   | Read                  |                 |),
    CONTENT#954(      +-------------------+-----------------------+-----------------+),
    CONTENT#955(      | Data Recvd        | Reset Recvd / Reset   | closed          |),
    CONTENT#956(      |                   | Read                  |                 |),
    CONTENT#957(      +-------------------+-----------------------+-----------------+),
      BREAK#958,
    CONTENT#959(            Table 2: Possible Mapping of Stream States to HTTP/2),
      BREAK#960,
    CONTENT#961(      |  Note (*1): A stream is considered "idle" if it has not yet been),
    CONTENT#962(      |  created or if the receiving part of the stream is in the "Recv"),
    CONTENT#963(      |  state without yet having received any frames.),
      BREAK#964,
    SECTION#965(id=3.5, title=Solicited State Transitions),
      BREAK#966,
    CONTENT#967(   If an application is no longer interested in the data it is receiving),
    CONTENT#968(   on a stream, it can abort reading the stream and specify an),
    CONTENT#969(   application error code.),
      BREAK#970,
    CONTENT#971(   If the stream is in the "Recv" or "Size Known" state, the transport),
    CONTENT#972(   SHOULD signal this by sending a STOP_SENDING frame to prompt closure),
    CONTENT#973(   of the stream in the opposite direction.  This typically indicates),
    CONTENT#974(   that the receiving application is no longer reading data it receives),
    CONTENT#975(   from the stream, but it is not a guarantee that incoming data will be),
    CONTENT#976(   ignored.),
      BREAK#977,
    CONTENT#978(   STREAM frames received after sending a STOP_SENDING frame are still),
    CONTENT#979(   counted toward connection and stream flow control, even though these),
    CONTENT#980(   frames can be discarded upon receipt.),
      BREAK#981,
    CONTENT#982(   A STOP_SENDING frame requests that the receiving endpoint send a),
    CONTENT#983(   RESET_STREAM frame.  An endpoint that receives a STOP_SENDING frame),
    CONTENT#984(   MUST send a RESET_STREAM frame if the stream is in the "Ready" or),
    CONTENT#985(   "Send" state.  If the stream is in the "Data Sent" state, the),
    CONTENT#986(   endpoint MAY defer sending the RESET_STREAM frame until the packets),
    CONTENT#987(   containing outstanding data are acknowledged or declared lost.  If),
    CONTENT#988(   any outstanding data is declared lost, the endpoint SHOULD send a),
    CONTENT#989(   RESET_STREAM frame instead of retransmitting the data.),
      BREAK#990,
    CONTENT#991(   An endpoint SHOULD copy the error code from the STOP_SENDING frame to),
    CONTENT#992(   the RESET_STREAM frame it sends, but it can use any application error),
    CONTENT#993(   code.  An endpoint that sends a STOP_SENDING frame MAY ignore the),
    CONTENT#994(   error code in any RESET_STREAM frames subsequently received for that),
    CONTENT#995(   stream.),
      BREAK#996,
    CONTENT#997(   STOP_SENDING SHOULD only be sent for a stream that has not been reset),
    CONTENT#998(   by the peer.  STOP_SENDING is most useful for streams in the "Recv"),
    CONTENT#999(   or "Size Known" state.),
      BREAK#1000,
    CONTENT#1001(   An endpoint is expected to send another STOP_SENDING frame if a),
    CONTENT#1002(   packet containing a previous STOP_SENDING is lost.  However, once),
    CONTENT#1003(   either all stream data or a RESET_STREAM frame has been received for),
    CONTENT#1004(   the stream -- that is, the stream is in any state other than "Recv"),
    CONTENT#1005(   or "Size Known" -- sending a STOP_SENDING frame is unnecessary.),
      BREAK#1006,
    CONTENT#1007(   An endpoint that wishes to terminate both directions of a),
    CONTENT#1008(   bidirectional stream can terminate one direction by sending a),
    CONTENT#1009(   RESET_STREAM frame, and it can encourage prompt termination in the),
    CONTENT#1010(   opposite direction by sending a STOP_SENDING frame.),
      BREAK#1011,
    SECTION#1012(id=4, title=Flow Control),
      BREAK#1013,
    CONTENT#1014(   Receivers need to limit the amount of data that they are required to),
    CONTENT#1015(   buffer, in order to prevent a fast sender from overwhelming them or a),
    CONTENT#1016(   malicious sender from consuming a large amount of memory.  To enable),
    CONTENT#1017(   a receiver to limit memory commitments for a connection, streams are),
    CONTENT#1018(   flow controlled both individually and across a connection as a whole.),
    CONTENT#1019(   A QUIC receiver controls the maximum amount of data the sender can),
    CONTENT#1020(   send on a stream as well as across all streams at any time, as),
    CONTENT#1021(   described in Sections 4.1 and 4.2.),
      BREAK#1022,
    CONTENT#1023(   Similarly, to limit concurrency within a connection, a QUIC endpoint),
    CONTENT#1024(   controls the maximum cumulative number of streams that its peer can),
    CONTENT#1025(   initiate, as described in Section 4.6.),
      BREAK#1026,
    CONTENT#1027(   Data sent in CRYPTO frames is not flow controlled in the same way as),
    CONTENT#1028(   stream data.  QUIC relies on the cryptographic protocol),
    CONTENT#1029(   implementation to avoid excessive buffering of data; see [QUIC-TLS].),
    CONTENT#1030(   To avoid excessive buffering at multiple layers, QUIC implementations),
    CONTENT#1031(   SHOULD provide an interface for the cryptographic protocol),
    CONTENT#1032(   implementation to communicate its buffering limits.),
      BREAK#1033,
    SECTION#1034(id=4.1, title=Data Flow Control),
      BREAK#1035,
    CONTENT#1036(   QUIC employs a limit-based flow control scheme where a receiver),
    CONTENT#1037(   advertises the limit of total bytes it is prepared to receive on a),
    CONTENT#1038(   given stream or for the entire connection.  This leads to two levels),
    CONTENT#1039(   of data flow control in QUIC:),
      BREAK#1040,
    CONTENT#1041(   *  Stream flow control, which prevents a single stream from consuming),
    CONTENT#1042(      the entire receive buffer for a connection by limiting the amount),
    CONTENT#1043(      of data that can be sent on each stream.),
      BREAK#1044,
    CONTENT#1045(   *  Connection flow control, which prevents senders from exceeding a),
    CONTENT#1046(      receiver's buffer capacity for the connection by limiting the),
    CONTENT#1047(      total bytes of stream data sent in STREAM frames on all streams.),
      BREAK#1048,
    CONTENT#1049(   Senders MUST NOT send data in excess of either limit.),
      BREAK#1050,
    CONTENT#1051(   A receiver sets initial limits for all streams through transport),
    CONTENT#1052(   parameters during the handshake (Section 7.4).  Subsequently, a),
    CONTENT#1053(   receiver sends MAX_STREAM_DATA frames (Section 19.10) or MAX_DATA),
    CONTENT#1054(   frames (Section 19.9) to the sender to advertise larger limits.),
      BREAK#1055,
    CONTENT#1056(   A receiver can advertise a larger limit for a stream by sending a),
    CONTENT#1057(   MAX_STREAM_DATA frame with the corresponding stream ID.  A),
    CONTENT#1058(   MAX_STREAM_DATA frame indicates the maximum absolute byte offset of a),
    CONTENT#1059(   stream.  A receiver could determine the flow control offset to be),
    CONTENT#1060(   advertised based on the current offset of data consumed on that),
    CONTENT#1061(   stream.),
      BREAK#1062,
    CONTENT#1063(   A receiver can advertise a larger limit for a connection by sending a),
    CONTENT#1064(   MAX_DATA frame, which indicates the maximum of the sum of the),
    CONTENT#1065(   absolute byte offsets of all streams.  A receiver maintains a),
    CONTENT#1066(   cumulative sum of bytes received on all streams, which is used to),
    CONTENT#1067(   check for violations of the advertised connection or stream data),
    CONTENT#1068(   limits.  A receiver could determine the maximum data limit to be),
    CONTENT#1069(   advertised based on the sum of bytes consumed on all streams.),
      BREAK#1070,
    CONTENT#1071(   Once a receiver advertises a limit for the connection or a stream, it),
    CONTENT#1072(   is not an error to advertise a smaller limit, but the smaller limit),
    CONTENT#1073(   has no effect.),
      BREAK#1074,
    CONTENT#1075(   A receiver MUST close the connection with an error of type),
    CONTENT#1076(   FLOW_CONTROL_ERROR if the sender violates the advertised connection),
    CONTENT#1077(   or stream data limits; see Section 11 for details on error handling.),
      BREAK#1078,
    CONTENT#1079(   A sender MUST ignore any MAX_STREAM_DATA or MAX_DATA frames that do),
    CONTENT#1080(   not increase flow control limits.),
      BREAK#1081,
    CONTENT#1082(   If a sender has sent data up to the limit, it will be unable to send),
    CONTENT#1083(   new data and is considered blocked.  A sender SHOULD send a),
    CONTENT#1084(   STREAM_DATA_BLOCKED or DATA_BLOCKED frame to indicate to the receiver),
    CONTENT#1085(   that it has data to write but is blocked by flow control limits.  If),
    CONTENT#1086(   a sender is blocked for a period longer than the idle timeout),
    CONTENT#1087(   (Section 10.1), the receiver might close the connection even when the),
    CONTENT#1088(   sender has data that is available for transmission.  To keep the),
    CONTENT#1089(   connection from closing, a sender that is flow control limited SHOULD),
    CONTENT#1090(   periodically send a STREAM_DATA_BLOCKED or DATA_BLOCKED frame when it),
    CONTENT#1091(   has no ack-eliciting packets in flight.),
      BREAK#1092,
    SECTION#1093(id=4.2, title=Increasing Flow Control Limits),
      BREAK#1094,
    CONTENT#1095(   Implementations decide when and how much credit to advertise in),
    CONTENT#1096(   MAX_STREAM_DATA and MAX_DATA frames, but this section offers a few),
    CONTENT#1097(   considerations.),
      BREAK#1098,
    CONTENT#1099(   To avoid blocking a sender, a receiver MAY send a MAX_STREAM_DATA or),
    CONTENT#1100(   MAX_DATA frame multiple times within a round trip or send it early),
    CONTENT#1101(   enough to allow time for loss of the frame and subsequent recovery.),
      BREAK#1102,
    CONTENT#1103(   Control frames contribute to connection overhead.  Therefore,),
    CONTENT#1104(   frequently sending MAX_STREAM_DATA and MAX_DATA frames with small),
    CONTENT#1105(   changes is undesirable.  On the other hand, if updates are less),
    CONTENT#1106(   frequent, larger increments to limits are necessary to avoid blocking),
    CONTENT#1107(   a sender, requiring larger resource commitments at the receiver.),
    CONTENT#1108(   There is a trade-off between resource commitment and overhead when),
    CONTENT#1109(   determining how large a limit is advertised.),
      BREAK#1110,
    CONTENT#1111(   A receiver can use an autotuning mechanism to tune the frequency and),
    CONTENT#1112(   amount of advertised additional credit based on a round-trip time),
    CONTENT#1113(   estimate and the rate at which the receiving application consumes),
    CONTENT#1114(   data, similar to common TCP implementations.  As an optimization, an),
    CONTENT#1115(   endpoint could send frames related to flow control only when there),
    CONTENT#1116(   are other frames to send, ensuring that flow control does not cause),
    CONTENT#1117(   extra packets to be sent.),
      BREAK#1118,
    CONTENT#1119(   A blocked sender is not required to send STREAM_DATA_BLOCKED or),
    CONTENT#1120(   DATA_BLOCKED frames.  Therefore, a receiver MUST NOT wait for a),
    CONTENT#1121(   STREAM_DATA_BLOCKED or DATA_BLOCKED frame before sending a),
    CONTENT#1122(   MAX_STREAM_DATA or MAX_DATA frame; doing so could result in the),
    CONTENT#1123(   sender being blocked for the rest of the connection.  Even if the),
    CONTENT#1124(   sender sends these frames, waiting for them will result in the sender),
    CONTENT#1125(   being blocked for at least an entire round trip.),
      BREAK#1126,
    CONTENT#1127(   When a sender receives credit after being blocked, it might be able),
    CONTENT#1128(   to send a large amount of data in response, resulting in short-term),
    CONTENT#1129(   congestion; see Section 7.7 of [QUIC-RECOVERY] for a discussion of),
    CONTENT#1130(   how a sender can avoid this congestion.),
      BREAK#1131,
    SECTION#1132(id=4.3, title=Flow Control Performance),
      BREAK#1133,
    CONTENT#1134(   If an endpoint cannot ensure that its peer always has available flow),
    CONTENT#1135(   control credit that is greater than the peer's bandwidth-delay),
    CONTENT#1136(   product on this connection, its receive throughput will be limited by),
    CONTENT#1137(   flow control.),
      BREAK#1138,
    CONTENT#1139(   Packet loss can cause gaps in the receive buffer, preventing the),
    CONTENT#1140(   application from consuming data and freeing up receive buffer space.),
      BREAK#1141,
    CONTENT#1142(   Sending timely updates of flow control limits can improve),
    CONTENT#1143(   performance.  Sending packets only to provide flow control updates),
    CONTENT#1144(   can increase network load and adversely affect performance.  Sending),
    CONTENT#1145(   flow control updates along with other frames, such as ACK frames,),
    CONTENT#1146(   reduces the cost of those updates.),
      BREAK#1147,
    SECTION#1148(id=4.4, title=Handling Stream Cancellation),
      BREAK#1149,
    CONTENT#1150(   Endpoints need to eventually agree on the amount of flow control),
    CONTENT#1151(   credit that has been consumed on every stream, to be able to account),
    CONTENT#1152(   for all bytes for connection-level flow control.),
      BREAK#1153,
    CONTENT#1154(   On receipt of a RESET_STREAM frame, an endpoint will tear down state),
    CONTENT#1155(   for the matching stream and ignore further data arriving on that),
    CONTENT#1156(   stream.),
      BREAK#1157,
    CONTENT#1158(   RESET_STREAM terminates one direction of a stream abruptly.  For a),
    CONTENT#1159(   bidirectional stream, RESET_STREAM has no effect on data flow in the),
    CONTENT#1160(   opposite direction.  Both endpoints MUST maintain flow control state),
    CONTENT#1161(   for the stream in the unterminated direction until that direction),
    CONTENT#1162(   enters a terminal state.),
      BREAK#1163,
    SECTION#1164(id=4.5, title=Stream Final Size),
      BREAK#1165,
    CONTENT#1166(   The final size is the amount of flow control credit that is consumed),
    CONTENT#1167(   by a stream.  Assuming that every contiguous byte on the stream was),
    CONTENT#1168(   sent once, the final size is the number of bytes sent.  More),
    CONTENT#1169(   generally, this is one higher than the offset of the byte with the),
    CONTENT#1170(   largest offset sent on the stream, or zero if no bytes were sent.),
      BREAK#1171,
    CONTENT#1172(   A sender always communicates the final size of a stream to the),
    CONTENT#1173(   receiver reliably, no matter how the stream is terminated.  The final),
    CONTENT#1174(   size is the sum of the Offset and Length fields of a STREAM frame),
    CONTENT#1175(   with a FIN flag, noting that these fields might be implicit.),
    CONTENT#1176(   Alternatively, the Final Size field of a RESET_STREAM frame carries),
    CONTENT#1177(   this value.  This guarantees that both endpoints agree on how much),
    CONTENT#1178(   flow control credit was consumed by the sender on that stream.),
      BREAK#1179,
    CONTENT#1180(   An endpoint will know the final size for a stream when the receiving),
    CONTENT#1181(   part of the stream enters the "Size Known" or "Reset Recvd" state),
    CONTENT#1182(   (Section 3).  The receiver MUST use the final size of the stream to),
    CONTENT#1183(   account for all bytes sent on the stream in its connection-level flow),
    CONTENT#1184(   controller.),
      BREAK#1185,
    CONTENT#1186(   An endpoint MUST NOT send data on a stream at or beyond the final),
    CONTENT#1187(   size.),
      BREAK#1188,
    CONTENT#1189(   Once a final size for a stream is known, it cannot change.  If a),
    CONTENT#1190(   RESET_STREAM or STREAM frame is received indicating a change in the),
    CONTENT#1191(   final size for the stream, an endpoint SHOULD respond with an error),
    CONTENT#1192(   of type FINAL_SIZE_ERROR; see Section 11 for details on error),
    CONTENT#1193(   handling.  A receiver SHOULD treat receipt of data at or beyond the),
    CONTENT#1194(   final size as an error of type FINAL_SIZE_ERROR, even after a stream),
    CONTENT#1195(   is closed.  Generating these errors is not mandatory, because),
    CONTENT#1196(   requiring that an endpoint generate these errors also means that the),
    CONTENT#1197(   endpoint needs to maintain the final size state for closed streams,),
    CONTENT#1198(   which could mean a significant state commitment.),
      BREAK#1199,
    SECTION#1200(id=4.6, title=Controlling Concurrency),
      BREAK#1201,
    CONTENT#1202(   An endpoint limits the cumulative number of incoming streams a peer),
    CONTENT#1203(   can open.  Only streams with a stream ID less than "(max_streams * 4),
    CONTENT#1204(   + first_stream_id_of_type)" can be opened; see Table 1.  Initial),
    CONTENT#1205(   limits are set in the transport parameters; see Section 18.2.),
    CONTENT#1206(   Subsequent limits are advertised using MAX_STREAMS frames; see),
    CONTENT#1207(   Section 19.11.  Separate limits apply to unidirectional and),
    CONTENT#1208(   bidirectional streams.),
      BREAK#1209,
    CONTENT#1210(   If a max_streams transport parameter or a MAX_STREAMS frame is),
    CONTENT#1211(   received with a value greater than 2^60, this would allow a maximum),
    CONTENT#1212(   stream ID that cannot be expressed as a variable-length integer; see),
    CONTENT#1213(   Section 16.  If either is received, the connection MUST be closed),
    CONTENT#1214(   immediately with a connection error of type TRANSPORT_PARAMETER_ERROR),
    CONTENT#1215(   if the offending value was received in a transport parameter or of),
    CONTENT#1216(   type FRAME_ENCODING_ERROR if it was received in a frame; see),
    CONTENT#1217(   Section 10.2.),
      BREAK#1218,
    CONTENT#1219(   Endpoints MUST NOT exceed the limit set by their peer.  An endpoint),
    CONTENT#1220(   that receives a frame with a stream ID exceeding the limit it has),
    CONTENT#1221(   sent MUST treat this as a connection error of type),
    CONTENT#1222(   STREAM_LIMIT_ERROR; see Section 11 for details on error handling.),
      BREAK#1223,
    CONTENT#1224(   Once a receiver advertises a stream limit using the MAX_STREAMS),
    CONTENT#1225(   frame, advertising a smaller limit has no effect.  MAX_STREAMS frames),
    CONTENT#1226(   that do not increase the stream limit MUST be ignored.),
      BREAK#1227,
    CONTENT#1228(   As with stream and connection flow control, this document leaves),
    CONTENT#1229(   implementations to decide when and how many streams should be),
    CONTENT#1230(   advertised to a peer via MAX_STREAMS.  Implementations might choose),
    CONTENT#1231(   to increase limits as streams are closed, to keep the number of),
    CONTENT#1232(   streams available to peers roughly consistent.),
      BREAK#1233,
    CONTENT#1234(   An endpoint that is unable to open a new stream due to the peer's),
    CONTENT#1235(   limits SHOULD send a STREAMS_BLOCKED frame (Section 19.14).  This),
    CONTENT#1236(   signal is considered useful for debugging.  An endpoint MUST NOT wait),
    CONTENT#1237(   to receive this signal before advertising additional credit, since),
    CONTENT#1238(   doing so will mean that the peer will be blocked for at least an),
    CONTENT#1239(   entire round trip, and potentially indefinitely if the peer chooses),
    CONTENT#1240(   not to send STREAMS_BLOCKED frames.),
      BREAK#1241,
    SECTION#1242(id=5, title=Connections),
      BREAK#1243,
    CONTENT#1244(   A QUIC connection is shared state between a client and a server.),
      BREAK#1245,
    CONTENT#1246(   Each connection starts with a handshake phase, during which the two),
    CONTENT#1247(   endpoints establish a shared secret using the cryptographic handshake),
    CONTENT#1248(   protocol [QUIC-TLS] and negotiate the application protocol.  The),
    CONTENT#1249(   handshake (Section 7) confirms that both endpoints are willing to),
    CONTENT#1250(   communicate (Section 8.1) and establishes parameters for the),
    CONTENT#1251(   connection (Section 7.4).),
      BREAK#1252,
    CONTENT#1253(   An application protocol can use the connection during the handshake),
    CONTENT#1254(   phase with some limitations.  0-RTT allows application data to be),
    CONTENT#1255(   sent by a client before receiving a response from the server.),
    CONTENT#1256(   However, 0-RTT provides no protection against replay attacks; see),
    CONTENT#1257(   Section 9.2 of [QUIC-TLS].  A server can also send application data),
    CONTENT#1258(   to a client before it receives the final cryptographic handshake),
    CONTENT#1259(   messages that allow it to confirm the identity and liveness of the),
    CONTENT#1260(   client.  These capabilities allow an application protocol to offer),
    CONTENT#1261(   the option of trading some security guarantees for reduced latency.),
      BREAK#1262,
    CONTENT#1263(   The use of connection IDs (Section 5.1) allows connections to migrate),
    CONTENT#1264(   to a new network path, both as a direct choice of an endpoint and),
    CONTENT#1265(   when forced by a change in a middlebox.  Section 9 describes),
    CONTENT#1266(   mitigations for the security and privacy issues associated with),
    CONTENT#1267(   migration.),
      BREAK#1268,
    CONTENT#1269(   For connections that are no longer needed or desired, there are),
    CONTENT#1270(   several ways for a client and server to terminate a connection, as),
    CONTENT#1271(   described in Section 10.),
      BREAK#1272,
    SECTION#1273(id=5.1, title=Connection ID),
      BREAK#1274,
    CONTENT#1275(   Each connection possesses a set of connection identifiers, or),
    CONTENT#1276(   connection IDs, each of which can identify the connection.),
    CONTENT#1277(   Connection IDs are independently selected by endpoints; each endpoint),
    CONTENT#1278(   selects the connection IDs that its peer uses.),
      BREAK#1279,
    CONTENT#1280(   The primary function of a connection ID is to ensure that changes in),
    CONTENT#1281(   addressing at lower protocol layers (UDP, IP) do not cause packets),
    CONTENT#1282(   for a QUIC connection to be delivered to the wrong endpoint.  Each),
    CONTENT#1283(   endpoint selects connection IDs using an implementation-specific (and),
    CONTENT#1284(   perhaps deployment-specific) method that will allow packets with that),
    CONTENT#1285(   connection ID to be routed back to the endpoint and to be identified),
    CONTENT#1286(   by the endpoint upon receipt.),
      BREAK#1287,
    CONTENT#1288(   Multiple connection IDs are used so that endpoints can send packets),
    CONTENT#1289(   that cannot be identified by an observer as being for the same),
    CONTENT#1290(   connection without cooperation from an endpoint; see Section 9.5.),
      BREAK#1291,
    CONTENT#1292(   Connection IDs MUST NOT contain any information that can be used by),
    CONTENT#1293(   an external observer (that is, one that does not cooperate with the),
    CONTENT#1294(   issuer) to correlate them with other connection IDs for the same),
    CONTENT#1295(   connection.  As a trivial example, this means the same connection ID),
    CONTENT#1296(   MUST NOT be issued more than once on the same connection.),
      BREAK#1297,
    CONTENT#1298(   Packets with long headers include Source Connection ID and),
    CONTENT#1299(   Destination Connection ID fields.  These fields are used to set the),
    CONTENT#1300(   connection IDs for new connections; see Section 7.2 for details.),
      BREAK#1301,
    CONTENT#1302(   Packets with short headers (Section 17.3) only include the),
    CONTENT#1303(   Destination Connection ID and omit the explicit length.  The length),
    CONTENT#1304(   of the Destination Connection ID field is expected to be known to),
    CONTENT#1305(   endpoints.  Endpoints using a load balancer that routes based on),
    CONTENT#1306(   connection ID could agree with the load balancer on a fixed length),
    CONTENT#1307(   for connection IDs or agree on an encoding scheme.  A fixed portion),
    CONTENT#1308(   could encode an explicit length, which allows the entire connection),
    CONTENT#1309(   ID to vary in length and still be used by the load balancer.),
      BREAK#1310,
    CONTENT#1311(   A Version Negotiation (Section 17.2.1) packet echoes the connection),
    CONTENT#1312(   IDs selected by the client, both to ensure correct routing toward the),
    CONTENT#1313(   client and to demonstrate that the packet is in response to a packet),
    CONTENT#1314(   sent by the client.),
      BREAK#1315,
    CONTENT#1316(   A zero-length connection ID can be used when a connection ID is not),
    CONTENT#1317(   needed to route to the correct endpoint.  However, multiplexing),
    CONTENT#1318(   connections on the same local IP address and port while using zero-),
    CONTENT#1319(   length connection IDs will cause failures in the presence of peer),
    CONTENT#1320(   connection migration, NAT rebinding, and client port reuse.  An),
    CONTENT#1321(   endpoint MUST NOT use the same IP address and port for multiple),
    CONTENT#1322(   concurrent connections with zero-length connection IDs, unless it is),
    CONTENT#1323(   certain that those protocol features are not in use.),
      BREAK#1324,
    CONTENT#1325(   When an endpoint uses a non-zero-length connection ID, it needs to),
    CONTENT#1326(   ensure that the peer has a supply of connection IDs from which to),
    CONTENT#1327(   choose for packets sent to the endpoint.  These connection IDs are),
    CONTENT#1328(   supplied by the endpoint using the NEW_CONNECTION_ID frame),
    CONTENT#1329(   (Section 19.15).),
      BREAK#1330,
    SECTION#1331(id=5.1.1, title=Issuing Connection IDs),
      BREAK#1332,
    CONTENT#1333(   Each connection ID has an associated sequence number to assist in),
    CONTENT#1334(   detecting when NEW_CONNECTION_ID or RETIRE_CONNECTION_ID frames refer),
    CONTENT#1335(   to the same value.  The initial connection ID issued by an endpoint),
    CONTENT#1336(   is sent in the Source Connection ID field of the long packet header),
    CONTENT#1337(   (Section 17.2) during the handshake.  The sequence number of the),
    CONTENT#1338(   initial connection ID is 0.  If the preferred_address transport),
    CONTENT#1339(   parameter is sent, the sequence number of the supplied connection ID),
    CONTENT#1340(   is 1.),
      BREAK#1341,
    CONTENT#1342(   Additional connection IDs are communicated to the peer using),
    CONTENT#1343(   NEW_CONNECTION_ID frames (Section 19.15).  The sequence number on),
    CONTENT#1344(   each newly issued connection ID MUST increase by 1.  The connection),
    CONTENT#1345(   ID that a client selects for the first Destination Connection ID),
    CONTENT#1346(   field it sends and any connection ID provided by a Retry packet are),
    CONTENT#1347(   not assigned sequence numbers.),
      BREAK#1348,
    CONTENT#1349(   When an endpoint issues a connection ID, it MUST accept packets that),
    CONTENT#1350(   carry this connection ID for the duration of the connection or until),
    CONTENT#1351(   its peer invalidates the connection ID via a RETIRE_CONNECTION_ID),
    CONTENT#1352(   frame (Section 19.16).  Connection IDs that are issued and not),
    CONTENT#1353(   retired are considered active; any active connection ID is valid for),
    CONTENT#1354(   use with the current connection at any time, in any packet type.),
    CONTENT#1355(   This includes the connection ID issued by the server via the),
    CONTENT#1356(   preferred_address transport parameter.),
      BREAK#1357,
    CONTENT#1358(   An endpoint SHOULD ensure that its peer has a sufficient number of),
    CONTENT#1359(   available and unused connection IDs.  Endpoints advertise the number),
    CONTENT#1360(   of active connection IDs they are willing to maintain using the),
    CONTENT#1361(   active_connection_id_limit transport parameter.  An endpoint MUST NOT),
    CONTENT#1362(   provide more connection IDs than the peer's limit.  An endpoint MAY),
    CONTENT#1363(   send connection IDs that temporarily exceed a peer's limit if the),
    CONTENT#1364(   NEW_CONNECTION_ID frame also requires the retirement of any excess,),
    CONTENT#1365(   by including a sufficiently large value in the Retire Prior To field.),
      BREAK#1366,
    CONTENT#1367(   A NEW_CONNECTION_ID frame might cause an endpoint to add some active),
    CONTENT#1368(   connection IDs and retire others based on the value of the Retire),
    CONTENT#1369(   Prior To field.  After processing a NEW_CONNECTION_ID frame and),
    CONTENT#1370(   adding and retiring active connection IDs, if the number of active),
    CONTENT#1371(   connection IDs exceeds the value advertised in its),
    CONTENT#1372(   active_connection_id_limit transport parameter, an endpoint MUST),
    CONTENT#1373(   close the connection with an error of type CONNECTION_ID_LIMIT_ERROR.),
      BREAK#1374,
    CONTENT#1375(   An endpoint SHOULD supply a new connection ID when the peer retires a),
    CONTENT#1376(   connection ID.  If an endpoint provided fewer connection IDs than the),
    CONTENT#1377(   peer's active_connection_id_limit, it MAY supply a new connection ID),
    CONTENT#1378(   when it receives a packet with a previously unused connection ID.  An),
    CONTENT#1379(   endpoint MAY limit the total number of connection IDs issued for each),
    CONTENT#1380(   connection to avoid the risk of running out of connection IDs; see),
    CONTENT#1381(   Section 10.3.2.  An endpoint MAY also limit the issuance of),
    CONTENT#1382(   connection IDs to reduce the amount of per-path state it maintains,),
    CONTENT#1383(   such as path validation status, as its peer might interact with it),
    CONTENT#1384(   over as many paths as there are issued connection IDs.),
      BREAK#1385,
    CONTENT#1386(   An endpoint that initiates migration and requires non-zero-length),
    CONTENT#1387(   connection IDs SHOULD ensure that the pool of connection IDs),
    CONTENT#1388(   available to its peer allows the peer to use a new connection ID on),
    CONTENT#1389(   migration, as the peer will be unable to respond if the pool is),
    CONTENT#1390(   exhausted.),
      BREAK#1391,
    CONTENT#1392(   An endpoint that selects a zero-length connection ID during the),
    CONTENT#1393(   handshake cannot issue a new connection ID.  A zero-length),
    CONTENT#1394(   Destination Connection ID field is used in all packets sent toward),
    CONTENT#1395(   such an endpoint over any network path.),
      BREAK#1396,
    SECTION#1397(id=5.1.2, title=Consuming and Retiring Connection IDs),
      BREAK#1398,
    CONTENT#1399(   An endpoint can change the connection ID it uses for a peer to),
    CONTENT#1400(   another available one at any time during the connection.  An endpoint),
    CONTENT#1401(   consumes connection IDs in response to a migrating peer; see),
    CONTENT#1402(   Section 9.5 for more details.),
      BREAK#1403,
    CONTENT#1404(   An endpoint maintains a set of connection IDs received from its peer,),
    CONTENT#1405(   any of which it can use when sending packets.  When the endpoint),
    CONTENT#1406(   wishes to remove a connection ID from use, it sends a),
    CONTENT#1407(   RETIRE_CONNECTION_ID frame to its peer.  Sending a),
    CONTENT#1408(   RETIRE_CONNECTION_ID frame indicates that the connection ID will not),
    CONTENT#1409(   be used again and requests that the peer replace it with a new),
    CONTENT#1410(   connection ID using a NEW_CONNECTION_ID frame.),
      BREAK#1411,
    CONTENT#1412(   As discussed in Section 9.5, endpoints limit the use of a connection),
    CONTENT#1413(   ID to packets sent from a single local address to a single),
    CONTENT#1414(   destination address.  Endpoints SHOULD retire connection IDs when),
    CONTENT#1415(   they are no longer actively using either the local or destination),
    CONTENT#1416(   address for which the connection ID was used.),
      BREAK#1417,
    CONTENT#1418(   An endpoint might need to stop accepting previously issued connection),
    CONTENT#1419(   IDs in certain circumstances.  Such an endpoint can cause its peer to),
    CONTENT#1420(   retire connection IDs by sending a NEW_CONNECTION_ID frame with an),
    CONTENT#1421(   increased Retire Prior To field.  The endpoint SHOULD continue to),
    CONTENT#1422(   accept the previously issued connection IDs until they are retired by),
    CONTENT#1423(   the peer.  If the endpoint can no longer process the indicated),
    CONTENT#1424(   connection IDs, it MAY close the connection.),
      BREAK#1425,
    CONTENT#1426(   Upon receipt of an increased Retire Prior To field, the peer MUST),
    CONTENT#1427(   stop using the corresponding connection IDs and retire them with),
    CONTENT#1428(   RETIRE_CONNECTION_ID frames before adding the newly provided),
    CONTENT#1429(   connection ID to the set of active connection IDs.  This ordering),
    CONTENT#1430(   allows an endpoint to replace all active connection IDs without the),
    CONTENT#1431(   possibility of a peer having no available connection IDs and without),
    CONTENT#1432(   exceeding the limit the peer sets in the active_connection_id_limit),
    CONTENT#1433(   transport parameter; see Section 18.2.  Failure to cease using the),
    CONTENT#1434(   connection IDs when requested can result in connection failures, as),
    CONTENT#1435(   the issuing endpoint might be unable to continue using the connection),
    CONTENT#1436(   IDs with the active connection.),
      BREAK#1437,
    CONTENT#1438(   An endpoint SHOULD limit the number of connection IDs it has retired),
    CONTENT#1439(   locally for which RETIRE_CONNECTION_ID frames have not yet been),
    CONTENT#1440(   acknowledged.  An endpoint SHOULD allow for sending and tracking a),
    CONTENT#1441(   number of RETIRE_CONNECTION_ID frames of at least twice the value of),
    CONTENT#1442(   the active_connection_id_limit transport parameter.  An endpoint MUST),
    CONTENT#1443(   NOT forget a connection ID without retiring it, though it MAY choose),
    CONTENT#1444(   to treat having connection IDs in need of retirement that exceed this),
    CONTENT#1445(   limit as a connection error of type CONNECTION_ID_LIMIT_ERROR.),
      BREAK#1446,
    CONTENT#1447(   Endpoints SHOULD NOT issue updates of the Retire Prior To field),
    CONTENT#1448(   before receiving RETIRE_CONNECTION_ID frames that retire all),
    CONTENT#1449(   connection IDs indicated by the previous Retire Prior To value.),
      BREAK#1450,
    SECTION#1451(id=5.2, title=Matching Packets to Connections),
      BREAK#1452,
    CONTENT#1453(   Incoming packets are classified on receipt.  Packets can either be),
    CONTENT#1454(   associated with an existing connection or -- for servers --),
    CONTENT#1455(   potentially create a new connection.),
      BREAK#1456,
    CONTENT#1457(   Endpoints try to associate a packet with an existing connection.  If),
    CONTENT#1458(   the packet has a non-zero-length Destination Connection ID),
    CONTENT#1459(   corresponding to an existing connection, QUIC processes that packet),
    CONTENT#1460(   accordingly.  Note that more than one connection ID can be associated),
    CONTENT#1461(   with a connection; see Section 5.1.),
      BREAK#1462,
    CONTENT#1463(   If the Destination Connection ID is zero length and the addressing),
    CONTENT#1464(   information in the packet matches the addressing information the),
    CONTENT#1465(   endpoint uses to identify a connection with a zero-length connection),
    CONTENT#1466(   ID, QUIC processes the packet as part of that connection.  An),
    CONTENT#1467(   endpoint can use just destination IP and port or both source and),
    CONTENT#1468(   destination addresses for identification, though this makes),
    CONTENT#1469(   connections fragile as described in Section 5.1.),
      BREAK#1470,
    CONTENT#1471(   Endpoints can send a Stateless Reset (Section 10.3) for any packets),
    CONTENT#1472(   that cannot be attributed to an existing connection.  A Stateless),
    CONTENT#1473(   Reset allows a peer to more quickly identify when a connection),
    CONTENT#1474(   becomes unusable.),
      BREAK#1475,
    CONTENT#1476(   Packets that are matched to an existing connection are discarded if),
    CONTENT#1477(   the packets are inconsistent with the state of that connection.  For),
    CONTENT#1478(   example, packets are discarded if they indicate a different protocol),
    CONTENT#1479(   version than that of the connection or if the removal of packet),
    CONTENT#1480(   protection is unsuccessful once the expected keys are available.),
      BREAK#1481,
    CONTENT#1482(   Invalid packets that lack strong integrity protection, such as),
    CONTENT#1483(   Initial, Retry, or Version Negotiation, MAY be discarded.  An),
    CONTENT#1484(   endpoint MUST generate a connection error if processing the contents),
    CONTENT#1485(   of these packets prior to discovering an error, or fully revert any),
    CONTENT#1486(   changes made during that processing.),
      BREAK#1487,
    SECTION#1488(id=5.2.1, title=Client Packet Handling),
      BREAK#1489,
    CONTENT#1490(   Valid packets sent to clients always include a Destination Connection),
    CONTENT#1491(   ID that matches a value the client selects.  Clients that choose to),
    CONTENT#1492(   receive zero-length connection IDs can use the local address and port),
    CONTENT#1493(   to identify a connection.  Packets that do not match an existing),
    CONTENT#1494(   connection -- based on Destination Connection ID or, if this value is),
    CONTENT#1495(   zero length, local IP address and port -- are discarded.),
      BREAK#1496,
    CONTENT#1497(   Due to packet reordering or loss, a client might receive packets for),
    CONTENT#1498(   a connection that are encrypted with a key it has not yet computed.),
    CONTENT#1499(   The client MAY drop these packets, or it MAY buffer them in),
    CONTENT#1500(   anticipation of later packets that allow it to compute the key.),
      BREAK#1501,
    CONTENT#1502(   If a client receives a packet that uses a different version than it),
    CONTENT#1503(   initially selected, it MUST discard that packet.),
      BREAK#1504,
    SECTION#1505(id=5.2.2, title=Server Packet Handling),
      BREAK#1506,
    CONTENT#1507(   If a server receives a packet that indicates an unsupported version),
    CONTENT#1508(   and if the packet is large enough to initiate a new connection for),
    CONTENT#1509(   any supported version, the server SHOULD send a Version Negotiation),
    CONTENT#1510(   packet as described in Section 6.1.  A server MAY limit the number of),
    CONTENT#1511(   packets to which it responds with a Version Negotiation packet.),
    CONTENT#1512(   Servers MUST drop smaller packets that specify unsupported versions.),
      BREAK#1513,
    CONTENT#1514(   The first packet for an unsupported version can use different),
    CONTENT#1515(   semantics and encodings for any version-specific field.  In),
    CONTENT#1516(   particular, different packet protection keys might be used for),
    CONTENT#1517(   different versions.  Servers that do not support a particular version),
    CONTENT#1518(   are unlikely to be able to decrypt the payload of the packet or),
    CONTENT#1519(   properly interpret the result.  Servers SHOULD respond with a Version),
    CONTENT#1520(   Negotiation packet, provided that the datagram is sufficiently long.),
      BREAK#1521,
    CONTENT#1522(   Packets with a supported version, or no Version field, are matched to),
    CONTENT#1523(   a connection using the connection ID or -- for packets with zero-),
    CONTENT#1524(   length connection IDs -- the local address and port.  These packets),
    CONTENT#1525(   are processed using the selected connection; otherwise, the server),
    CONTENT#1526(   continues as described below.),
      BREAK#1527,
    CONTENT#1528(   If the packet is an Initial packet fully conforming with the),
    CONTENT#1529(   specification, the server proceeds with the handshake (Section 7).),
    CONTENT#1530(   This commits the server to the version that the client selected.),
      BREAK#1531,
    CONTENT#1532(   If a server refuses to accept a new connection, it SHOULD send an),
    CONTENT#1533(   Initial packet containing a CONNECTION_CLOSE frame with error code),
    CONTENT#1534(   CONNECTION_REFUSED.),
      BREAK#1535,
    CONTENT#1536(   If the packet is a 0-RTT packet, the server MAY buffer a limited),
    CONTENT#1537(   number of these packets in anticipation of a late-arriving Initial),
    CONTENT#1538(   packet.  Clients are not able to send Handshake packets prior to),
    CONTENT#1539(   receiving a server response, so servers SHOULD ignore any such),
    CONTENT#1540(   packets.),
      BREAK#1541,
    CONTENT#1542(   Servers MUST drop incoming packets under all other circumstances.),
      BREAK#1543,
    SECTION#1544(id=5.2.3, title=Considerations for Simple Load Balancers),
      BREAK#1545,
    CONTENT#1546(   A server deployment could load-balance among servers using only),
    CONTENT#1547(   source and destination IP addresses and ports.  Changes to the),
    CONTENT#1548(   client's IP address or port could result in packets being forwarded),
    CONTENT#1549(   to the wrong server.  Such a server deployment could use one of the),
    CONTENT#1550(   following methods for connection continuity when a client's address),
    CONTENT#1551(   changes.),
      BREAK#1552,
    CONTENT#1553(   *  Servers could use an out-of-band mechanism to forward packets to),
    CONTENT#1554(      the correct server based on connection ID.),
      BREAK#1555,
    CONTENT#1556(   *  If servers can use a dedicated server IP address or port, other),
    CONTENT#1557(      than the one that the client initially connects to, they could use),
    CONTENT#1558(      the preferred_address transport parameter to request that clients),
    CONTENT#1559(      move connections to that dedicated address.  Note that clients),
    CONTENT#1560(      could choose not to use the preferred address.),
      BREAK#1561,
    CONTENT#1562(   A server in a deployment that does not implement a solution to),
    CONTENT#1563(   maintain connection continuity when the client address changes SHOULD),
    CONTENT#1564(   indicate that migration is not supported by using the),
    CONTENT#1565(   disable_active_migration transport parameter.  The),
    CONTENT#1566(   disable_active_migration transport parameter does not prohibit),
    CONTENT#1567(   connection migration after a client has acted on a preferred_address),
    CONTENT#1568(   transport parameter.),
      BREAK#1569,
    CONTENT#1570(   Server deployments that use this simple form of load balancing MUST),
    CONTENT#1571(   avoid the creation of a stateless reset oracle; see Section 21.11.),
      BREAK#1572,
    SECTION#1573(id=5.3, title=Operations on Connections),
      BREAK#1574,
    CONTENT#1575(   This document does not define an API for QUIC; it instead defines a),
    CONTENT#1576(   set of functions for QUIC connections that application protocols can),
    CONTENT#1577(   rely upon.  An application protocol can assume that an implementation),
    CONTENT#1578(   of QUIC provides an interface that includes the operations described),
    CONTENT#1579(   in this section.  An implementation designed for use with a specific),
    CONTENT#1580(   application protocol might provide only those operations that are),
    CONTENT#1581(   used by that protocol.),
      BREAK#1582,
    CONTENT#1583(   When implementing the client role, an application protocol can:),
      BREAK#1584,
    CONTENT#1585(   *  open a connection, which begins the exchange described in),
    CONTENT#1586(      Section 7;),
      BREAK#1587,
    CONTENT#1588(   *  enable Early Data when available; and),
      BREAK#1589,
    CONTENT#1590(   *  be informed when Early Data has been accepted or rejected by a),
    CONTENT#1591(      server.),
      BREAK#1592,
    CONTENT#1593(   When implementing the server role, an application protocol can:),
      BREAK#1594,
    CONTENT#1595(   *  listen for incoming connections, which prepares for the exchange),
    CONTENT#1596(      described in Section 7;),
      BREAK#1597,
    CONTENT#1598(   *  if Early Data is supported, embed application-controlled data in),
    CONTENT#1599(      the TLS resumption ticket sent to the client; and),
      BREAK#1600,
    CONTENT#1601(   *  if Early Data is supported, retrieve application-controlled data),
    CONTENT#1602(      from the client's resumption ticket and accept or reject Early),
    CONTENT#1603(      Data based on that information.),
      BREAK#1604,
    CONTENT#1605(   In either role, an application protocol can:),
      BREAK#1606,
    CONTENT#1607(   *  configure minimum values for the initial number of permitted),
    CONTENT#1608(      streams of each type, as communicated in the transport parameters),
    CONTENT#1609(      (Section 7.4);),
      BREAK#1610,
    CONTENT#1611(   *  control resource allocation for receive buffers by setting flow),
    CONTENT#1612(      control limits both for streams and for the connection;),
      BREAK#1613,
    CONTENT#1614(   *  identify whether the handshake has completed successfully or is),
    CONTENT#1615(      still ongoing;),
      BREAK#1616,
    CONTENT#1617(   *  keep a connection from silently closing, by either generating PING),
    CONTENT#1618(      frames (Section 19.2) or requesting that the transport send),
    CONTENT#1619(      additional frames before the idle timeout expires (Section 10.1);),
    CONTENT#1620(      and),
      BREAK#1621,
    CONTENT#1622(   *  immediately close (Section 10.2) the connection.),
      BREAK#1623,
    SECTION#1624(id=6, title=Version Negotiation),
      BREAK#1625,
    CONTENT#1626(   Version negotiation allows a server to indicate that it does not),
    CONTENT#1627(   support the version the client used.  A server sends a Version),
    CONTENT#1628(   Negotiation packet in response to each packet that might initiate a),
    CONTENT#1629(   new connection; see Section 5.2 for details.),
      BREAK#1630,
    CONTENT#1631(   The size of the first packet sent by a client will determine whether),
    CONTENT#1632(   a server sends a Version Negotiation packet.  Clients that support),
    CONTENT#1633(   multiple QUIC versions SHOULD ensure that the first UDP datagram they),
    CONTENT#1634(   send is sized to the largest of the minimum datagram sizes from all),
    CONTENT#1635(   versions they support, using PADDING frames (Section 19.1) as),
    CONTENT#1636(   necessary.  This ensures that the server responds if there is a),
    CONTENT#1637(   mutually supported version.  A server might not send a Version),
    CONTENT#1638(   Negotiation packet if the datagram it receives is smaller than the),
    CONTENT#1639(   minimum size specified in a different version; see Section 14.1.),
      BREAK#1640,
    SECTION#1641(id=6.1, title=Sending Version Negotiation Packets),
      BREAK#1642,
    CONTENT#1643(   If the version selected by the client is not acceptable to the),
    CONTENT#1644(   server, the server responds with a Version Negotiation packet; see),
    CONTENT#1645(   Section 17.2.1.  This includes a list of versions that the server),
    CONTENT#1646(   will accept.  An endpoint MUST NOT send a Version Negotiation packet),
    CONTENT#1647(   in response to receiving a Version Negotiation packet.),
      BREAK#1648,
    CONTENT#1649(   This system allows a server to process packets with unsupported),
    CONTENT#1650(   versions without retaining state.  Though either the Initial packet),
    CONTENT#1651(   or the Version Negotiation packet that is sent in response could be),
    CONTENT#1652(   lost, the client will send new packets until it successfully receives),
    CONTENT#1653(   a response or it abandons the connection attempt.),
      BREAK#1654,
    CONTENT#1655(   A server MAY limit the number of Version Negotiation packets it),
    CONTENT#1656(   sends.  For instance, a server that is able to recognize packets as),
    CONTENT#1657(   0-RTT might choose not to send Version Negotiation packets in),
    CONTENT#1658(   response to 0-RTT packets with the expectation that it will),
    CONTENT#1659(   eventually receive an Initial packet.),
      BREAK#1660,
    SECTION#1661(id=6.2, title=Handling Version Negotiation Packets),
      BREAK#1662,
    CONTENT#1663(   Version Negotiation packets are designed to allow for functionality),
    CONTENT#1664(   to be defined in the future that allows QUIC to negotiate the version),
    CONTENT#1665(   of QUIC to use for a connection.  Future Standards Track),
    CONTENT#1666(   specifications might change how implementations that support multiple),
    CONTENT#1667(   versions of QUIC react to Version Negotiation packets received in),
    CONTENT#1668(   response to an attempt to establish a connection using this version.),
      BREAK#1669,
    CONTENT#1670(   A client that supports only this version of QUIC MUST abandon the),
    CONTENT#1671(   current connection attempt if it receives a Version Negotiation),
    CONTENT#1672(   packet, with the following two exceptions.  A client MUST discard any),
    CONTENT#1673(   Version Negotiation packet if it has received and successfully),
    CONTENT#1674(   processed any other packet, including an earlier Version Negotiation),
    CONTENT#1675(   packet.  A client MUST discard a Version Negotiation packet that),
    CONTENT#1676(   lists the QUIC version selected by the client.),
      BREAK#1677,
    CONTENT#1678(   How to perform version negotiation is left as future work defined by),
    CONTENT#1679(   future Standards Track specifications.  In particular, that future),
    CONTENT#1680(   work will ensure robustness against version downgrade attacks; see),
    CONTENT#1681(   Section 21.12.),
      BREAK#1682,
    SECTION#1683(id=6.3, title=Using Reserved Versions),
      BREAK#1684,
    CONTENT#1685(   For a server to use a new version in the future, clients need to),
    CONTENT#1686(   correctly handle unsupported versions.  Some version numbers),
    CONTENT#1687(   (0x?a?a?a?a, as defined in Section 15) are reserved for inclusion in),
    CONTENT#1688(   fields that contain version numbers.),
      BREAK#1689,
    CONTENT#1690(   Endpoints MAY add reserved versions to any field where unknown or),
    CONTENT#1691(   unsupported versions are ignored to test that a peer correctly),
    CONTENT#1692(   ignores the value.  For instance, an endpoint could include a),
    CONTENT#1693(   reserved version in a Version Negotiation packet; see Section 17.2.1.),
    CONTENT#1694(   Endpoints MAY send packets with a reserved version to test that a),
    CONTENT#1695(   peer correctly discards the packet.),
      BREAK#1696,
    SECTION#1697(id=7, title=Cryptographic and Transport Handshake),
      BREAK#1698,
    CONTENT#1699(   QUIC relies on a combined cryptographic and transport handshake to),
    CONTENT#1700(   minimize connection establishment latency.  QUIC uses the CRYPTO),
    CONTENT#1701(   frame (Section 19.6) to transmit the cryptographic handshake.  The),
    CONTENT#1702(   version of QUIC defined in this document is identified as 0x00000001),
    CONTENT#1703(   and uses TLS as described in [QUIC-TLS]; a different QUIC version),
    CONTENT#1704(   could indicate that a different cryptographic handshake protocol is),
    CONTENT#1705(   in use.),
      BREAK#1706,
    CONTENT#1707(   QUIC provides reliable, ordered delivery of the cryptographic),
    CONTENT#1708(   handshake data.  QUIC packet protection is used to encrypt as much of),
    CONTENT#1709(   the handshake protocol as possible.  The cryptographic handshake MUST),
    CONTENT#1710(   provide the following properties:),
      BREAK#1711,
    CONTENT#1712(   *  authenticated key exchange, where),
      BREAK#1713,
    CONTENT#1714(      -  a server is always authenticated,),
      BREAK#1715,
    CONTENT#1716(      -  a client is optionally authenticated,),
      BREAK#1717,
    CONTENT#1718(      -  every connection produces distinct and unrelated keys, and),
      BREAK#1719,
    CONTENT#1720(      -  keying material is usable for packet protection for both 0-RTT),
    CONTENT#1721(         and 1-RTT packets.),
      BREAK#1722,
    CONTENT#1723(   *  authenticated exchange of values for transport parameters of both),
    CONTENT#1724(      endpoints, and confidentiality protection for server transport),
    CONTENT#1725(      parameters (see Section 7.4).),
      BREAK#1726,
    CONTENT#1727(   *  authenticated negotiation of an application protocol (TLS uses),
    CONTENT#1728(      Application-Layer Protocol Negotiation (ALPN) [ALPN] for this),
    CONTENT#1729(      purpose).),
      BREAK#1730,
    CONTENT#1731(   The CRYPTO frame can be sent in different packet number spaces),
    CONTENT#1732(   (Section 12.3).  The offsets used by CRYPTO frames to ensure ordered),
    CONTENT#1733(   delivery of cryptographic handshake data start from zero in each),
    CONTENT#1734(   packet number space.),
      BREAK#1735,
    CONTENT#1736(   Figure 4 shows a simplified handshake and the exchange of packets and),
    CONTENT#1737(   frames that are used to advance the handshake.  Exchange of),
    CONTENT#1738(   application data during the handshake is enabled where possible,),
    CONTENT#1739(   shown with an asterisk ("*").  Once the handshake is complete,),
    CONTENT#1740(   endpoints are able to exchange application data freely.),
      BREAK#1741,
    CONTENT#1742(   Client                                               Server),
      BREAK#1743,
    CONTENT#1744(   Initial (CRYPTO)),
    CONTENT#1745(   0-RTT (*)              ---------->),
    CONTENT#1746(                                              Initial (CRYPTO)),
    CONTENT#1747(                                            Handshake (CRYPTO)),
    CONTENT#1748(                          <----------                1-RTT (*)),
    CONTENT#1749(   Handshake (CRYPTO)),
    CONTENT#1750(   1-RTT (*)              ---------->),
    CONTENT#1751(                          <----------   1-RTT (HANDSHAKE_DONE)),
      BREAK#1752,
    CONTENT#1753(   1-RTT                  <=========>                    1-RTT),
      BREAK#1754,
    CONTENT#1755(                    Figure 4: Simplified QUIC Handshake),
      BREAK#1756,
    CONTENT#1757(   Endpoints can use packets sent during the handshake to test for),
    CONTENT#1758(   Explicit Congestion Notification (ECN) support; see Section 13.4.  An),
    CONTENT#1759(   endpoint validates support for ECN by observing whether the ACK),
    CONTENT#1760(   frames acknowledging the first packets it sends carry ECN counts, as),
    CONTENT#1761(   described in Section 13.4.2.),
      BREAK#1762,
    CONTENT#1763(   Endpoints MUST explicitly negotiate an application protocol.  This),
    CONTENT#1764(   avoids situations where there is a disagreement about the protocol),
    CONTENT#1765(   that is in use.),
      BREAK#1766,
    SECTION#1767(id=7.1, title=Example Handshake Flows),
      BREAK#1768,
    CONTENT#1769(   Details of how TLS is integrated with QUIC are provided in),
    CONTENT#1770(   [QUIC-TLS], but some examples are provided here.  An extension of),
    CONTENT#1771(   this exchange to support client address validation is shown in),
    CONTENT#1772(   Section 8.1.2.),
      BREAK#1773,
    CONTENT#1774(   Once any address validation exchanges are complete, the cryptographic),
    CONTENT#1775(   handshake is used to agree on cryptographic keys.  The cryptographic),
    CONTENT#1776(   handshake is carried in Initial (Section 17.2.2) and Handshake),
    CONTENT#1777(   (Section 17.2.4) packets.),
      BREAK#1778,
    CONTENT#1779(   Figure 5 provides an overview of the 1-RTT handshake.  Each line),
    CONTENT#1780(   shows a QUIC packet with the packet type and packet number shown),
    CONTENT#1781(   first, followed by the frames that are typically contained in those),
    CONTENT#1782(   packets.  For instance, the first packet is of type Initial, with),
    CONTENT#1783(   packet number 0, and contains a CRYPTO frame carrying the),
    CONTENT#1784(   ClientHello.),
      BREAK#1785,
    CONTENT#1786(   Multiple QUIC packets -- even of different packet types -- can be),
    CONTENT#1787(   coalesced into a single UDP datagram; see Section 12.2.  As a result,),
    CONTENT#1788(   this handshake could consist of as few as four UDP datagrams, or any),
    CONTENT#1789(   number more (subject to limits inherent to the protocol, such as),
    CONTENT#1790(   congestion control and anti-amplification).  For instance, the),
    CONTENT#1791(   server's first flight contains Initial packets, Handshake packets,),
    CONTENT#1792(   and "0.5-RTT data" in 1-RTT packets.),
      BREAK#1793,
    CONTENT#1794(   Client                                                  Server),
      BREAK#1795,
    CONTENT#1796(   Initial[0]: CRYPTO[CH] ->),
      BREAK#1797,
    CONTENT#1798(                                    Initial[0]: CRYPTO[SH] ACK[0]),
    CONTENT#1799(                          Handshake[0]: CRYPTO[EE, CERT, CV, FIN]),
    CONTENT#1800(                                    <- 1-RTT[0]: STREAM[1, "..."]),
      BREAK#1801,
    CONTENT#1802(   Initial[1]: ACK[0]),
    CONTENT#1803(   Handshake[0]: CRYPTO[FIN], ACK[0]),
    CONTENT#1804(   1-RTT[0]: STREAM[0, "..."], ACK[0] ->),
      BREAK#1805,
    CONTENT#1806(                                             Handshake[1]: ACK[0]),
    CONTENT#1807(            <- 1-RTT[1]: HANDSHAKE_DONE, STREAM[3, "..."], ACK[0]),
      BREAK#1808,
    CONTENT#1809(                     Figure 5: Example 1-RTT Handshake),
      BREAK#1810,
    CONTENT#1811(   Figure 6 shows an example of a connection with a 0-RTT handshake and),
    CONTENT#1812(   a single packet of 0-RTT data.  Note that as described in),
    CONTENT#1813(   Section 12.3, the server acknowledges 0-RTT data in 1-RTT packets,),
    CONTENT#1814(   and the client sends 1-RTT packets in the same packet number space.),
      BREAK#1815,
    CONTENT#1816(   Client                                                  Server),
      BREAK#1817,
    CONTENT#1818(   Initial[0]: CRYPTO[CH]),
    CONTENT#1819(   0-RTT[0]: STREAM[0, "..."] ->),
      BREAK#1820,
    CONTENT#1821(                                    Initial[0]: CRYPTO[SH] ACK[0]),
    CONTENT#1822(                                     Handshake[0] CRYPTO[EE, FIN]),
    CONTENT#1823(                             <- 1-RTT[0]: STREAM[1, "..."] ACK[0]),
      BREAK#1824,
    CONTENT#1825(   Initial[1]: ACK[0]),
    CONTENT#1826(   Handshake[0]: CRYPTO[FIN], ACK[0]),
    CONTENT#1827(   1-RTT[1]: STREAM[0, "..."] ACK[0] ->),
      BREAK#1828,
    CONTENT#1829(                                             Handshake[1]: ACK[0]),
    CONTENT#1830(            <- 1-RTT[1]: HANDSHAKE_DONE, STREAM[3, "..."], ACK[1]),
      BREAK#1831,
    CONTENT#1832(                     Figure 6: Example 0-RTT Handshake),
      BREAK#1833,
    SECTION#1834(id=7.2, title=Negotiating Connection IDs),
      BREAK#1835,
    CONTENT#1836(   A connection ID is used to ensure consistent routing of packets, as),
    CONTENT#1837(   described in Section 5.1.  The long header contains two connection),
    CONTENT#1838(   IDs: the Destination Connection ID is chosen by the recipient of the),
    CONTENT#1839(   packet and is used to provide consistent routing; the Source),
    CONTENT#1840(   Connection ID is used to set the Destination Connection ID used by),
    CONTENT#1841(   the peer.),
      BREAK#1842,
    CONTENT#1843(   During the handshake, packets with the long header (Section 17.2) are),
    CONTENT#1844(   used to establish the connection IDs used by both endpoints.  Each),
    CONTENT#1845(   endpoint uses the Source Connection ID field to specify the),
    CONTENT#1846(   connection ID that is used in the Destination Connection ID field of),
    CONTENT#1847(   packets being sent to them.  After processing the first Initial),
    CONTENT#1848(   packet, each endpoint sets the Destination Connection ID field in),
    CONTENT#1849(   subsequent packets it sends to the value of the Source Connection ID),
    CONTENT#1850(   field that it received.),
      BREAK#1851,
    CONTENT#1852(   When an Initial packet is sent by a client that has not previously),
    CONTENT#1853(   received an Initial or Retry packet from the server, the client),
    CONTENT#1854(   populates the Destination Connection ID field with an unpredictable),
    CONTENT#1855(   value.  This Destination Connection ID MUST be at least 8 bytes in),
    CONTENT#1856(   length.  Until a packet is received from the server, the client MUST),
    CONTENT#1857(   use the same Destination Connection ID value on all packets in this),
    CONTENT#1858(   connection.),
      BREAK#1859,
    CONTENT#1860(   The Destination Connection ID field from the first Initial packet),
    CONTENT#1861(   sent by a client is used to determine packet protection keys for),
    CONTENT#1862(   Initial packets.  These keys change after receiving a Retry packet;),
    CONTENT#1863(   see Section 5.2 of [QUIC-TLS].),
      BREAK#1864,
    CONTENT#1865(   The client populates the Source Connection ID field with a value of),
    CONTENT#1866(   its choosing and sets the Source Connection ID Length field to),
    CONTENT#1867(   indicate the length.),
      BREAK#1868,
    CONTENT#1869(   0-RTT packets in the first flight use the same Destination Connection),
    CONTENT#1870(   ID and Source Connection ID values as the client's first Initial),
    CONTENT#1871(   packet.),
      BREAK#1872,
    CONTENT#1873(   Upon first receiving an Initial or Retry packet from the server, the),
    CONTENT#1874(   client uses the Source Connection ID supplied by the server as the),
    CONTENT#1875(   Destination Connection ID for subsequent packets, including any 0-RTT),
    CONTENT#1876(   packets.  This means that a client might have to change the),
    CONTENT#1877(   connection ID it sets in the Destination Connection ID field twice),
    CONTENT#1878(   during connection establishment: once in response to a Retry packet),
    CONTENT#1879(   and once in response to an Initial packet from the server.  Once a),
    CONTENT#1880(   client has received a valid Initial packet from the server, it MUST),
    CONTENT#1881(   discard any subsequent packet it receives on that connection with a),
    CONTENT#1882(   different Source Connection ID.),
      BREAK#1883,
    CONTENT#1884(   A client MUST change the Destination Connection ID it uses for),
    CONTENT#1885(   sending packets in response to only the first received Initial or),
    CONTENT#1886(   Retry packet.  A server MUST set the Destination Connection ID it),
    CONTENT#1887(   uses for sending packets based on the first received Initial packet.),
    CONTENT#1888(   Any further changes to the Destination Connection ID are only),
    CONTENT#1889(   permitted if the values are taken from NEW_CONNECTION_ID frames; if),
    CONTENT#1890(   subsequent Initial packets include a different Source Connection ID,),
    CONTENT#1891(   they MUST be discarded.  This avoids unpredictable outcomes that),
    CONTENT#1892(   might otherwise result from stateless processing of multiple Initial),
    CONTENT#1893(   packets with different Source Connection IDs.),
      BREAK#1894,
    CONTENT#1895(   The Destination Connection ID that an endpoint sends can change over),
    CONTENT#1896(   the lifetime of a connection, especially in response to connection),
    CONTENT#1897(   migration (Section 9); see Section 5.1.1 for details.),
      BREAK#1898,
    SECTION#1899(id=7.3, title=Authenticating Connection IDs),
      BREAK#1900,
    CONTENT#1901(   The choice each endpoint makes about connection IDs during the),
    CONTENT#1902(   handshake is authenticated by including all values in transport),
    CONTENT#1903(   parameters; see Section 7.4.  This ensures that all connection IDs),
    CONTENT#1904(   used for the handshake are also authenticated by the cryptographic),
    CONTENT#1905(   handshake.),
      BREAK#1906,
    CONTENT#1907(   Each endpoint includes the value of the Source Connection ID field),
    CONTENT#1908(   from the first Initial packet it sent in the),
    CONTENT#1909(   initial_source_connection_id transport parameter; see Section 18.2.),
    CONTENT#1910(   A server includes the Destination Connection ID field from the first),
    CONTENT#1911(   Initial packet it received from the client in the),
    CONTENT#1912(   original_destination_connection_id transport parameter; if the server),
    CONTENT#1913(   sent a Retry packet, this refers to the first Initial packet received),
    CONTENT#1914(   before sending the Retry packet.  If it sends a Retry packet, a),
    CONTENT#1915(   server also includes the Source Connection ID field from the Retry),
    CONTENT#1916(   packet in the retry_source_connection_id transport parameter.),
      BREAK#1917,
    CONTENT#1918(   The values provided by a peer for these transport parameters MUST),
    CONTENT#1919(   match the values that an endpoint used in the Destination and Source),
    CONTENT#1920(   Connection ID fields of Initial packets that it sent (and received,),
    CONTENT#1921(   for servers).  Endpoints MUST validate that received transport),
    CONTENT#1922(   parameters match received connection ID values.  Including connection),
    CONTENT#1923(   ID values in transport parameters and verifying them ensures that an),
    CONTENT#1924(   attacker cannot influence the choice of connection ID for a),
    CONTENT#1925(   successful connection by injecting packets carrying attacker-chosen),
    CONTENT#1926(   connection IDs during the handshake.),
      BREAK#1927,
    CONTENT#1928(   An endpoint MUST treat the absence of the),
    CONTENT#1929(   initial_source_connection_id transport parameter from either endpoint),
    CONTENT#1930(   or the absence of the original_destination_connection_id transport),
    CONTENT#1931(   parameter from the server as a connection error of type),
    CONTENT#1932(   TRANSPORT_PARAMETER_ERROR.),
      BREAK#1933,
    CONTENT#1934(   An endpoint MUST treat the following as a connection error of type),
    CONTENT#1935(   TRANSPORT_PARAMETER_ERROR or PROTOCOL_VIOLATION:),
      BREAK#1936,
    CONTENT#1937(   *  absence of the retry_source_connection_id transport parameter from),
    CONTENT#1938(      the server after receiving a Retry packet,),
      BREAK#1939,
    CONTENT#1940(   *  presence of the retry_source_connection_id transport parameter),
    CONTENT#1941(      when no Retry packet was received, or),
      BREAK#1942,
    CONTENT#1943(   *  a mismatch between values received from a peer in these transport),
    CONTENT#1944(      parameters and the value sent in the corresponding Destination or),
    CONTENT#1945(      Source Connection ID fields of Initial packets.),
      BREAK#1946,
    CONTENT#1947(   If a zero-length connection ID is selected, the corresponding),
    CONTENT#1948(   transport parameter is included with a zero-length value.),
      BREAK#1949,
    CONTENT#1950(   Figure 7 shows the connection IDs (with DCID=Destination Connection),
    CONTENT#1951(   ID, SCID=Source Connection ID) that are used in a complete handshake.),
    CONTENT#1952(   The exchange of Initial packets is shown, plus the later exchange of),
    CONTENT#1953(   1-RTT packets that includes the connection ID established during the),
    CONTENT#1954(   handshake.),
      BREAK#1955,
    CONTENT#1956(   Client                                                  Server),
      BREAK#1957,
    CONTENT#1958(   Initial: DCID=S1, SCID=C1 ->),
    CONTENT#1959(                                     <- Initial: DCID=C1, SCID=S3),
    CONTENT#1960(                                ...),
    CONTENT#1961(   1-RTT: DCID=S3 ->),
    CONTENT#1962(                                                <- 1-RTT: DCID=C1),
      BREAK#1963,
    CONTENT#1964(               Figure 7: Use of Connection IDs in a Handshake),
      BREAK#1965,
    CONTENT#1966(   Figure 8 shows a similar handshake that includes a Retry packet.),
      BREAK#1967,
    CONTENT#1968(   Client                                                  Server),
      BREAK#1969,
    CONTENT#1970(   Initial: DCID=S1, SCID=C1 ->),
    CONTENT#1971(                                       <- Retry: DCID=C1, SCID=S2),
    CONTENT#1972(   Initial: DCID=S2, SCID=C1 ->),
    CONTENT#1973(                                     <- Initial: DCID=C1, SCID=S3),
    CONTENT#1974(                                ...),
    CONTENT#1975(   1-RTT: DCID=S3 ->),
    CONTENT#1976(                                                <- 1-RTT: DCID=C1),
      BREAK#1977,
    CONTENT#1978(         Figure 8: Use of Connection IDs in a Handshake with Retry),
      BREAK#1979,
    CONTENT#1980(   In both cases (Figures 7 and 8), the client sets the value of the),
    CONTENT#1981(   initial_source_connection_id transport parameter to "C1".),
      BREAK#1982,
    CONTENT#1983(   When the handshake does not include a Retry (Figure 7), the server),
    CONTENT#1984(   sets original_destination_connection_id to "S1" (note that this value),
    CONTENT#1985(   is chosen by the client) and initial_source_connection_id to "S3".),
    CONTENT#1986(   In this case, the server does not include a),
    CONTENT#1987(   retry_source_connection_id transport parameter.),
      BREAK#1988,
    CONTENT#1989(   When the handshake includes a Retry (Figure 8), the server sets),
    CONTENT#1990(   original_destination_connection_id to "S1",),
    CONTENT#1991(   retry_source_connection_id to "S2", and initial_source_connection_id),
    CONTENT#1992(   to "S3".),
      BREAK#1993,
    SECTION#1994(id=7.4, title=Transport Parameters),
      BREAK#1995,
    CONTENT#1996(   During connection establishment, both endpoints make authenticated),
    CONTENT#1997(   declarations of their transport parameters.  Endpoints are required),
    CONTENT#1998(   to comply with the restrictions that each parameter defines; the),
    CONTENT#1999(   description of each parameter includes rules for its handling.),
      BREAK#2000,
    CONTENT#2001(   Transport parameters are declarations that are made unilaterally by),
    CONTENT#2002(   each endpoint.  Each endpoint can choose values for transport),
    CONTENT#2003(   parameters independent of the values chosen by its peer.),
      BREAK#2004,
    CONTENT#2005(   The encoding of the transport parameters is detailed in Section 18.),
      BREAK#2006,
    CONTENT#2007(   QUIC includes the encoded transport parameters in the cryptographic),
    CONTENT#2008(   handshake.  Once the handshake completes, the transport parameters),
    CONTENT#2009(   declared by the peer are available.  Each endpoint validates the),
    CONTENT#2010(   values provided by its peer.),
      BREAK#2011,
    CONTENT#2012(   Definitions for each of the defined transport parameters are included),
    CONTENT#2013(   in Section 18.2.),
      BREAK#2014,
    CONTENT#2015(   An endpoint MUST treat receipt of a transport parameter with an),
    CONTENT#2016(   invalid value as a connection error of type),
    CONTENT#2017(   TRANSPORT_PARAMETER_ERROR.),
      BREAK#2018,
    CONTENT#2019(   An endpoint MUST NOT send a parameter more than once in a given),
    CONTENT#2020(   transport parameters extension.  An endpoint SHOULD treat receipt of),
    CONTENT#2021(   duplicate transport parameters as a connection error of type),
    CONTENT#2022(   TRANSPORT_PARAMETER_ERROR.),
      BREAK#2023,
    CONTENT#2024(   Endpoints use transport parameters to authenticate the negotiation of),
    CONTENT#2025(   connection IDs during the handshake; see Section 7.3.),
      BREAK#2026,
    CONTENT#2027(   ALPN (see [ALPN]) allows clients to offer multiple application),
    CONTENT#2028(   protocols during connection establishment.  The transport parameters),
    CONTENT#2029(   that a client includes during the handshake apply to all application),
    CONTENT#2030(   protocols that the client offers.  Application protocols can),
    CONTENT#2031(   recommend values for transport parameters, such as the initial flow),
    CONTENT#2032(   control limits.  However, application protocols that set constraints),
    CONTENT#2033(   on values for transport parameters could make it impossible for a),
    CONTENT#2034(   client to offer multiple application protocols if these constraints),
    CONTENT#2035(   conflict.),
      BREAK#2036,
    SECTION#2037(id=7.4.1, title=Values of Transport Parameters for 0-RTT),
      BREAK#2038,
    CONTENT#2039(   Using 0-RTT depends on both client and server using protocol),
    CONTENT#2040(   parameters that were negotiated from a previous connection.  To),
    CONTENT#2041(   enable 0-RTT, endpoints store the values of the server transport),
    CONTENT#2042(   parameters with any session tickets it receives on the connection.),
    CONTENT#2043(   Endpoints also store any information required by the application),
    CONTENT#2044(   protocol or cryptographic handshake; see Section 4.6 of [QUIC-TLS].),
    CONTENT#2045(   The values of stored transport parameters are used when attempting),
    CONTENT#2046(   0-RTT using the session tickets.),
      BREAK#2047,
    CONTENT#2048(   Remembered transport parameters apply to the new connection until the),
    CONTENT#2049(   handshake completes and the client starts sending 1-RTT packets.),
    CONTENT#2050(   Once the handshake completes, the client uses the transport),
    CONTENT#2051(   parameters established in the handshake.  Not all transport),
    CONTENT#2052(   parameters are remembered, as some do not apply to future connections),
    CONTENT#2053(   or they have no effect on the use of 0-RTT.),
      BREAK#2054,
    CONTENT#2055(   The definition of a new transport parameter (Section 7.4.2) MUST),
    CONTENT#2056(   specify whether storing the transport parameter for 0-RTT is),
    CONTENT#2057(   mandatory, optional, or prohibited.  A client need not store a),
    CONTENT#2058(   transport parameter it cannot process.),
      BREAK#2059,
    CONTENT#2060(   A client MUST NOT use remembered values for the following parameters:),
    CONTENT#2061(   ack_delay_exponent, max_ack_delay, initial_source_connection_id,),
    CONTENT#2062(   original_destination_connection_id, preferred_address,),
    CONTENT#2063(   retry_source_connection_id, and stateless_reset_token.  The client),
    CONTENT#2064(   MUST use the server's new values in the handshake instead; if the),
    CONTENT#2065(   server does not provide new values, the default values are used.),
      BREAK#2066,
    CONTENT#2067(   A client that attempts to send 0-RTT data MUST remember all other),
    CONTENT#2068(   transport parameters used by the server that it is able to process.),
    CONTENT#2069(   The server can remember these transport parameters or can store an),
    CONTENT#2070(   integrity-protected copy of the values in the ticket and recover the),
    CONTENT#2071(   information when accepting 0-RTT data.  A server uses the transport),
    CONTENT#2072(   parameters in determining whether to accept 0-RTT data.),
      BREAK#2073,
    CONTENT#2074(   If 0-RTT data is accepted by the server, the server MUST NOT reduce),
    CONTENT#2075(   any limits or alter any values that might be violated by the client),
    CONTENT#2076(   with its 0-RTT data.  In particular, a server that accepts 0-RTT data),
    CONTENT#2077(   MUST NOT set values for the following parameters (Section 18.2) that),
    CONTENT#2078(   are smaller than the remembered values of the parameters.),
      BREAK#2079,
    CONTENT#2080(   *  active_connection_id_limit),
      BREAK#2081,
    CONTENT#2082(   *  initial_max_data),
      BREAK#2083,
    CONTENT#2084(   *  initial_max_stream_data_bidi_local),
      BREAK#2085,
    CONTENT#2086(   *  initial_max_stream_data_bidi_remote),
      BREAK#2087,
    CONTENT#2088(   *  initial_max_stream_data_uni),
      BREAK#2089,
    CONTENT#2090(   *  initial_max_streams_bidi),
      BREAK#2091,
    CONTENT#2092(   *  initial_max_streams_uni),
      BREAK#2093,
    CONTENT#2094(   Omitting or setting a zero value for certain transport parameters can),
    CONTENT#2095(   result in 0-RTT data being enabled but not usable.  The applicable),
    CONTENT#2096(   subset of transport parameters that permit the sending of application),
    CONTENT#2097(   data SHOULD be set to non-zero values for 0-RTT.  This includes),
    CONTENT#2098(   initial_max_data and either (1) initial_max_streams_bidi and),
    CONTENT#2099(   initial_max_stream_data_bidi_remote or (2) initial_max_streams_uni),
    CONTENT#2100(   and initial_max_stream_data_uni.),
      BREAK#2101,
    CONTENT#2102(   A server might provide larger initial stream flow control limits for),
    CONTENT#2103(   streams than the remembered values that a client applies when sending),
    CONTENT#2104(   0-RTT.  Once the handshake completes, the client updates the flow),
    CONTENT#2105(   control limits on all sending streams using the updated values of),
    CONTENT#2106(   initial_max_stream_data_bidi_remote and initial_max_stream_data_uni.),
      BREAK#2107,
    CONTENT#2108(   A server MAY store and recover the previously sent values of the),
    CONTENT#2109(   max_idle_timeout, max_udp_payload_size, and disable_active_migration),
    CONTENT#2110(   parameters and reject 0-RTT if it selects smaller values.  Lowering),
    CONTENT#2111(   the values of these parameters while also accepting 0-RTT data could),
    CONTENT#2112(   degrade the performance of the connection.  Specifically, lowering),
    CONTENT#2113(   the max_udp_payload_size could result in dropped packets, leading to),
    CONTENT#2114(   worse performance compared to rejecting 0-RTT data outright.),
      BREAK#2115,
    CONTENT#2116(   A server MUST reject 0-RTT data if the restored values for transport),
    CONTENT#2117(   parameters cannot be supported.),
      BREAK#2118,
    CONTENT#2119(   When sending frames in 0-RTT packets, a client MUST only use),
    CONTENT#2120(   remembered transport parameters; importantly, it MUST NOT use updated),
    CONTENT#2121(   values that it learns from the server's updated transport parameters),
    CONTENT#2122(   or from frames received in 1-RTT packets.  Updated values of),
    CONTENT#2123(   transport parameters from the handshake apply only to 1-RTT packets.),
    CONTENT#2124(   For instance, flow control limits from remembered transport),
    CONTENT#2125(   parameters apply to all 0-RTT packets even if those values are),
    CONTENT#2126(   increased by the handshake or by frames sent in 1-RTT packets.  A),
    CONTENT#2127(   server MAY treat the use of updated transport parameters in 0-RTT as),
    CONTENT#2128(   a connection error of type PROTOCOL_VIOLATION.),
      BREAK#2129,
    SECTION#2130(id=7.4.2, title=New Transport Parameters),
      BREAK#2131,
    CONTENT#2132(   New transport parameters can be used to negotiate new protocol),
    CONTENT#2133(   behavior.  An endpoint MUST ignore transport parameters that it does),
    CONTENT#2134(   not support.  The absence of a transport parameter therefore disables),
    CONTENT#2135(   any optional protocol feature that is negotiated using the parameter.),
    CONTENT#2136(   As described in Section 18.1, some identifiers are reserved in order),
    CONTENT#2137(   to exercise this requirement.),
      BREAK#2138,
    CONTENT#2139(   A client that does not understand a transport parameter can discard),
    CONTENT#2140(   it and attempt 0-RTT on subsequent connections.  However, if the),
    CONTENT#2141(   client adds support for a discarded transport parameter, it risks),
    CONTENT#2142(   violating the constraints that the transport parameter establishes if),
    CONTENT#2143(   it attempts 0-RTT.  New transport parameters can avoid this problem),
    CONTENT#2144(   by setting a default of the most conservative value.  Clients can),
    CONTENT#2145(   avoid this problem by remembering all parameters, even those not),
    CONTENT#2146(   currently supported.),
      BREAK#2147,
    CONTENT#2148(   New transport parameters can be registered according to the rules in),
    CONTENT#2149(   Section 22.3.),
      BREAK#2150,
    SECTION#2151(id=7.5, title=Cryptographic Message Buffering),
      BREAK#2152,
    CONTENT#2153(   Implementations need to maintain a buffer of CRYPTO data received out),
    CONTENT#2154(   of order.  Because there is no flow control of CRYPTO frames, an),
    CONTENT#2155(   endpoint could potentially force its peer to buffer an unbounded),
    CONTENT#2156(   amount of data.),
      BREAK#2157,
    CONTENT#2158(   Implementations MUST support buffering at least 4096 bytes of data),
    CONTENT#2159(   received in out-of-order CRYPTO frames.  Endpoints MAY choose to),
    CONTENT#2160(   allow more data to be buffered during the handshake.  A larger limit),
    CONTENT#2161(   during the handshake could allow for larger keys or credentials to be),
    CONTENT#2162(   exchanged.  An endpoint's buffer size does not need to remain),
    CONTENT#2163(   constant during the life of the connection.),
      BREAK#2164,
    CONTENT#2165(   Being unable to buffer CRYPTO frames during the handshake can lead to),
    CONTENT#2166(   a connection failure.  If an endpoint's buffer is exceeded during the),
    CONTENT#2167(   handshake, it can expand its buffer temporarily to complete the),
    CONTENT#2168(   handshake.  If an endpoint does not expand its buffer, it MUST close),
    CONTENT#2169(   the connection with a CRYPTO_BUFFER_EXCEEDED error code.),
      BREAK#2170,
    CONTENT#2171(   Once the handshake completes, if an endpoint is unable to buffer all),
    CONTENT#2172(   data in a CRYPTO frame, it MAY discard that CRYPTO frame and all),
    CONTENT#2173(   CRYPTO frames received in the future, or it MAY close the connection),
    CONTENT#2174(   with a CRYPTO_BUFFER_EXCEEDED error code.  Packets containing),
    CONTENT#2175(   discarded CRYPTO frames MUST be acknowledged because the packet has),
    CONTENT#2176(   been received and processed by the transport even though the CRYPTO),
    CONTENT#2177(   frame was discarded.),
      BREAK#2178,
    SECTION#2179(id=8, title=Address Validation),
      BREAK#2180,
    CONTENT#2181(   Address validation ensures that an endpoint cannot be used for a),
    CONTENT#2182(   traffic amplification attack.  In such an attack, a packet is sent to),
    CONTENT#2183(   a server with spoofed source address information that identifies a),
    CONTENT#2184(   victim.  If a server generates more or larger packets in response to),
    CONTENT#2185(   that packet, the attacker can use the server to send more data toward),
    CONTENT#2186(   the victim than it would be able to send on its own.),
      BREAK#2187,
    CONTENT#2188(   The primary defense against amplification attacks is verifying that a),
    CONTENT#2189(   peer is able to receive packets at the transport address that it),
    CONTENT#2190(   claims.  Therefore, after receiving packets from an address that is),
    CONTENT#2191(   not yet validated, an endpoint MUST limit the amount of data it sends),
    CONTENT#2192(   to the unvalidated address to three times the amount of data received),
    CONTENT#2193(   from that address.  This limit on the size of responses is known as),
    CONTENT#2194(   the anti-amplification limit.),
      BREAK#2195,
    CONTENT#2196(   Address validation is performed both during connection establishment),
    CONTENT#2197(   (see Section 8.1) and during connection migration (see Section 8.2).),
      BREAK#2198,
    SECTION#2199(id=8.1, title=Address Validation during Connection Establishment),
      BREAK#2200,
    CONTENT#2201(   Connection establishment implicitly provides address validation for),
    CONTENT#2202(   both endpoints.  In particular, receipt of a packet protected with),
    CONTENT#2203(   Handshake keys confirms that the peer successfully processed an),
    CONTENT#2204(   Initial packet.  Once an endpoint has successfully processed a),
    CONTENT#2205(   Handshake packet from the peer, it can consider the peer address to),
    CONTENT#2206(   have been validated.),
      BREAK#2207,
    CONTENT#2208(   Additionally, an endpoint MAY consider the peer address validated if),
    CONTENT#2209(   the peer uses a connection ID chosen by the endpoint and the),
    CONTENT#2210(   connection ID contains at least 64 bits of entropy.),
      BREAK#2211,
    CONTENT#2212(   For the client, the value of the Destination Connection ID field in),
    CONTENT#2213(   its first Initial packet allows it to validate the server address as),
    CONTENT#2214(   a part of successfully processing any packet.  Initial packets from),
    CONTENT#2215(   the server are protected with keys that are derived from this value),
    CONTENT#2216(   (see Section 5.2 of [QUIC-TLS]).  Alternatively, the value is echoed),
    CONTENT#2217(   by the server in Version Negotiation packets (Section 6) or included),
    CONTENT#2218(   in the Integrity Tag in Retry packets (Section 5.8 of [QUIC-TLS]).),
      BREAK#2219,
    CONTENT#2220(   Prior to validating the client address, servers MUST NOT send more),
    CONTENT#2221(   than three times as many bytes as the number of bytes they have),
    CONTENT#2222(   received.  This limits the magnitude of any amplification attack that),
    CONTENT#2223(   can be mounted using spoofed source addresses.  For the purposes of),
    CONTENT#2224(   avoiding amplification prior to address validation, servers MUST),
    CONTENT#2225(   count all of the payload bytes received in datagrams that are),
    CONTENT#2226(   uniquely attributed to a single connection.  This includes datagrams),
    CONTENT#2227(   that contain packets that are successfully processed and datagrams),
    CONTENT#2228(   that contain packets that are all discarded.),
      BREAK#2229,
    CONTENT#2230(   Clients MUST ensure that UDP datagrams containing Initial packets),
    CONTENT#2231(   have UDP payloads of at least 1200 bytes, adding PADDING frames as),
    CONTENT#2232(   necessary.  A client that sends padded datagrams allows the server to),
    CONTENT#2233(   send more data prior to completing address validation.),
      BREAK#2234,
    CONTENT#2235(   Loss of an Initial or Handshake packet from the server can cause a),
    CONTENT#2236(   deadlock if the client does not send additional Initial or Handshake),
    CONTENT#2237(   packets.  A deadlock could occur when the server reaches its anti-),
    CONTENT#2238(   amplification limit and the client has received acknowledgments for),
    CONTENT#2239(   all the data it has sent.  In this case, when the client has no),
    CONTENT#2240(   reason to send additional packets, the server will be unable to send),
    CONTENT#2241(   more data because it has not validated the client's address.  To),
    CONTENT#2242(   prevent this deadlock, clients MUST send a packet on a Probe Timeout),
    CONTENT#2243(   (PTO); see Section 6.2 of [QUIC-RECOVERY].  Specifically, the client),
    CONTENT#2244(   MUST send an Initial packet in a UDP datagram that contains at least),
    CONTENT#2245(   1200 bytes if it does not have Handshake keys, and otherwise send a),
    CONTENT#2246(   Handshake packet.),
      BREAK#2247,
    CONTENT#2248(   A server might wish to validate the client address before starting),
    CONTENT#2249(   the cryptographic handshake.  QUIC uses a token in the Initial packet),
    CONTENT#2250(   to provide address validation prior to completing the handshake.),
    CONTENT#2251(   This token is delivered to the client during connection establishment),
    CONTENT#2252(   with a Retry packet (see Section 8.1.2) or in a previous connection),
    CONTENT#2253(   using the NEW_TOKEN frame (see Section 8.1.3).),
      BREAK#2254,
    CONTENT#2255(   In addition to sending limits imposed prior to address validation,),
    CONTENT#2256(   servers are also constrained in what they can send by the limits set),
    CONTENT#2257(   by the congestion controller.  Clients are only constrained by the),
    CONTENT#2258(   congestion controller.),
      BREAK#2259,
    SECTION#2260(id=8.1.1, title=Token Construction),
      BREAK#2261,
    CONTENT#2262(   A token sent in a NEW_TOKEN frame or a Retry packet MUST be),
    CONTENT#2263(   constructed in a way that allows the server to identify how it was),
    CONTENT#2264(   provided to a client.  These tokens are carried in the same field but),
    CONTENT#2265(   require different handling from servers.),
      BREAK#2266,
    SECTION#2267(id=8.1.2, title=Address Validation Using Retry Packets),
      BREAK#2268,
    CONTENT#2269(   Upon receiving the client's Initial packet, the server can request),
    CONTENT#2270(   address validation by sending a Retry packet (Section 17.2.5)),
    CONTENT#2271(   containing a token.  This token MUST be repeated by the client in all),
    CONTENT#2272(   Initial packets it sends for that connection after it receives the),
    CONTENT#2273(   Retry packet.),
      BREAK#2274,
    CONTENT#2275(   In response to processing an Initial packet containing a token that),
    CONTENT#2276(   was provided in a Retry packet, a server cannot send another Retry),
    CONTENT#2277(   packet; it can only refuse the connection or permit it to proceed.),
      BREAK#2278,
    CONTENT#2279(   As long as it is not possible for an attacker to generate a valid),
    CONTENT#2280(   token for its own address (see Section 8.1.4) and the client is able),
    CONTENT#2281(   to return that token, it proves to the server that it received the),
    CONTENT#2282(   token.),
      BREAK#2283,
    CONTENT#2284(   A server can also use a Retry packet to defer the state and),
    CONTENT#2285(   processing costs of connection establishment.  Requiring the server),
    CONTENT#2286(   to provide a different connection ID, along with the),
    CONTENT#2287(   original_destination_connection_id transport parameter defined in),
    CONTENT#2288(   Section 18.2, forces the server to demonstrate that it, or an entity),
    CONTENT#2289(   it cooperates with, received the original Initial packet from the),
    CONTENT#2290(   client.  Providing a different connection ID also grants a server),
    CONTENT#2291(   some control over how subsequent packets are routed.  This can be),
    CONTENT#2292(   used to direct connections to a different server instance.),
      BREAK#2293,
    CONTENT#2294(   If a server receives a client Initial that contains an invalid Retry),
    CONTENT#2295(   token but is otherwise valid, it knows the client will not accept),
    CONTENT#2296(   another Retry token.  The server can discard such a packet and allow),
    CONTENT#2297(   the client to time out to detect handshake failure, but that could),
    CONTENT#2298(   impose a significant latency penalty on the client.  Instead, the),
    CONTENT#2299(   server SHOULD immediately close (Section 10.2) the connection with an),
    CONTENT#2300(   INVALID_TOKEN error.  Note that a server has not established any),
    CONTENT#2301(   state for the connection at this point and so does not enter the),
    CONTENT#2302(   closing period.),
      BREAK#2303,
    CONTENT#2304(   A flow showing the use of a Retry packet is shown in Figure 9.),
      BREAK#2305,
    CONTENT#2306(   Client                                                  Server),
      BREAK#2307,
    CONTENT#2308(   Initial[0]: CRYPTO[CH] ->),
      BREAK#2309,
    CONTENT#2310(                                                   <- Retry+Token),
      BREAK#2311,
    CONTENT#2312(   Initial+Token[1]: CRYPTO[CH] ->),
      BREAK#2313,
    CONTENT#2314(                                    Initial[0]: CRYPTO[SH] ACK[1]),
    CONTENT#2315(                          Handshake[0]: CRYPTO[EE, CERT, CV, FIN]),
    CONTENT#2316(                                    <- 1-RTT[0]: STREAM[1, "..."]),
      BREAK#2317,
    CONTENT#2318(                   Figure 9: Example Handshake with Retry),
      BREAK#2319,
    SECTION#2320(id=8.1.3, title=Address Validation for Future Connections),
      BREAK#2321,
    CONTENT#2322(   A server MAY provide clients with an address validation token during),
    CONTENT#2323(   one connection that can be used on a subsequent connection.  Address),
    CONTENT#2324(   validation is especially important with 0-RTT because a server),
    CONTENT#2325(   potentially sends a significant amount of data to a client in),
    CONTENT#2326(   response to 0-RTT data.),
      BREAK#2327,
    CONTENT#2328(   The server uses the NEW_TOKEN frame (Section 19.7) to provide the),
    CONTENT#2329(   client with an address validation token that can be used to validate),
    CONTENT#2330(   future connections.  In a future connection, the client includes this),
    CONTENT#2331(   token in Initial packets to provide address validation.  The client),
    CONTENT#2332(   MUST include the token in all Initial packets it sends, unless a),
    CONTENT#2333(   Retry replaces the token with a newer one.  The client MUST NOT use),
    CONTENT#2334(   the token provided in a Retry for future connections.  Servers MAY),
    CONTENT#2335(   discard any Initial packet that does not carry the expected token.),
      BREAK#2336,
    CONTENT#2337(   Unlike the token that is created for a Retry packet, which is used),
    CONTENT#2338(   immediately, the token sent in the NEW_TOKEN frame can be used after),
    CONTENT#2339(   some period of time has passed.  Thus, a token SHOULD have an),
    CONTENT#2340(   expiration time, which could be either an explicit expiration time or),
    CONTENT#2341(   an issued timestamp that can be used to dynamically calculate the),
    CONTENT#2342(   expiration time.  A server can store the expiration time or include),
    CONTENT#2343(   it in an encrypted form in the token.),
      BREAK#2344,
    CONTENT#2345(   A token issued with NEW_TOKEN MUST NOT include information that would),
    CONTENT#2346(   allow values to be linked by an observer to the connection on which),
    CONTENT#2347(   it was issued.  For example, it cannot include the previous),
    CONTENT#2348(   connection ID or addressing information, unless the values are),
    CONTENT#2349(   encrypted.  A server MUST ensure that every NEW_TOKEN frame it sends),
    CONTENT#2350(   is unique across all clients, with the exception of those sent to),
    CONTENT#2351(   repair losses of previously sent NEW_TOKEN frames.  Information that),
    CONTENT#2352(   allows the server to distinguish between tokens from Retry and),
    CONTENT#2353(   NEW_TOKEN MAY be accessible to entities other than the server.),
      BREAK#2354,
    CONTENT#2355(   It is unlikely that the client port number is the same on two),
    CONTENT#2356(   different connections; validating the port is therefore unlikely to),
    CONTENT#2357(   be successful.),
      BREAK#2358,
    CONTENT#2359(   A token received in a NEW_TOKEN frame is applicable to any server),
    CONTENT#2360(   that the connection is considered authoritative for (e.g., server),
    CONTENT#2361(   names included in the certificate).  When connecting to a server for),
    CONTENT#2362(   which the client retains an applicable and unused token, it SHOULD),
    CONTENT#2363(   include that token in the Token field of its Initial packet.),
    CONTENT#2364(   Including a token might allow the server to validate the client),
    CONTENT#2365(   address without an additional round trip.  A client MUST NOT include),
    CONTENT#2366(   a token that is not applicable to the server that it is connecting),
    CONTENT#2367(   to, unless the client has the knowledge that the server that issued),
    CONTENT#2368(   the token and the server the client is connecting to are jointly),
    CONTENT#2369(   managing the tokens.  A client MAY use a token from any previous),
    CONTENT#2370(   connection to that server.),
      BREAK#2371,
    CONTENT#2372(   A token allows a server to correlate activity between the connection),
    CONTENT#2373(   where the token was issued and any connection where it is used.),
    CONTENT#2374(   Clients that want to break continuity of identity with a server can),
    CONTENT#2375(   discard tokens provided using the NEW_TOKEN frame.  In comparison, a),
    CONTENT#2376(   token obtained in a Retry packet MUST be used immediately during the),
    CONTENT#2377(   connection attempt and cannot be used in subsequent connection),
    CONTENT#2378(   attempts.),
      BREAK#2379,
    CONTENT#2380(   A client SHOULD NOT reuse a token from a NEW_TOKEN frame for),
    CONTENT#2381(   different connection attempts.  Reusing a token allows connections to),
    CONTENT#2382(   be linked by entities on the network path; see Section 9.5.),
      BREAK#2383,
    CONTENT#2384(   Clients might receive multiple tokens on a single connection.  Aside),
    CONTENT#2385(   from preventing linkability, any token can be used in any connection),
    CONTENT#2386(   attempt.  Servers can send additional tokens to either enable address),
    CONTENT#2387(   validation for multiple connection attempts or replace older tokens),
    CONTENT#2388(   that might become invalid.  For a client, this ambiguity means that),
    CONTENT#2389(   sending the most recent unused token is most likely to be effective.),
    CONTENT#2390(   Though saving and using older tokens have no negative consequences,),
    CONTENT#2391(   clients can regard older tokens as being less likely to be useful to),
    CONTENT#2392(   the server for address validation.),
      BREAK#2393,
    CONTENT#2394(   When a server receives an Initial packet with an address validation),
    CONTENT#2395(   token, it MUST attempt to validate the token, unless it has already),
    CONTENT#2396(   completed address validation.  If the token is invalid, then the),
    CONTENT#2397(   server SHOULD proceed as if the client did not have a validated),
    CONTENT#2398(   address, including potentially sending a Retry packet.  Tokens),
    CONTENT#2399(   provided with NEW_TOKEN frames and Retry packets can be distinguished),
    CONTENT#2400(   by servers (see Section 8.1.1), and the latter can be validated more),
    CONTENT#2401(   strictly.  If the validation succeeds, the server SHOULD then allow),
    CONTENT#2402(   the handshake to proceed.),
      BREAK#2403,
    CONTENT#2404(      |  Note: The rationale for treating the client as unvalidated),
    CONTENT#2405(      |  rather than discarding the packet is that the client might have),
    CONTENT#2406(      |  received the token in a previous connection using the NEW_TOKEN),
    CONTENT#2407(      |  frame, and if the server has lost state, it might be unable to),
    CONTENT#2408(      |  validate the token at all, leading to connection failure if the),
    CONTENT#2409(      |  packet is discarded.),
      BREAK#2410,
    CONTENT#2411(   In a stateless design, a server can use encrypted and authenticated),
    CONTENT#2412(   tokens to pass information to clients that the server can later),
    CONTENT#2413(   recover and use to validate a client address.  Tokens are not),
    CONTENT#2414(   integrated into the cryptographic handshake, and so they are not),
    CONTENT#2415(   authenticated.  For instance, a client might be able to reuse a),
    CONTENT#2416(   token.  To avoid attacks that exploit this property, a server can),
    CONTENT#2417(   limit its use of tokens to only the information needed to validate),
    CONTENT#2418(   client addresses.),
      BREAK#2419,
    CONTENT#2420(   Clients MAY use tokens obtained on one connection for any connection),
    CONTENT#2421(   attempt using the same version.  When selecting a token to use,),
    CONTENT#2422(   clients do not need to consider other properties of the connection),
    CONTENT#2423(   that is being attempted, including the choice of possible application),
    CONTENT#2424(   protocols, session tickets, or other connection properties.),
      BREAK#2425,
    SECTION#2426(id=8.1.4, title=Address Validation Token Integrity),
      BREAK#2427,
    CONTENT#2428(   An address validation token MUST be difficult to guess.  Including a),
    CONTENT#2429(   random value with at least 128 bits of entropy in the token would be),
    CONTENT#2430(   sufficient, but this depends on the server remembering the value it),
    CONTENT#2431(   sends to clients.),
      BREAK#2432,
    CONTENT#2433(   A token-based scheme allows the server to offload any state),
    CONTENT#2434(   associated with validation to the client.  For this design to work,),
    CONTENT#2435(   the token MUST be covered by integrity protection against),
    CONTENT#2436(   modification or falsification by clients.  Without integrity),
    CONTENT#2437(   protection, malicious clients could generate or guess values for),
    CONTENT#2438(   tokens that would be accepted by the server.  Only the server),
    CONTENT#2439(   requires access to the integrity protection key for tokens.),
      BREAK#2440,
    CONTENT#2441(   There is no need for a single well-defined format for the token),
    CONTENT#2442(   because the server that generates the token also consumes it.  Tokens),
    CONTENT#2443(   sent in Retry packets SHOULD include information that allows the),
    CONTENT#2444(   server to verify that the source IP address and port in client),
    CONTENT#2445(   packets remain constant.),
      BREAK#2446,
    CONTENT#2447(   Tokens sent in NEW_TOKEN frames MUST include information that allows),
    CONTENT#2448(   the server to verify that the client IP address has not changed from),
    CONTENT#2449(   when the token was issued.  Servers can use tokens from NEW_TOKEN),
    CONTENT#2450(   frames in deciding not to send a Retry packet, even if the client),
    CONTENT#2451(   address has changed.  If the client IP address has changed, the),
    CONTENT#2452(   server MUST adhere to the anti-amplification limit; see Section 8.),
    CONTENT#2453(   Note that in the presence of NAT, this requirement might be),
    CONTENT#2454(   insufficient to protect other hosts that share the NAT from),
    CONTENT#2455(   amplification attacks.),
      BREAK#2456,
    CONTENT#2457(   Attackers could replay tokens to use servers as amplifiers in DDoS),
    CONTENT#2458(   attacks.  To protect against such attacks, servers MUST ensure that),
    CONTENT#2459(   replay of tokens is prevented or limited.  Servers SHOULD ensure that),
    CONTENT#2460(   tokens sent in Retry packets are only accepted for a short time, as),
    CONTENT#2461(   they are returned immediately by clients.  Tokens that are provided),
    CONTENT#2462(   in NEW_TOKEN frames (Section 19.7) need to be valid for longer but),
    CONTENT#2463(   SHOULD NOT be accepted multiple times.  Servers are encouraged to),
    CONTENT#2464(   allow tokens to be used only once, if possible; tokens MAY include),
    CONTENT#2465(   additional information about clients to further narrow applicability),
    CONTENT#2466(   or reuse.),
      BREAK#2467,
    SECTION#2468(id=8.2, title=Path Validation),
      BREAK#2469,
    CONTENT#2470(   Path validation is used by both peers during connection migration),
    CONTENT#2471(   (see Section 9) to verify reachability after a change of address.  In),
    CONTENT#2472(   path validation, endpoints test reachability between a specific local),
    CONTENT#2473(   address and a specific peer address, where an address is the 2-tuple),
    CONTENT#2474(   of IP address and port.),
      BREAK#2475,
    CONTENT#2476(   Path validation tests that packets sent on a path to a peer are),
    CONTENT#2477(   received by that peer.  Path validation is used to ensure that),
    CONTENT#2478(   packets received from a migrating peer do not carry a spoofed source),
    CONTENT#2479(   address.),
      BREAK#2480,
    CONTENT#2481(   Path validation does not validate that a peer can send in the return),
    CONTENT#2482(   direction.  Acknowledgments cannot be used for return path validation),
    CONTENT#2483(   because they contain insufficient entropy and might be spoofed.),
    CONTENT#2484(   Endpoints independently determine reachability on each direction of a),
    CONTENT#2485(   path, and therefore return reachability can only be established by),
    CONTENT#2486(   the peer.),
      BREAK#2487,
    CONTENT#2488(   Path validation can be used at any time by either endpoint.  For),
    CONTENT#2489(   instance, an endpoint might check that a peer is still in possession),
    CONTENT#2490(   of its address after a period of quiescence.),
      BREAK#2491,
    CONTENT#2492(   Path validation is not designed as a NAT traversal mechanism.  Though),
    CONTENT#2493(   the mechanism described here might be effective for the creation of),
    CONTENT#2494(   NAT bindings that support NAT traversal, the expectation is that one),
    CONTENT#2495(   endpoint is able to receive packets without first having sent a),
    CONTENT#2496(   packet on that path.  Effective NAT traversal needs additional),
    CONTENT#2497(   synchronization mechanisms that are not provided here.),
      BREAK#2498,
    CONTENT#2499(   An endpoint MAY include other frames with the PATH_CHALLENGE and),
    CONTENT#2500(   PATH_RESPONSE frames used for path validation.  In particular, an),
    CONTENT#2501(   endpoint can include PADDING frames with a PATH_CHALLENGE frame for),
    CONTENT#2502(   Path Maximum Transmission Unit Discovery (PMTUD); see Section 14.2.1.),
    CONTENT#2503(   An endpoint can also include its own PATH_CHALLENGE frame when),
    CONTENT#2504(   sending a PATH_RESPONSE frame.),
      BREAK#2505,
    CONTENT#2506(   An endpoint uses a new connection ID for probes sent from a new local),
    CONTENT#2507(   address; see Section 9.5.  When probing a new path, an endpoint can),
    CONTENT#2508(   ensure that its peer has an unused connection ID available for),
    CONTENT#2509(   responses.  Sending NEW_CONNECTION_ID and PATH_CHALLENGE frames in),
    CONTENT#2510(   the same packet, if the peer's active_connection_id_limit permits,),
    CONTENT#2511(   ensures that an unused connection ID will be available to the peer),
    CONTENT#2512(   when sending a response.),
      BREAK#2513,
    CONTENT#2514(   An endpoint can choose to simultaneously probe multiple paths.  The),
    CONTENT#2515(   number of simultaneous paths used for probes is limited by the number),
    CONTENT#2516(   of extra connection IDs its peer has previously supplied, since each),
    CONTENT#2517(   new local address used for a probe requires a previously unused),
    CONTENT#2518(   connection ID.),
      BREAK#2519,
    SECTION#2520(id=8.2.1, title=Initiating Path Validation),
      BREAK#2521,
    CONTENT#2522(   To initiate path validation, an endpoint sends a PATH_CHALLENGE frame),
    CONTENT#2523(   containing an unpredictable payload on the path to be validated.),
      BREAK#2524,
    CONTENT#2525(   An endpoint MAY send multiple PATH_CHALLENGE frames to guard against),
    CONTENT#2526(   packet loss.  However, an endpoint SHOULD NOT send multiple),
    CONTENT#2527(   PATH_CHALLENGE frames in a single packet.),
      BREAK#2528,
    CONTENT#2529(   An endpoint SHOULD NOT probe a new path with packets containing a),
    CONTENT#2530(   PATH_CHALLENGE frame more frequently than it would send an Initial),
    CONTENT#2531(   packet.  This ensures that connection migration is no more load on a),
    CONTENT#2532(   new path than establishing a new connection.),
      BREAK#2533,
    CONTENT#2534(   The endpoint MUST use unpredictable data in every PATH_CHALLENGE),
    CONTENT#2535(   frame so that it can associate the peer's response with the),
    CONTENT#2536(   corresponding PATH_CHALLENGE.),
      BREAK#2537,
    CONTENT#2538(   An endpoint MUST expand datagrams that contain a PATH_CHALLENGE frame),
    CONTENT#2539(   to at least the smallest allowed maximum datagram size of 1200 bytes,),
    CONTENT#2540(   unless the anti-amplification limit for the path does not permit),
    CONTENT#2541(   sending a datagram of this size.  Sending UDP datagrams of this size),
    CONTENT#2542(   ensures that the network path from the endpoint to the peer can be),
    CONTENT#2543(   used for QUIC; see Section 14.),
      BREAK#2544,
    CONTENT#2545(   When an endpoint is unable to expand the datagram size to 1200 bytes),
    CONTENT#2546(   due to the anti-amplification limit, the path MTU will not be),
    CONTENT#2547(   validated.  To ensure that the path MTU is large enough, the endpoint),
    CONTENT#2548(   MUST perform a second path validation by sending a PATH_CHALLENGE),
    CONTENT#2549(   frame in a datagram of at least 1200 bytes.  This additional),
    CONTENT#2550(   validation can be performed after a PATH_RESPONSE is successfully),
    CONTENT#2551(   received or when enough bytes have been received on the path that),
    CONTENT#2552(   sending the larger datagram will not result in exceeding the anti-),
    CONTENT#2553(   amplification limit.),
      BREAK#2554,
    CONTENT#2555(   Unlike other cases where datagrams are expanded, endpoints MUST NOT),
    CONTENT#2556(   discard datagrams that appear to be too small when they contain),
    CONTENT#2557(   PATH_CHALLENGE or PATH_RESPONSE.),
      BREAK#2558,
    SECTION#2559(id=8.2.2, title=Path Validation Responses),
      BREAK#2560,
    CONTENT#2561(   On receiving a PATH_CHALLENGE frame, an endpoint MUST respond by),
    CONTENT#2562(   echoing the data contained in the PATH_CHALLENGE frame in a),
    CONTENT#2563(   PATH_RESPONSE frame.  An endpoint MUST NOT delay transmission of a),
    CONTENT#2564(   packet containing a PATH_RESPONSE frame unless constrained by),
    CONTENT#2565(   congestion control.),
      BREAK#2566,
    CONTENT#2567(   A PATH_RESPONSE frame MUST be sent on the network path where the),
    CONTENT#2568(   PATH_CHALLENGE frame was received.  This ensures that path validation),
    CONTENT#2569(   by a peer only succeeds if the path is functional in both directions.),
    CONTENT#2570(   This requirement MUST NOT be enforced by the endpoint that initiates),
    CONTENT#2571(   path validation, as that would enable an attack on migration; see),
    CONTENT#2572(   Section 9.3.3.),
      BREAK#2573,
    CONTENT#2574(   An endpoint MUST expand datagrams that contain a PATH_RESPONSE frame),
    CONTENT#2575(   to at least the smallest allowed maximum datagram size of 1200 bytes.),
    CONTENT#2576(   This verifies that the path is able to carry datagrams of this size),
    CONTENT#2577(   in both directions.  However, an endpoint MUST NOT expand the),
    CONTENT#2578(   datagram containing the PATH_RESPONSE if the resulting data exceeds),
    CONTENT#2579(   the anti-amplification limit.  This is expected to only occur if the),
    CONTENT#2580(   received PATH_CHALLENGE was not sent in an expanded datagram.),
      BREAK#2581,
    CONTENT#2582(   An endpoint MUST NOT send more than one PATH_RESPONSE frame in),
    CONTENT#2583(   response to one PATH_CHALLENGE frame; see Section 13.3.  The peer is),
    CONTENT#2584(   expected to send more PATH_CHALLENGE frames as necessary to evoke),
    CONTENT#2585(   additional PATH_RESPONSE frames.),
      BREAK#2586,
    SECTION#2587(id=8.2.3, title=Successful Path Validation),
      BREAK#2588,
    CONTENT#2589(   Path validation succeeds when a PATH_RESPONSE frame is received that),
    CONTENT#2590(   contains the data that was sent in a previous PATH_CHALLENGE frame.),
    CONTENT#2591(   A PATH_RESPONSE frame received on any network path validates the path),
    CONTENT#2592(   on which the PATH_CHALLENGE was sent.),
      BREAK#2593,
    CONTENT#2594(   If an endpoint sends a PATH_CHALLENGE frame in a datagram that is not),
    CONTENT#2595(   expanded to at least 1200 bytes and if the response to it validates),
    CONTENT#2596(   the peer address, the path is validated but not the path MTU.  As a),
    CONTENT#2597(   result, the endpoint can now send more than three times the amount of),
    CONTENT#2598(   data that has been received.  However, the endpoint MUST initiate),
    CONTENT#2599(   another path validation with an expanded datagram to verify that the),
    CONTENT#2600(   path supports the required MTU.),
      BREAK#2601,
    CONTENT#2602(   Receipt of an acknowledgment for a packet containing a PATH_CHALLENGE),
    CONTENT#2603(   frame is not adequate validation, since the acknowledgment can be),
    CONTENT#2604(   spoofed by a malicious peer.),
      BREAK#2605,
    SECTION#2606(id=8.2.4, title=Failed Path Validation),
      BREAK#2607,
    CONTENT#2608(   Path validation only fails when the endpoint attempting to validate),
    CONTENT#2609(   the path abandons its attempt to validate the path.),
      BREAK#2610,
    CONTENT#2611(   Endpoints SHOULD abandon path validation based on a timer.  When),
    CONTENT#2612(   setting this timer, implementations are cautioned that the new path),
    CONTENT#2613(   could have a longer round-trip time than the original.  A value of),
    CONTENT#2614(   three times the larger of the current PTO or the PTO for the new path),
    CONTENT#2615(   (using kInitialRtt, as defined in [QUIC-RECOVERY]) is RECOMMENDED.),
      BREAK#2616,
    CONTENT#2617(   This timeout allows for multiple PTOs to expire prior to failing path),
    CONTENT#2618(   validation, so that loss of a single PATH_CHALLENGE or PATH_RESPONSE),
    CONTENT#2619(   frame does not cause path validation failure.),
      BREAK#2620,
    CONTENT#2621(   Note that the endpoint might receive packets containing other frames),
    CONTENT#2622(   on the new path, but a PATH_RESPONSE frame with appropriate data is),
    CONTENT#2623(   required for path validation to succeed.),
      BREAK#2624,
    CONTENT#2625(   When an endpoint abandons path validation, it determines that the),
    CONTENT#2626(   path is unusable.  This does not necessarily imply a failure of the),
    CONTENT#2627(   connection -- endpoints can continue sending packets over other paths),
    CONTENT#2628(   as appropriate.  If no paths are available, an endpoint can wait for),
    CONTENT#2629(   a new path to become available or close the connection.  An endpoint),
    CONTENT#2630(   that has no valid network path to its peer MAY signal this using the),
    CONTENT#2631(   NO_VIABLE_PATH connection error, noting that this is only possible if),
    CONTENT#2632(   the network path exists but does not support the required MTU),
    CONTENT#2633(   (Section 14).),
      BREAK#2634,
    CONTENT#2635(   A path validation might be abandoned for other reasons besides),
    CONTENT#2636(   failure.  Primarily, this happens if a connection migration to a new),
    CONTENT#2637(   path is initiated while a path validation on the old path is in),
    CONTENT#2638(   progress.),
      BREAK#2639,
    SECTION#2640(id=9, title=Connection Migration),
      BREAK#2641,
    CONTENT#2642(   The use of a connection ID allows connections to survive changes to),
    CONTENT#2643(   endpoint addresses (IP address and port), such as those caused by an),
    CONTENT#2644(   endpoint migrating to a new network.  This section describes the),
    CONTENT#2645(   process by which an endpoint migrates to a new address.),
      BREAK#2646,
    CONTENT#2647(   The design of QUIC relies on endpoints retaining a stable address for),
    CONTENT#2648(   the duration of the handshake.  An endpoint MUST NOT initiate),
    CONTENT#2649(   connection migration before the handshake is confirmed, as defined in),
    CONTENT#2650(   Section 4.1.2 of [QUIC-TLS].),
      BREAK#2651,
    CONTENT#2652(   If the peer sent the disable_active_migration transport parameter, an),
    CONTENT#2653(   endpoint also MUST NOT send packets (including probing packets; see),
    CONTENT#2654(   Section 9.1) from a different local address to the address the peer),
    CONTENT#2655(   used during the handshake, unless the endpoint has acted on a),
    CONTENT#2656(   preferred_address transport parameter from the peer.  If the peer),
    CONTENT#2657(   violates this requirement, the endpoint MUST either drop the incoming),
    CONTENT#2658(   packets on that path without generating a Stateless Reset or proceed),
    CONTENT#2659(   with path validation and allow the peer to migrate.  Generating a),
    CONTENT#2660(   Stateless Reset or closing the connection would allow third parties),
    CONTENT#2661(   in the network to cause connections to close by spoofing or otherwise),
    CONTENT#2662(   manipulating observed traffic.),
      BREAK#2663,
    CONTENT#2664(   Not all changes of peer address are intentional, or active,),
    CONTENT#2665(   migrations.  The peer could experience NAT rebinding: a change of),
    CONTENT#2666(   address due to a middlebox, usually a NAT, allocating a new outgoing),
    CONTENT#2667(   port or even a new outgoing IP address for a flow.  An endpoint MUST),
    CONTENT#2668(   perform path validation (Section 8.2) if it detects any change to a),
    CONTENT#2669(   peer's address, unless it has previously validated that address.),
      BREAK#2670,
    CONTENT#2671(   When an endpoint has no validated path on which to send packets, it),
    CONTENT#2672(   MAY discard connection state.  An endpoint capable of connection),
    CONTENT#2673(   migration MAY wait for a new path to become available before),
    CONTENT#2674(   discarding connection state.),
      BREAK#2675,
    CONTENT#2676(   This document limits migration of connections to new client),
    CONTENT#2677(   addresses, except as described in Section 9.6.  Clients are),
    CONTENT#2678(   responsible for initiating all migrations.  Servers do not send non-),
    CONTENT#2679(   probing packets (see Section 9.1) toward a client address until they),
    CONTENT#2680(   see a non-probing packet from that address.  If a client receives),
    CONTENT#2681(   packets from an unknown server address, the client MUST discard these),
    CONTENT#2682(   packets.),
      BREAK#2683,
    SECTION#2684(id=9.1, title=Probing a New Path),
      BREAK#2685,
    CONTENT#2686(   An endpoint MAY probe for peer reachability from a new local address),
    CONTENT#2687(   using path validation (Section 8.2) prior to migrating the connection),
    CONTENT#2688(   to the new local address.  Failure of path validation simply means),
    CONTENT#2689(   that the new path is not usable for this connection.  Failure to),
    CONTENT#2690(   validate a path does not cause the connection to end unless there are),
    CONTENT#2691(   no valid alternative paths available.),
      BREAK#2692,
    CONTENT#2693(   PATH_CHALLENGE, PATH_RESPONSE, NEW_CONNECTION_ID, and PADDING frames),
    CONTENT#2694(   are "probing frames", and all other frames are "non-probing frames".),
    CONTENT#2695(   A packet containing only probing frames is a "probing packet", and a),
    CONTENT#2696(   packet containing any other frame is a "non-probing packet".),
      BREAK#2697,
    SECTION#2698(id=9.2, title=Initiating Connection Migration),
      BREAK#2699,
    CONTENT#2700(   An endpoint can migrate a connection to a new local address by),
    CONTENT#2701(   sending packets containing non-probing frames from that address.),
      BREAK#2702,
    CONTENT#2703(   Each endpoint validates its peer's address during connection),
    CONTENT#2704(   establishment.  Therefore, a migrating endpoint can send to its peer),
    CONTENT#2705(   knowing that the peer is willing to receive at the peer's current),
    CONTENT#2706(   address.  Thus, an endpoint can migrate to a new local address),
    CONTENT#2707(   without first validating the peer's address.),
      BREAK#2708,
    CONTENT#2709(   To establish reachability on the new path, an endpoint initiates path),
    CONTENT#2710(   validation (Section 8.2) on the new path.  An endpoint MAY defer path),
    CONTENT#2711(   validation until after a peer sends the next non-probing frame to its),
    CONTENT#2712(   new address.),
      BREAK#2713,
    CONTENT#2714(   When migrating, the new path might not support the endpoint's current),
    CONTENT#2715(   sending rate.  Therefore, the endpoint resets its congestion),
    CONTENT#2716(   controller and RTT estimate, as described in Section 9.4.),
      BREAK#2717,
    CONTENT#2718(   The new path might not have the same ECN capability.  Therefore, the),
    CONTENT#2719(   endpoint validates ECN capability as described in Section 13.4.),
      BREAK#2720,
    SECTION#2721(id=9.3, title=Responding to Connection Migration),
      BREAK#2722,
    CONTENT#2723(   Receiving a packet from a new peer address containing a non-probing),
    CONTENT#2724(   frame indicates that the peer has migrated to that address.),
      BREAK#2725,
    CONTENT#2726(   If the recipient permits the migration, it MUST send subsequent),
    CONTENT#2727(   packets to the new peer address and MUST initiate path validation),
    CONTENT#2728(   (Section 8.2) to verify the peer's ownership of the address if),
    CONTENT#2729(   validation is not already underway.  If the recipient has no unused),
    CONTENT#2730(   connection IDs from the peer, it will not be able to send anything on),
    CONTENT#2731(   the new path until the peer provides one; see Section 9.5.),
      BREAK#2732,
    CONTENT#2733(   An endpoint only changes the address to which it sends packets in),
    CONTENT#2734(   response to the highest-numbered non-probing packet.  This ensures),
    CONTENT#2735(   that an endpoint does not send packets to an old peer address in the),
    CONTENT#2736(   case that it receives reordered packets.),
      BREAK#2737,
    CONTENT#2738(   An endpoint MAY send data to an unvalidated peer address, but it MUST),
    CONTENT#2739(   protect against potential attacks as described in Sections 9.3.1 and),
    CONTENT#2740(   9.3.2.  An endpoint MAY skip validation of a peer address if that),
    CONTENT#2741(   address has been seen recently.  In particular, if an endpoint),
    CONTENT#2742(   returns to a previously validated path after detecting some form of),
    CONTENT#2743(   spurious migration, skipping address validation and restoring loss),
    CONTENT#2744(   detection and congestion state can reduce the performance impact of),
    CONTENT#2745(   the attack.),
      BREAK#2746,
    CONTENT#2747(   After changing the address to which it sends non-probing packets, an),
    CONTENT#2748(   endpoint can abandon any path validation for other addresses.),
      BREAK#2749,
    CONTENT#2750(   Receiving a packet from a new peer address could be the result of a),
    CONTENT#2751(   NAT rebinding at the peer.),
      BREAK#2752,
    CONTENT#2753(   After verifying a new client address, the server SHOULD send new),
    CONTENT#2754(   address validation tokens (Section 8) to the client.),
      BREAK#2755,
    SECTION#2756(id=9.3.1, title=Peer Address Spoofing),
      BREAK#2757,
    CONTENT#2758(   It is possible that a peer is spoofing its source address to cause an),
    CONTENT#2759(   endpoint to send excessive amounts of data to an unwilling host.  If),
    CONTENT#2760(   the endpoint sends significantly more data than the spoofing peer,),
    CONTENT#2761(   connection migration might be used to amplify the volume of data that),
    CONTENT#2762(   an attacker can generate toward a victim.),
      BREAK#2763,
    CONTENT#2764(   As described in Section 9.3, an endpoint is required to validate a),
    CONTENT#2765(   peer's new address to confirm the peer's possession of the new),
    CONTENT#2766(   address.  Until a peer's address is deemed valid, an endpoint limits),
    CONTENT#2767(   the amount of data it sends to that address; see Section 8.  In the),
    CONTENT#2768(   absence of this limit, an endpoint risks being used for a denial-of-),
    CONTENT#2769(   service attack against an unsuspecting victim.),
      BREAK#2770,
    CONTENT#2771(   If an endpoint skips validation of a peer address as described above,),
    CONTENT#2772(   it does not need to limit its sending rate.),
      BREAK#2773,
    SECTION#2774(id=9.3.2, title=On-Path Address Spoofing),
      BREAK#2775,
    CONTENT#2776(   An on-path attacker could cause a spurious connection migration by),
    CONTENT#2777(   copying and forwarding a packet with a spoofed address such that it),
    CONTENT#2778(   arrives before the original packet.  The packet with the spoofed),
    CONTENT#2779(   address will be seen to come from a migrating connection, and the),
    CONTENT#2780(   original packet will be seen as a duplicate and dropped.  After a),
    CONTENT#2781(   spurious migration, validation of the source address will fail),
    CONTENT#2782(   because the entity at the source address does not have the necessary),
    CONTENT#2783(   cryptographic keys to read or respond to the PATH_CHALLENGE frame),
    CONTENT#2784(   that is sent to it even if it wanted to.),
      BREAK#2785,
    CONTENT#2786(   To protect the connection from failing due to such a spurious),
    CONTENT#2787(   migration, an endpoint MUST revert to using the last validated peer),
    CONTENT#2788(   address when validation of a new peer address fails.  Additionally,),
    CONTENT#2789(   receipt of packets with higher packet numbers from the legitimate),
    CONTENT#2790(   peer address will trigger another connection migration.  This will),
    CONTENT#2791(   cause the validation of the address of the spurious migration to be),
    CONTENT#2792(   abandoned, thus containing migrations initiated by the attacker),
    CONTENT#2793(   injecting a single packet.),
      BREAK#2794,
    CONTENT#2795(   If an endpoint has no state about the last validated peer address, it),
    CONTENT#2796(   MUST close the connection silently by discarding all connection),
    CONTENT#2797(   state.  This results in new packets on the connection being handled),
    CONTENT#2798(   generically.  For instance, an endpoint MAY send a Stateless Reset in),
    CONTENT#2799(   response to any further incoming packets.),
      BREAK#2800,
    SECTION#2801(id=9.3.3, title=Off-Path Packet Forwarding),
      BREAK#2802,
    CONTENT#2803(   An off-path attacker that can observe packets might forward copies of),
    CONTENT#2804(   genuine packets to endpoints.  If the copied packet arrives before),
    CONTENT#2805(   the genuine packet, this will appear as a NAT rebinding.  Any genuine),
    CONTENT#2806(   packet will be discarded as a duplicate.  If the attacker is able to),
    CONTENT#2807(   continue forwarding packets, it might be able to cause migration to a),
    CONTENT#2808(   path via the attacker.  This places the attacker on-path, giving it),
    CONTENT#2809(   the ability to observe or drop all subsequent packets.),
      BREAK#2810,
    CONTENT#2811(   This style of attack relies on the attacker using a path that has),
    CONTENT#2812(   approximately the same characteristics as the direct path between),
    CONTENT#2813(   endpoints.  The attack is more reliable if relatively few packets are),
    CONTENT#2814(   sent or if packet loss coincides with the attempted attack.),
      BREAK#2815,
    CONTENT#2816(   A non-probing packet received on the original path that increases the),
    CONTENT#2817(   maximum received packet number will cause the endpoint to move back),
    CONTENT#2818(   to that path.  Eliciting packets on this path increases the),
    CONTENT#2819(   likelihood that the attack is unsuccessful.  Therefore, mitigation of),
    CONTENT#2820(   this attack relies on triggering the exchange of packets.),
      BREAK#2821,
    CONTENT#2822(   In response to an apparent migration, endpoints MUST validate the),
    CONTENT#2823(   previously active path using a PATH_CHALLENGE frame.  This induces),
    CONTENT#2824(   the sending of new packets on that path.  If the path is no longer),
    CONTENT#2825(   viable, the validation attempt will time out and fail; if the path is),
    CONTENT#2826(   viable but no longer desired, the validation will succeed but only),
    CONTENT#2827(   results in probing packets being sent on the path.),
      BREAK#2828,
    CONTENT#2829(   An endpoint that receives a PATH_CHALLENGE on an active path SHOULD),
    CONTENT#2830(   send a non-probing packet in response.  If the non-probing packet),
    CONTENT#2831(   arrives before any copy made by an attacker, this results in the),
    CONTENT#2832(   connection being migrated back to the original path.  Any subsequent),
    CONTENT#2833(   migration to another path restarts this entire process.),
      BREAK#2834,
    CONTENT#2835(   This defense is imperfect, but this is not considered a serious),
    CONTENT#2836(   problem.  If the path via the attack is reliably faster than the),
    CONTENT#2837(   original path despite multiple attempts to use that original path, it),
    CONTENT#2838(   is not possible to distinguish between an attack and an improvement),
    CONTENT#2839(   in routing.),
      BREAK#2840,
    CONTENT#2841(   An endpoint could also use heuristics to improve detection of this),
    CONTENT#2842(   style of attack.  For instance, NAT rebinding is improbable if),
    CONTENT#2843(   packets were recently received on the old path; similarly, rebinding),
    CONTENT#2844(   is rare on IPv6 paths.  Endpoints can also look for duplicated),
    CONTENT#2845(   packets.  Conversely, a change in connection ID is more likely to),
    CONTENT#2846(   indicate an intentional migration rather than an attack.),
      BREAK#2847,
    SECTION#2848(id=9.4, title=Loss Detection and Congestion Control),
      BREAK#2849,
    CONTENT#2850(   The capacity available on the new path might not be the same as the),
    CONTENT#2851(   old path.  Packets sent on the old path MUST NOT contribute to),
    CONTENT#2852(   congestion control or RTT estimation for the new path.),
      BREAK#2853,
    CONTENT#2854(   On confirming a peer's ownership of its new address, an endpoint MUST),
    CONTENT#2855(   immediately reset the congestion controller and round-trip time),
    CONTENT#2856(   estimator for the new path to initial values (see Appendices A.3 and),
    CONTENT#2857(   B.3 of [QUIC-RECOVERY]) unless the only change in the peer's address),
    CONTENT#2858(   is its port number.  Because port-only changes are commonly the),
    CONTENT#2859(   result of NAT rebinding or other middlebox activity, the endpoint MAY),
    CONTENT#2860(   instead retain its congestion control state and round-trip estimate),
    CONTENT#2861(   in those cases instead of reverting to initial values.  In cases),
    CONTENT#2862(   where congestion control state retained from an old path is used on a),
    CONTENT#2863(   new path with substantially different characteristics, a sender could),
    CONTENT#2864(   transmit too aggressively until the congestion controller and the RTT),
    CONTENT#2865(   estimator have adapted.  Generally, implementations are advised to be),
    CONTENT#2866(   cautious when using previous values on a new path.),
      BREAK#2867,
    CONTENT#2868(   There could be apparent reordering at the receiver when an endpoint),
    CONTENT#2869(   sends data and probes from/to multiple addresses during the migration),
    CONTENT#2870(   period, since the two resulting paths could have different round-trip),
    CONTENT#2871(   times.  A receiver of packets on multiple paths will still send ACK),
    CONTENT#2872(   frames covering all received packets.),
      BREAK#2873,
    CONTENT#2874(   While multiple paths might be used during connection migration, a),
    CONTENT#2875(   single congestion control context and a single loss recovery context),
    CONTENT#2876(   (as described in [QUIC-RECOVERY]) could be adequate.  For instance,),
    CONTENT#2877(   an endpoint might delay switching to a new congestion control context),
    CONTENT#2878(   until it is confirmed that an old path is no longer needed (such as),
    CONTENT#2879(   the case described in Section 9.3.3).),
      BREAK#2880,
    CONTENT#2881(   A sender can make exceptions for probe packets so that their loss),
    CONTENT#2882(   detection is independent and does not unduly cause the congestion),
    CONTENT#2883(   controller to reduce its sending rate.  An endpoint might set a),
    CONTENT#2884(   separate timer when a PATH_CHALLENGE is sent, which is canceled if),
    CONTENT#2885(   the corresponding PATH_RESPONSE is received.  If the timer fires),
    CONTENT#2886(   before the PATH_RESPONSE is received, the endpoint might send a new),
    CONTENT#2887(   PATH_CHALLENGE and restart the timer for a longer period of time.),
    CONTENT#2888(   This timer SHOULD be set as described in Section 6.2.1 of),
    CONTENT#2889(   [QUIC-RECOVERY] and MUST NOT be more aggressive.),
      BREAK#2890,
    SECTION#2891(id=9.5, title=Privacy Implications of Connection Migration),
      BREAK#2892,
    CONTENT#2893(   Using a stable connection ID on multiple network paths would allow a),
    CONTENT#2894(   passive observer to correlate activity between those paths.  An),
    CONTENT#2895(   endpoint that moves between networks might not wish to have their),
    CONTENT#2896(   activity correlated by any entity other than their peer, so different),
    CONTENT#2897(   connection IDs are used when sending from different local addresses,),
    CONTENT#2898(   as discussed in Section 5.1.  For this to be effective, endpoints),
    CONTENT#2899(   need to ensure that connection IDs they provide cannot be linked by),
    CONTENT#2900(   any other entity.),
      BREAK#2901,
    CONTENT#2902(   At any time, endpoints MAY change the Destination Connection ID they),
    CONTENT#2903(   transmit with to a value that has not been used on another path.),
      BREAK#2904,
    CONTENT#2905(   An endpoint MUST NOT reuse a connection ID when sending from more),
    CONTENT#2906(   than one local address -- for example, when initiating connection),
    CONTENT#2907(   migration as described in Section 9.2 or when probing a new network),
    CONTENT#2908(   path as described in Section 9.1.),
      BREAK#2909,
    CONTENT#2910(   Similarly, an endpoint MUST NOT reuse a connection ID when sending to),
    CONTENT#2911(   more than one destination address.  Due to network changes outside),
    CONTENT#2912(   the control of its peer, an endpoint might receive packets from a new),
    CONTENT#2913(   source address with the same Destination Connection ID field value,),
    CONTENT#2914(   in which case it MAY continue to use the current connection ID with),
    CONTENT#2915(   the new remote address while still sending from the same local),
    CONTENT#2916(   address.),
      BREAK#2917,
    CONTENT#2918(   These requirements regarding connection ID reuse apply only to the),
    CONTENT#2919(   sending of packets, as unintentional changes in path without a change),
    CONTENT#2920(   in connection ID are possible.  For example, after a period of),
    CONTENT#2921(   network inactivity, NAT rebinding might cause packets to be sent on a),
    CONTENT#2922(   new path when the client resumes sending.  An endpoint responds to),
    CONTENT#2923(   such an event as described in Section 9.3.),
      BREAK#2924,
    CONTENT#2925(   Using different connection IDs for packets sent in both directions on),
    CONTENT#2926(   each new network path eliminates the use of the connection ID for),
    CONTENT#2927(   linking packets from the same connection across different network),
    CONTENT#2928(   paths.  Header protection ensures that packet numbers cannot be used),
    CONTENT#2929(   to correlate activity.  This does not prevent other properties of),
    CONTENT#2930(   packets, such as timing and size, from being used to correlate),
    CONTENT#2931(   activity.),
      BREAK#2932,
    CONTENT#2933(   An endpoint SHOULD NOT initiate migration with a peer that has),
    CONTENT#2934(   requested a zero-length connection ID, because traffic over the new),
    CONTENT#2935(   path might be trivially linkable to traffic over the old one.  If the),
    CONTENT#2936(   server is able to associate packets with a zero-length connection ID),
    CONTENT#2937(   to the right connection, it means that the server is using other),
    CONTENT#2938(   information to demultiplex packets.  For example, a server might),
    CONTENT#2939(   provide a unique address to every client -- for instance, using HTTP),
    CONTENT#2940(   alternative services [ALTSVC].  Information that might allow correct),
    CONTENT#2941(   routing of packets across multiple network paths will also allow),
    CONTENT#2942(   activity on those paths to be linked by entities other than the peer.),
      BREAK#2943,
    CONTENT#2944(   A client might wish to reduce linkability by switching to a new),
    CONTENT#2945(   connection ID, source UDP port, or IP address (see [RFC8981]) when),
    CONTENT#2946(   sending traffic after a period of inactivity.  Changing the address),
    CONTENT#2947(   from which it sends packets at the same time might cause the server),
    CONTENT#2948(   to detect a connection migration.  This ensures that the mechanisms),
    CONTENT#2949(   that support migration are exercised even for clients that do not),
    CONTENT#2950(   experience NAT rebindings or genuine migrations.  Changing address),
    CONTENT#2951(   can cause a peer to reset its congestion control state (see),
    CONTENT#2952(   Section 9.4), so addresses SHOULD only be changed infrequently.),
      BREAK#2953,
    CONTENT#2954(   An endpoint that exhausts available connection IDs cannot probe new),
    CONTENT#2955(   paths or initiate migration, nor can it respond to probes or attempts),
    CONTENT#2956(   by its peer to migrate.  To ensure that migration is possible and),
    CONTENT#2957(   packets sent on different paths cannot be correlated, endpoints),
    CONTENT#2958(   SHOULD provide new connection IDs before peers migrate; see),
    CONTENT#2959(   Section 5.1.1.  If a peer might have exhausted available connection),
    CONTENT#2960(   IDs, a migrating endpoint could include a NEW_CONNECTION_ID frame in),
    CONTENT#2961(   all packets sent on a new network path.),
      BREAK#2962,
    SECTION#2963(id=9.6, title=Server's Preferred Address),
      BREAK#2964,
    CONTENT#2965(   QUIC allows servers to accept connections on one IP address and),
    CONTENT#2966(   attempt to transfer these connections to a more preferred address),
    CONTENT#2967(   shortly after the handshake.  This is particularly useful when),
    CONTENT#2968(   clients initially connect to an address shared by multiple servers),
    CONTENT#2969(   but would prefer to use a unicast address to ensure connection),
    CONTENT#2970(   stability.  This section describes the protocol for migrating a),
    CONTENT#2971(   connection to a preferred server address.),
      BREAK#2972,
    CONTENT#2973(   Migrating a connection to a new server address mid-connection is not),
    CONTENT#2974(   supported by the version of QUIC specified in this document.  If a),
    CONTENT#2975(   client receives packets from a new server address when the client has),
    CONTENT#2976(   not initiated a migration to that address, the client SHOULD discard),
    CONTENT#2977(   these packets.),
      BREAK#2978,
    SECTION#2979(id=9.6.1, title=Communicating a Preferred Address),
      BREAK#2980,
    CONTENT#2981(   A server conveys a preferred address by including the),
    CONTENT#2982(   preferred_address transport parameter in the TLS handshake.),
      BREAK#2983,
    CONTENT#2984(   Servers MAY communicate a preferred address of each address family),
    CONTENT#2985(   (IPv4 and IPv6) to allow clients to pick the one most suited to their),
    CONTENT#2986(   network attachment.),
      BREAK#2987,
    CONTENT#2988(   Once the handshake is confirmed, the client SHOULD select one of the),
    CONTENT#2989(   two addresses provided by the server and initiate path validation),
    CONTENT#2990(   (see Section 8.2).  A client constructs packets using any previously),
    CONTENT#2991(   unused active connection ID, taken from either the preferred_address),
    CONTENT#2992(   transport parameter or a NEW_CONNECTION_ID frame.),
      BREAK#2993,
    CONTENT#2994(   As soon as path validation succeeds, the client SHOULD begin sending),
    CONTENT#2995(   all future packets to the new server address using the new connection),
    CONTENT#2996(   ID and discontinue use of the old server address.  If path validation),
    CONTENT#2997(   fails, the client MUST continue sending all future packets to the),
    CONTENT#2998(   server's original IP address.),
      BREAK#2999,
    SECTION#3000(id=9.6.2, title=Migration to a Preferred Address),
      BREAK#3001,
    CONTENT#3002(   A client that migrates to a preferred address MUST validate the),
    CONTENT#3003(   address it chooses before migrating; see Section 21.5.3.),
      BREAK#3004,
    CONTENT#3005(   A server might receive a packet addressed to its preferred IP address),
    CONTENT#3006(   at any time after it accepts a connection.  If this packet contains a),
    CONTENT#3007(   PATH_CHALLENGE frame, the server sends a packet containing a),
    CONTENT#3008(   PATH_RESPONSE frame as per Section 8.2.  The server MUST send non-),
    CONTENT#3009(   probing packets from its original address until it receives a non-),
    CONTENT#3010(   probing packet from the client at its preferred address and until the),
    CONTENT#3011(   server has validated the new path.),
      BREAK#3012,
    CONTENT#3013(   The server MUST probe on the path toward the client from its),
    CONTENT#3014(   preferred address.  This helps to guard against spurious migration),
    CONTENT#3015(   initiated by an attacker.),
      BREAK#3016,
    CONTENT#3017(   Once the server has completed its path validation and has received a),
    CONTENT#3018(   non-probing packet with a new largest packet number on its preferred),
    CONTENT#3019(   address, the server begins sending non-probing packets to the client),
    CONTENT#3020(   exclusively from its preferred IP address.  The server SHOULD drop),
    CONTENT#3021(   newer packets for this connection that are received on the old IP),
    CONTENT#3022(   address.  The server MAY continue to process delayed packets that are),
    CONTENT#3023(   received on the old IP address.),
      BREAK#3024,
    CONTENT#3025(   The addresses that a server provides in the preferred_address),
    CONTENT#3026(   transport parameter are only valid for the connection in which they),
    CONTENT#3027(   are provided.  A client MUST NOT use these for other connections,),
    CONTENT#3028(   including connections that are resumed from the current connection.),
      BREAK#3029,
    SECTION#3030(id=9.6.3, title=Interaction of Client Migration and Preferred Address),
      BREAK#3031,
    CONTENT#3032(   A client might need to perform a connection migration before it has),
    CONTENT#3033(   migrated to the server's preferred address.  In this case, the client),
    CONTENT#3034(   SHOULD perform path validation to both the original and preferred),
    CONTENT#3035(   server address from the client's new address concurrently.),
      BREAK#3036,
    CONTENT#3037(   If path validation of the server's preferred address succeeds, the),
    CONTENT#3038(   client MUST abandon validation of the original address and migrate to),
    CONTENT#3039(   using the server's preferred address.  If path validation of the),
    CONTENT#3040(   server's preferred address fails but validation of the server's),
    CONTENT#3041(   original address succeeds, the client MAY migrate to its new address),
    CONTENT#3042(   and continue sending to the server's original address.),
      BREAK#3043,
    CONTENT#3044(   If packets received at the server's preferred address have a),
    CONTENT#3045(   different source address than observed from the client during the),
    CONTENT#3046(   handshake, the server MUST protect against potential attacks as),
    CONTENT#3047(   described in Sections 9.3.1 and 9.3.2.  In addition to intentional),
    CONTENT#3048(   simultaneous migration, this might also occur because the client's),
    CONTENT#3049(   access network used a different NAT binding for the server's),
    CONTENT#3050(   preferred address.),
      BREAK#3051,
    CONTENT#3052(   Servers SHOULD initiate path validation to the client's new address),
    CONTENT#3053(   upon receiving a probe packet from a different address; see),
    CONTENT#3054(   Section 8.),
      BREAK#3055,
    CONTENT#3056(   A client that migrates to a new address SHOULD use a preferred),
    CONTENT#3057(   address from the same address family for the server.),
      BREAK#3058,
    CONTENT#3059(   The connection ID provided in the preferred_address transport),
    CONTENT#3060(   parameter is not specific to the addresses that are provided.  This),
    CONTENT#3061(   connection ID is provided to ensure that the client has a connection),
    CONTENT#3062(   ID available for migration, but the client MAY use this connection ID),
    CONTENT#3063(   on any path.),
      BREAK#3064,
    SECTION#3065(id=9.7, title=Use of IPv6 Flow Label and Migration),
      BREAK#3066,
    CONTENT#3067(   Endpoints that send data using IPv6 SHOULD apply an IPv6 flow label),
    CONTENT#3068(   in compliance with [RFC6437], unless the local API does not allow),
    CONTENT#3069(   setting IPv6 flow labels.),
      BREAK#3070,
    CONTENT#3071(   The flow label generation MUST be designed to minimize the chances of),
    CONTENT#3072(   linkability with a previously used flow label, as a stable flow label),
    CONTENT#3073(   would enable correlating activity on multiple paths; see Section 9.5.),
      BREAK#3074,
    CONTENT#3075(   [RFC6437] suggests deriving values using a pseudorandom function to),
    CONTENT#3076(   generate flow labels.  Including the Destination Connection ID field),
    CONTENT#3077(   in addition to source and destination addresses when generating flow),
    CONTENT#3078(   labels ensures that changes are synchronized with changes in other),
    CONTENT#3079(   observable identifiers.  A cryptographic hash function that combines),
    CONTENT#3080(   these inputs with a local secret is one way this might be),
    CONTENT#3081(   implemented.),
      BREAK#3082,
    SECTION#3083(id=10, title=Connection Termination),
      BREAK#3084,
    CONTENT#3085(   An established QUIC connection can be terminated in one of three),
    CONTENT#3086(   ways:),
      BREAK#3087,
    CONTENT#3088(   *  idle timeout (Section 10.1)),
      BREAK#3089,
    CONTENT#3090(   *  immediate close (Section 10.2)),
      BREAK#3091,
    CONTENT#3092(   *  stateless reset (Section 10.3)),
      BREAK#3093,
    CONTENT#3094(   An endpoint MAY discard connection state if it does not have a),
    CONTENT#3095(   validated path on which it can send packets; see Section 8.2.),
      BREAK#3096,
    SECTION#3097(id=10.1, title=Idle Timeout),
      BREAK#3098,
    CONTENT#3099(   If a max_idle_timeout is specified by either endpoint in its),
    CONTENT#3100(   transport parameters (Section 18.2), the connection is silently),
    CONTENT#3101(   closed and its state is discarded when it remains idle for longer),
    CONTENT#3102(   than the minimum of the max_idle_timeout value advertised by both),
    CONTENT#3103(   endpoints.),
      BREAK#3104,
    CONTENT#3105(   Each endpoint advertises a max_idle_timeout, but the effective value),
    CONTENT#3106(   at an endpoint is computed as the minimum of the two advertised),
    CONTENT#3107(   values (or the sole advertised value, if only one endpoint advertises),
    CONTENT#3108(   a non-zero value).  By announcing a max_idle_timeout, an endpoint),
    CONTENT#3109(   commits to initiating an immediate close (Section 10.2) if it),
    CONTENT#3110(   abandons the connection prior to the effective value.),
      BREAK#3111,
    CONTENT#3112(   An endpoint restarts its idle timer when a packet from its peer is),
    CONTENT#3113(   received and processed successfully.  An endpoint also restarts its),
    CONTENT#3114(   idle timer when sending an ack-eliciting packet if no other ack-),
    CONTENT#3115(   eliciting packets have been sent since last receiving and processing),
    CONTENT#3116(   a packet.  Restarting this timer when sending a packet ensures that),
    CONTENT#3117(   connections are not closed after new activity is initiated.),
      BREAK#3118,
    CONTENT#3119(   To avoid excessively small idle timeout periods, endpoints MUST),
    CONTENT#3120(   increase the idle timeout period to be at least three times the),
    CONTENT#3121(   current Probe Timeout (PTO).  This allows for multiple PTOs to),
    CONTENT#3122(   expire, and therefore multiple probes to be sent and lost, prior to),
    CONTENT#3123(   idle timeout.),
      BREAK#3124,
    SECTION#3125(id=10.1.1, title=Liveness Testing),
      BREAK#3126,
    CONTENT#3127(   An endpoint that sends packets close to the effective timeout risks),
    CONTENT#3128(   having them be discarded at the peer, since the idle timeout period),
    CONTENT#3129(   might have expired at the peer before these packets arrive.),
      BREAK#3130,
    CONTENT#3131(   An endpoint can send a PING or another ack-eliciting frame to test),
    CONTENT#3132(   the connection for liveness if the peer could time out soon, such as),
    CONTENT#3133(   within a PTO; see Section 6.2 of [QUIC-RECOVERY].  This is especially),
    CONTENT#3134(   useful if any available application data cannot be safely retried.),
    CONTENT#3135(   Note that the application determines what data is safe to retry.),
      BREAK#3136,
    SECTION#3137(id=10.1.2, title=Deferring Idle Timeout),
      BREAK#3138,
    CONTENT#3139(   An endpoint might need to send ack-eliciting packets to avoid an idle),
    CONTENT#3140(   timeout if it is expecting response data but does not have or is),
    CONTENT#3141(   unable to send application data.),
      BREAK#3142,
    CONTENT#3143(   An implementation of QUIC might provide applications with an option),
    CONTENT#3144(   to defer an idle timeout.  This facility could be used when the),
    CONTENT#3145(   application wishes to avoid losing state that has been associated),
    CONTENT#3146(   with an open connection but does not expect to exchange application),
    CONTENT#3147(   data for some time.  With this option, an endpoint could send a PING),
    CONTENT#3148(   frame (Section 19.2) periodically, which will cause the peer to),
    CONTENT#3149(   restart its idle timeout period.  Sending a packet containing a PING),
    CONTENT#3150(   frame restarts the idle timeout for this endpoint also if this is the),
    CONTENT#3151(   first ack-eliciting packet sent since receiving a packet.  Sending a),
    CONTENT#3152(   PING frame causes the peer to respond with an acknowledgment, which),
    CONTENT#3153(   also restarts the idle timeout for the endpoint.),
      BREAK#3154,
    CONTENT#3155(   Application protocols that use QUIC SHOULD provide guidance on when),
    CONTENT#3156(   deferring an idle timeout is appropriate.  Unnecessary sending of),
    CONTENT#3157(   PING frames could have a detrimental effect on performance.),
      BREAK#3158,
    CONTENT#3159(   A connection will time out if no packets are sent or received for a),
    CONTENT#3160(   period longer than the time negotiated using the max_idle_timeout),
    CONTENT#3161(   transport parameter; see Section 10.  However, state in middleboxes),
    CONTENT#3162(   might time out earlier than that.  Though REQ-5 in [RFC4787]),
    CONTENT#3163(   recommends a 2-minute timeout interval, experience shows that sending),
    CONTENT#3164(   packets every 30 seconds is necessary to prevent the majority of),
    CONTENT#3165(   middleboxes from losing state for UDP flows [GATEWAY].),
      BREAK#3166,
    SECTION#3167(id=10.2, title=Immediate Close),
      BREAK#3168,
    CONTENT#3169(   An endpoint sends a CONNECTION_CLOSE frame (Section 19.19) to),
    CONTENT#3170(   terminate the connection immediately.  A CONNECTION_CLOSE frame),
    CONTENT#3171(   causes all streams to immediately become closed; open streams can be),
    CONTENT#3172(   assumed to be implicitly reset.),
      BREAK#3173,
    CONTENT#3174(   After sending a CONNECTION_CLOSE frame, an endpoint immediately),
    CONTENT#3175(   enters the closing state; see Section 10.2.1.  After receiving a),
    CONTENT#3176(   CONNECTION_CLOSE frame, endpoints enter the draining state; see),
    CONTENT#3177(   Section 10.2.2.),
      BREAK#3178,
    CONTENT#3179(   Violations of the protocol lead to an immediate close.),
      BREAK#3180,
    CONTENT#3181(   An immediate close can be used after an application protocol has),
    CONTENT#3182(   arranged to close a connection.  This might be after the application),
    CONTENT#3183(   protocol negotiates a graceful shutdown.  The application protocol),
    CONTENT#3184(   can exchange messages that are needed for both application endpoints),
    CONTENT#3185(   to agree that the connection can be closed, after which the),
    CONTENT#3186(   application requests that QUIC close the connection.  When QUIC),
    CONTENT#3187(   consequently closes the connection, a CONNECTION_CLOSE frame with an),
    CONTENT#3188(   application-supplied error code will be used to signal closure to the),
    CONTENT#3189(   peer.),
      BREAK#3190,
    CONTENT#3191(   The closing and draining connection states exist to ensure that),
    CONTENT#3192(   connections close cleanly and that delayed or reordered packets are),
    CONTENT#3193(   properly discarded.  These states SHOULD persist for at least three),
    CONTENT#3194(   times the current PTO interval as defined in [QUIC-RECOVERY].),
      BREAK#3195,
    CONTENT#3196(   Disposing of connection state prior to exiting the closing or),
    CONTENT#3197(   draining state could result in an endpoint generating a Stateless),
    CONTENT#3198(   Reset unnecessarily when it receives a late-arriving packet.),
    CONTENT#3199(   Endpoints that have some alternative means to ensure that late-),
    CONTENT#3200(   arriving packets do not induce a response, such as those that are),
    CONTENT#3201(   able to close the UDP socket, MAY end these states earlier to allow),
    CONTENT#3202(   for faster resource recovery.  Servers that retain an open socket for),
    CONTENT#3203(   accepting new connections SHOULD NOT end the closing or draining),
    CONTENT#3204(   state early.),
      BREAK#3205,
    CONTENT#3206(   Once its closing or draining state ends, an endpoint SHOULD discard),
    CONTENT#3207(   all connection state.  The endpoint MAY send a Stateless Reset in),
    CONTENT#3208(   response to any further incoming packets belonging to this),
    CONTENT#3209(   connection.),
      BREAK#3210,
    SECTION#3211(id=10.2.1, title=Closing Connection State),
      BREAK#3212,
    CONTENT#3213(   An endpoint enters the closing state after initiating an immediate),
    CONTENT#3214(   close.),
      BREAK#3215,
    CONTENT#3216(   In the closing state, an endpoint retains only enough information to),
    CONTENT#3217(   generate a packet containing a CONNECTION_CLOSE frame and to identify),
    CONTENT#3218(   packets as belonging to the connection.  An endpoint in the closing),
    CONTENT#3219(   state sends a packet containing a CONNECTION_CLOSE frame in response),
    CONTENT#3220(   to any incoming packet that it attributes to the connection.),
      BREAK#3221,
    CONTENT#3222(   An endpoint SHOULD limit the rate at which it generates packets in),
    CONTENT#3223(   the closing state.  For instance, an endpoint could wait for a),
    CONTENT#3224(   progressively increasing number of received packets or amount of time),
    CONTENT#3225(   before responding to received packets.),
      BREAK#3226,
    CONTENT#3227(   An endpoint's selected connection ID and the QUIC version are),
    CONTENT#3228(   sufficient information to identify packets for a closing connection;),
    CONTENT#3229(   the endpoint MAY discard all other connection state.  An endpoint),
    CONTENT#3230(   that is closing is not required to process any received frame.  An),
    CONTENT#3231(   endpoint MAY retain packet protection keys for incoming packets to),
    CONTENT#3232(   allow it to read and process a CONNECTION_CLOSE frame.),
      BREAK#3233,
    CONTENT#3234(   An endpoint MAY drop packet protection keys when entering the closing),
    CONTENT#3235(   state and send a packet containing a CONNECTION_CLOSE frame in),
    CONTENT#3236(   response to any UDP datagram that is received.  However, an endpoint),
    CONTENT#3237(   that discards packet protection keys cannot identify and discard),
    CONTENT#3238(   invalid packets.  To avoid being used for an amplification attack,),
    CONTENT#3239(   such endpoints MUST limit the cumulative size of packets it sends to),
    CONTENT#3240(   three times the cumulative size of the packets that are received and),
    CONTENT#3241(   attributed to the connection.  To minimize the state that an endpoint),
    CONTENT#3242(   maintains for a closing connection, endpoints MAY send the exact same),
    CONTENT#3243(   packet in response to any received packet.),
      BREAK#3244,
    CONTENT#3245(      |  Note: Allowing retransmission of a closing packet is an),
    CONTENT#3246(      |  exception to the requirement that a new packet number be used),
    CONTENT#3247(      |  for each packet; see Section 12.3.  Sending new packet numbers),
    CONTENT#3248(      |  is primarily of advantage to loss recovery and congestion),
    CONTENT#3249(      |  control, which are not expected to be relevant for a closed),
    CONTENT#3250(      |  connection.  Retransmitting the final packet requires less),
    CONTENT#3251(      |  state.),
      BREAK#3252,
    CONTENT#3253(   While in the closing state, an endpoint could receive packets from a),
    CONTENT#3254(   new source address, possibly indicating a connection migration; see),
    CONTENT#3255(   Section 9.  An endpoint in the closing state MUST either discard),
    CONTENT#3256(   packets received from an unvalidated address or limit the cumulative),
    CONTENT#3257(   size of packets it sends to an unvalidated address to three times the),
    CONTENT#3258(   size of packets it receives from that address.),
      BREAK#3259,
    CONTENT#3260(   An endpoint is not expected to handle key updates when it is closing),
    CONTENT#3261(   (Section 6 of [QUIC-TLS]).  A key update might prevent the endpoint),
    CONTENT#3262(   from moving from the closing state to the draining state, as the),
    CONTENT#3263(   endpoint will not be able to process subsequently received packets,),
    CONTENT#3264(   but it otherwise has no impact.),
      BREAK#3265,
    SECTION#3266(id=10.2.2, title=Draining Connection State),
      BREAK#3267,
    CONTENT#3268(   The draining state is entered once an endpoint receives a),
    CONTENT#3269(   CONNECTION_CLOSE frame, which indicates that its peer is closing or),
    CONTENT#3270(   draining.  While otherwise identical to the closing state, an),
    CONTENT#3271(   endpoint in the draining state MUST NOT send any packets.  Retaining),
    CONTENT#3272(   packet protection keys is unnecessary once a connection is in the),
    CONTENT#3273(   draining state.),
      BREAK#3274,
    CONTENT#3275(   An endpoint that receives a CONNECTION_CLOSE frame MAY send a single),
    CONTENT#3276(   packet containing a CONNECTION_CLOSE frame before entering the),
    CONTENT#3277(   draining state, using a NO_ERROR code if appropriate.  An endpoint),
    CONTENT#3278(   MUST NOT send further packets.  Doing so could result in a constant),
    CONTENT#3279(   exchange of CONNECTION_CLOSE frames until one of the endpoints exits),
    CONTENT#3280(   the closing state.),
      BREAK#3281,
    CONTENT#3282(   An endpoint MAY enter the draining state from the closing state if it),
    CONTENT#3283(   receives a CONNECTION_CLOSE frame, which indicates that the peer is),
    CONTENT#3284(   also closing or draining.  In this case, the draining state ends when),
    CONTENT#3285(   the closing state would have ended.  In other words, the endpoint),
    CONTENT#3286(   uses the same end time but ceases transmission of any packets on this),
    CONTENT#3287(   connection.),
      BREAK#3288,
    SECTION#3289(id=10.2.3, title=Immediate Close during the Handshake),
      BREAK#3290,
    CONTENT#3291(   When sending a CONNECTION_CLOSE frame, the goal is to ensure that the),
    CONTENT#3292(   peer will process the frame.  Generally, this means sending the frame),
    CONTENT#3293(   in a packet with the highest level of packet protection to avoid the),
    CONTENT#3294(   packet being discarded.  After the handshake is confirmed (see),
    CONTENT#3295(   Section 4.1.2 of [QUIC-TLS]), an endpoint MUST send any),
    CONTENT#3296(   CONNECTION_CLOSE frames in a 1-RTT packet.  However, prior to),
    CONTENT#3297(   confirming the handshake, it is possible that more advanced packet),
    CONTENT#3298(   protection keys are not available to the peer, so another),
    CONTENT#3299(   CONNECTION_CLOSE frame MAY be sent in a packet that uses a lower),
    CONTENT#3300(   packet protection level.  More specifically:),
      BREAK#3301,
    CONTENT#3302(   *  A client will always know whether the server has Handshake keys),
    CONTENT#3303(      (see Section 17.2.2.1), but it is possible that a server does not),
    CONTENT#3304(      know whether the client has Handshake keys.  Under these),
    CONTENT#3305(      circumstances, a server SHOULD send a CONNECTION_CLOSE frame in),
    CONTENT#3306(      both Handshake and Initial packets to ensure that at least one of),
    CONTENT#3307(      them is processable by the client.),
      BREAK#3308,
    CONTENT#3309(   *  A client that sends a CONNECTION_CLOSE frame in a 0-RTT packet),
    CONTENT#3310(      cannot be assured that the server has accepted 0-RTT.  Sending a),
    CONTENT#3311(      CONNECTION_CLOSE frame in an Initial packet makes it more likely),
    CONTENT#3312(      that the server can receive the close signal, even if the),
    CONTENT#3313(      application error code might not be received.),
      BREAK#3314,
    CONTENT#3315(   *  Prior to confirming the handshake, a peer might be unable to),
    CONTENT#3316(      process 1-RTT packets, so an endpoint SHOULD send a),
    CONTENT#3317(      CONNECTION_CLOSE frame in both Handshake and 1-RTT packets.  A),
    CONTENT#3318(      server SHOULD also send a CONNECTION_CLOSE frame in an Initial),
    CONTENT#3319(      packet.),
      BREAK#3320,
    CONTENT#3321(   Sending a CONNECTION_CLOSE of type 0x1d in an Initial or Handshake),
    CONTENT#3322(   packet could expose application state or be used to alter application),
    CONTENT#3323(   state.  A CONNECTION_CLOSE of type 0x1d MUST be replaced by a),
    CONTENT#3324(   CONNECTION_CLOSE of type 0x1c when sending the frame in Initial or),
    CONTENT#3325(   Handshake packets.  Otherwise, information about the application),
    CONTENT#3326(   state might be revealed.  Endpoints MUST clear the value of the),
    CONTENT#3327(   Reason Phrase field and SHOULD use the APPLICATION_ERROR code when),
    CONTENT#3328(   converting to a CONNECTION_CLOSE of type 0x1c.),
      BREAK#3329,
    CONTENT#3330(   CONNECTION_CLOSE frames sent in multiple packet types can be),
    CONTENT#3331(   coalesced into a single UDP datagram; see Section 12.2.),
      BREAK#3332,
    CONTENT#3333(   An endpoint can send a CONNECTION_CLOSE frame in an Initial packet.),
    CONTENT#3334(   This might be in response to unauthenticated information received in),
    CONTENT#3335(   Initial or Handshake packets.  Such an immediate close might expose),
    CONTENT#3336(   legitimate connections to a denial of service.  QUIC does not include),
    CONTENT#3337(   defensive measures for on-path attacks during the handshake; see),
    CONTENT#3338(   Section 21.2.  However, at the cost of reducing feedback about errors),
    CONTENT#3339(   for legitimate peers, some forms of denial of service can be made),
    CONTENT#3340(   more difficult for an attacker if endpoints discard illegal packets),
    CONTENT#3341(   rather than terminating a connection with CONNECTION_CLOSE.  For this),
    CONTENT#3342(   reason, endpoints MAY discard packets rather than immediately close),
    CONTENT#3343(   if errors are detected in packets that lack authentication.),
      BREAK#3344,
    CONTENT#3345(   An endpoint that has not established state, such as a server that),
    CONTENT#3346(   detects an error in an Initial packet, does not enter the closing),
    CONTENT#3347(   state.  An endpoint that has no state for the connection does not),
    CONTENT#3348(   enter a closing or draining period on sending a CONNECTION_CLOSE),
    CONTENT#3349(   frame.),
      BREAK#3350,
    SECTION#3351(id=10.3, title=Stateless Reset),
      BREAK#3352,
    CONTENT#3353(   A stateless reset is provided as an option of last resort for an),
    CONTENT#3354(   endpoint that does not have access to the state of a connection.  A),
    CONTENT#3355(   crash or outage might result in peers continuing to send data to an),
    CONTENT#3356(   endpoint that is unable to properly continue the connection.  An),
    CONTENT#3357(   endpoint MAY send a Stateless Reset in response to receiving a packet),
    CONTENT#3358(   that it cannot associate with an active connection.),
      BREAK#3359,
    CONTENT#3360(   A stateless reset is not appropriate for indicating errors in active),
    CONTENT#3361(   connections.  An endpoint that wishes to communicate a fatal),
    CONTENT#3362(   connection error MUST use a CONNECTION_CLOSE frame if it is able.),
      BREAK#3363,
    CONTENT#3364(   To support this process, an endpoint issues a stateless reset token,),
    CONTENT#3365(   which is a 16-byte value that is hard to guess.  If the peer),
    CONTENT#3366(   subsequently receives a Stateless Reset, which is a UDP datagram that),
    CONTENT#3367(   ends in that stateless reset token, the peer will immediately end the),
    CONTENT#3368(   connection.),
      BREAK#3369,
    CONTENT#3370(   A stateless reset token is specific to a connection ID.  An endpoint),
    CONTENT#3371(   issues a stateless reset token by including the value in the),
    CONTENT#3372(   Stateless Reset Token field of a NEW_CONNECTION_ID frame.  Servers),
    CONTENT#3373(   can also issue a stateless_reset_token transport parameter during the),
    CONTENT#3374(   handshake that applies to the connection ID that it selected during),
    CONTENT#3375(   the handshake.  These exchanges are protected by encryption, so only),
    CONTENT#3376(   client and server know their value.  Note that clients cannot use the),
    CONTENT#3377(   stateless_reset_token transport parameter because their transport),
    CONTENT#3378(   parameters do not have confidentiality protection.),
      BREAK#3379,
    CONTENT#3380(   Tokens are invalidated when their associated connection ID is retired),
    CONTENT#3381(   via a RETIRE_CONNECTION_ID frame (Section 19.16).),
      BREAK#3382,
    CONTENT#3383(   An endpoint that receives packets that it cannot process sends a),
    CONTENT#3384(   packet in the following layout (see Section 1.3):),
      BREAK#3385,
    CONTENT#3386(   Stateless Reset {),
    CONTENT#3387(     Fixed Bits (2) = 1,),
    CONTENT#3388(     Unpredictable Bits (38..),),
    CONTENT#3389(     Stateless Reset Token (128),),
    CONTENT#3390(   }),
      BREAK#3391,
    CONTENT#3392(                         Figure 10: Stateless Reset),
      BREAK#3393,
    CONTENT#3394(   This design ensures that a Stateless Reset is -- to the extent),
    CONTENT#3395(   possible -- indistinguishable from a regular packet with a short),
    CONTENT#3396(   header.),
      BREAK#3397,
    CONTENT#3398(   A Stateless Reset uses an entire UDP datagram, starting with the),
    CONTENT#3399(   first two bits of the packet header.  The remainder of the first byte),
    CONTENT#3400(   and an arbitrary number of bytes following it are set to values that),
    CONTENT#3401(   SHOULD be indistinguishable from random.  The last 16 bytes of the),
    CONTENT#3402(   datagram contain a stateless reset token.),
      BREAK#3403,
    CONTENT#3404(   To entities other than its intended recipient, a Stateless Reset will),
    CONTENT#3405(   appear to be a packet with a short header.  For the Stateless Reset),
    CONTENT#3406(   to appear as a valid QUIC packet, the Unpredictable Bits field needs),
    CONTENT#3407(   to include at least 38 bits of data (or 5 bytes, less the two fixed),
    CONTENT#3408(   bits).),
      BREAK#3409,
    CONTENT#3410(   The resulting minimum size of 21 bytes does not guarantee that a),
    CONTENT#3411(   Stateless Reset is difficult to distinguish from other packets if the),
    CONTENT#3412(   recipient requires the use of a connection ID.  To achieve that end,),
    CONTENT#3413(   the endpoint SHOULD ensure that all packets it sends are at least 22),
    CONTENT#3414(   bytes longer than the minimum connection ID length that it requests),
    CONTENT#3415(   the peer to include in its packets, adding PADDING frames as),
    CONTENT#3416(   necessary.  This ensures that any Stateless Reset sent by the peer is),
    CONTENT#3417(   indistinguishable from a valid packet sent to the endpoint.  An),
    CONTENT#3418(   endpoint that sends a Stateless Reset in response to a packet that is),
    CONTENT#3419(   43 bytes or shorter SHOULD send a Stateless Reset that is one byte),
    CONTENT#3420(   shorter than the packet it responds to.),
      BREAK#3421,
    CONTENT#3422(   These values assume that the stateless reset token is the same length),
    CONTENT#3423(   as the minimum expansion of the packet protection AEAD.  Additional),
    CONTENT#3424(   unpredictable bytes are necessary if the endpoint could have),
    CONTENT#3425(   negotiated a packet protection scheme with a larger minimum),
    CONTENT#3426(   expansion.),
      BREAK#3427,
    CONTENT#3428(   An endpoint MUST NOT send a Stateless Reset that is three times or),
    CONTENT#3429(   more larger than the packet it receives to avoid being used for),
    CONTENT#3430(   amplification.  Section 10.3.3 describes additional limits on),
    CONTENT#3431(   Stateless Reset size.),
      BREAK#3432,
    CONTENT#3433(   Endpoints MUST discard packets that are too small to be valid QUIC),
    CONTENT#3434(   packets.  To give an example, with the set of AEAD functions defined),
    CONTENT#3435(   in [QUIC-TLS], short header packets that are smaller than 21 bytes),
    CONTENT#3436(   are never valid.),
      BREAK#3437,
    CONTENT#3438(   Endpoints MUST send Stateless Resets formatted as a packet with a),
    CONTENT#3439(   short header.  However, endpoints MUST treat any packet ending in a),
    CONTENT#3440(   valid stateless reset token as a Stateless Reset, as other QUIC),
    CONTENT#3441(   versions might allow the use of a long header.),
      BREAK#3442,
    CONTENT#3443(   An endpoint MAY send a Stateless Reset in response to a packet with a),
    CONTENT#3444(   long header.  Sending a Stateless Reset is not effective prior to the),
    CONTENT#3445(   stateless reset token being available to a peer.  In this QUIC),
    CONTENT#3446(   version, packets with a long header are only used during connection),
    CONTENT#3447(   establishment.  Because the stateless reset token is not available),
    CONTENT#3448(   until connection establishment is complete or near completion,),
    CONTENT#3449(   ignoring an unknown packet with a long header might be as effective),
    CONTENT#3450(   as sending a Stateless Reset.),
      BREAK#3451,
    CONTENT#3452(   An endpoint cannot determine the Source Connection ID from a packet),
    CONTENT#3453(   with a short header; therefore, it cannot set the Destination),
    CONTENT#3454(   Connection ID in the Stateless Reset.  The Destination Connection ID),
    CONTENT#3455(   will therefore differ from the value used in previous packets.  A),
    CONTENT#3456(   random Destination Connection ID makes the connection ID appear to be),
    CONTENT#3457(   the result of moving to a new connection ID that was provided using a),
    CONTENT#3458(   NEW_CONNECTION_ID frame; see Section 19.15.),
      BREAK#3459,
    CONTENT#3460(   Using a randomized connection ID results in two problems:),
      BREAK#3461,
    CONTENT#3462(   *  The packet might not reach the peer.  If the Destination),
    CONTENT#3463(      Connection ID is critical for routing toward the peer, then this),
    CONTENT#3464(      packet could be incorrectly routed.  This might also trigger),
    CONTENT#3465(      another Stateless Reset in response; see Section 10.3.3.  A),
    CONTENT#3466(      Stateless Reset that is not correctly routed is an ineffective),
    CONTENT#3467(      error detection and recovery mechanism.  In this case, endpoints),
    CONTENT#3468(      will need to rely on other methods -- such as timers -- to detect),
    CONTENT#3469(      that the connection has failed.),
      BREAK#3470,
    CONTENT#3471(   *  The randomly generated connection ID can be used by entities other),
    CONTENT#3472(      than the peer to identify this as a potential Stateless Reset.  An),
    CONTENT#3473(      endpoint that occasionally uses different connection IDs might),
    CONTENT#3474(      introduce some uncertainty about this.),
      BREAK#3475,
    CONTENT#3476(   This stateless reset design is specific to QUIC version 1.  An),
    CONTENT#3477(   endpoint that supports multiple versions of QUIC needs to generate a),
    CONTENT#3478(   Stateless Reset that will be accepted by peers that support any),
    CONTENT#3479(   version that the endpoint might support (or might have supported),
    CONTENT#3480(   prior to losing state).  Designers of new versions of QUIC need to be),
    CONTENT#3481(   aware of this and either (1) reuse this design or (2) use a portion),
    CONTENT#3482(   of the packet other than the last 16 bytes for carrying data.),
      BREAK#3483,
    SECTION#3484(id=10.3.1, title=Detecting a Stateless Reset),
      BREAK#3485,
    CONTENT#3486(   An endpoint detects a potential Stateless Reset using the trailing 16),
    CONTENT#3487(   bytes of the UDP datagram.  An endpoint remembers all stateless reset),
    CONTENT#3488(   tokens associated with the connection IDs and remote addresses for),
    CONTENT#3489(   datagrams it has recently sent.  This includes Stateless Reset Token),
    CONTENT#3490(   field values from NEW_CONNECTION_ID frames and the server's transport),
    CONTENT#3491(   parameters but excludes stateless reset tokens associated with),
    CONTENT#3492(   connection IDs that are either unused or retired.  The endpoint),
    CONTENT#3493(   identifies a received datagram as a Stateless Reset by comparing the),
    CONTENT#3494(   last 16 bytes of the datagram with all stateless reset tokens),
    CONTENT#3495(   associated with the remote address on which the datagram was),
    CONTENT#3496(   received.),
      BREAK#3497,
    CONTENT#3498(   This comparison can be performed for every inbound datagram.),
    CONTENT#3499(   Endpoints MAY skip this check if any packet from a datagram is),
    CONTENT#3500(   successfully processed.  However, the comparison MUST be performed),
    CONTENT#3501(   when the first packet in an incoming datagram either cannot be),
    CONTENT#3502(   associated with a connection or cannot be decrypted.),
      BREAK#3503,
    CONTENT#3504(   An endpoint MUST NOT check for any stateless reset tokens associated),
    CONTENT#3505(   with connection IDs it has not used or for connection IDs that have),
    CONTENT#3506(   been retired.),
      BREAK#3507,
    CONTENT#3508(   When comparing a datagram to stateless reset token values, endpoints),
    CONTENT#3509(   MUST perform the comparison without leaking information about the),
    CONTENT#3510(   value of the token.  For example, performing this comparison in),
    CONTENT#3511(   constant time protects the value of individual stateless reset tokens),
    CONTENT#3512(   from information leakage through timing side channels.  Another),
    CONTENT#3513(   approach would be to store and compare the transformed values of),
    CONTENT#3514(   stateless reset tokens instead of the raw token values, where the),
    CONTENT#3515(   transformation is defined as a cryptographically secure pseudorandom),
    CONTENT#3516(   function using a secret key (e.g., block cipher, Hashed Message),
    CONTENT#3517(   Authentication Code (HMAC) [RFC2104]).  An endpoint is not expected),
    CONTENT#3518(   to protect information about whether a packet was successfully),
    CONTENT#3519(   decrypted or the number of valid stateless reset tokens.),
      BREAK#3520,
    CONTENT#3521(   If the last 16 bytes of the datagram are identical in value to a),
    CONTENT#3522(   stateless reset token, the endpoint MUST enter the draining period),
    CONTENT#3523(   and not send any further packets on this connection.),
      BREAK#3524,
    SECTION#3525(id=10.3.2, title=Calculating a Stateless Reset Token),
      BREAK#3526,
    CONTENT#3527(   The stateless reset token MUST be difficult to guess.  In order to),
    CONTENT#3528(   create a stateless reset token, an endpoint could randomly generate),
    CONTENT#3529(   [RANDOM] a secret for every connection that it creates.  However,),
    CONTENT#3530(   this presents a coordination problem when there are multiple),
    CONTENT#3531(   instances in a cluster or a storage problem for an endpoint that),
    CONTENT#3532(   might lose state.  Stateless reset specifically exists to handle the),
    CONTENT#3533(   case where state is lost, so this approach is suboptimal.),
      BREAK#3534,
    CONTENT#3535(   A single static key can be used across all connections to the same),
    CONTENT#3536(   endpoint by generating the proof using a pseudorandom function that),
    CONTENT#3537(   takes a static key and the connection ID chosen by the endpoint (see),
    CONTENT#3538(   Section 5.1) as input.  An endpoint could use HMAC [RFC2104] (for),
    CONTENT#3539(   example, HMAC(static_key, connection_id)) or the HMAC-based Key),
    CONTENT#3540(   Derivation Function (HKDF) [RFC5869] (for example, using the static),
    CONTENT#3541(   key as input keying material, with the connection ID as salt).  The),
    CONTENT#3542(   output of this function is truncated to 16 bytes to produce the),
    CONTENT#3543(   stateless reset token for that connection.),
      BREAK#3544,
    CONTENT#3545(   An endpoint that loses state can use the same method to generate a),
    CONTENT#3546(   valid stateless reset token.  The connection ID comes from the packet),
    CONTENT#3547(   that the endpoint receives.),
      BREAK#3548,
    CONTENT#3549(   This design relies on the peer always sending a connection ID in its),
    CONTENT#3550(   packets so that the endpoint can use the connection ID from a packet),
    CONTENT#3551(   to reset the connection.  An endpoint that uses this design MUST),
    CONTENT#3552(   either use the same connection ID length for all connections or),
    CONTENT#3553(   encode the length of the connection ID such that it can be recovered),
    CONTENT#3554(   without state.  In addition, it cannot provide a zero-length),
    CONTENT#3555(   connection ID.),
      BREAK#3556,
    CONTENT#3557(   Revealing the stateless reset token allows any entity to terminate),
    CONTENT#3558(   the connection, so a value can only be used once.  This method for),
    CONTENT#3559(   choosing the stateless reset token means that the combination of),
    CONTENT#3560(   connection ID and static key MUST NOT be used for another connection.),
    CONTENT#3561(   A denial-of-service attack is possible if the same connection ID is),
    CONTENT#3562(   used by instances that share a static key or if an attacker can cause),
    CONTENT#3563(   a packet to be routed to an instance that has no state but the same),
    CONTENT#3564(   static key; see Section 21.11.  A connection ID from a connection),
    CONTENT#3565(   that is reset by revealing the stateless reset token MUST NOT be),
    CONTENT#3566(   reused for new connections at nodes that share a static key.),
      BREAK#3567,
    CONTENT#3568(   The same stateless reset token MUST NOT be used for multiple),
    CONTENT#3569(   connection IDs.  Endpoints are not required to compare new values),
    CONTENT#3570(   against all previous values, but a duplicate value MAY be treated as),
    CONTENT#3571(   a connection error of type PROTOCOL_VIOLATION.),
      BREAK#3572,
    CONTENT#3573(   Note that Stateless Resets do not have any cryptographic protection.),
      BREAK#3574,
    SECTION#3575(id=10.3.3, title=Looping),
      BREAK#3576,
    CONTENT#3577(   The design of a Stateless Reset is such that without knowing the),
    CONTENT#3578(   stateless reset token it is indistinguishable from a valid packet.),
    CONTENT#3579(   For instance, if a server sends a Stateless Reset to another server,),
    CONTENT#3580(   it might receive another Stateless Reset in response, which could),
    CONTENT#3581(   lead to an infinite exchange.),
      BREAK#3582,
    CONTENT#3583(   An endpoint MUST ensure that every Stateless Reset that it sends is),
    CONTENT#3584(   smaller than the packet that triggered it, unless it maintains state),
    CONTENT#3585(   sufficient to prevent looping.  In the event of a loop, this results),
    CONTENT#3586(   in packets eventually being too small to trigger a response.),
      BREAK#3587,
    CONTENT#3588(   An endpoint can remember the number of Stateless Resets that it has),
    CONTENT#3589(   sent and stop generating new Stateless Resets once a limit is),
    CONTENT#3590(   reached.  Using separate limits for different remote addresses will),
    CONTENT#3591(   ensure that Stateless Resets can be used to close connections when),
    CONTENT#3592(   other peers or connections have exhausted limits.),
      BREAK#3593,
    CONTENT#3594(   A Stateless Reset that is smaller than 41 bytes might be identifiable),
    CONTENT#3595(   as a Stateless Reset by an observer, depending upon the length of the),
    CONTENT#3596(   peer's connection IDs.  Conversely, not sending a Stateless Reset in),
    CONTENT#3597(   response to a small packet might result in Stateless Resets not being),
    CONTENT#3598(   useful in detecting cases of broken connections where only very small),
    CONTENT#3599(   packets are sent; such failures might only be detected by other),
    CONTENT#3600(   means, such as timers.),
      BREAK#3601,
    SECTION#3602(id=11, title=Error Handling),
      BREAK#3603,
    CONTENT#3604(   An endpoint that detects an error SHOULD signal the existence of that),
    CONTENT#3605(   error to its peer.  Both transport-level and application-level errors),
    CONTENT#3606(   can affect an entire connection; see Section 11.1.  Only application-),
    CONTENT#3607(   level errors can be isolated to a single stream; see Section 11.2.),
      BREAK#3608,
    CONTENT#3609(   The most appropriate error code (Section 20) SHOULD be included in),
    CONTENT#3610(   the frame that signals the error.  Where this specification),
    CONTENT#3611(   identifies error conditions, it also identifies the error code that),
    CONTENT#3612(   is used; though these are worded as requirements, different),
    CONTENT#3613(   implementation strategies might lead to different errors being),
    CONTENT#3614(   reported.  In particular, an endpoint MAY use any applicable error),
    CONTENT#3615(   code when it detects an error condition; a generic error code (such),
    CONTENT#3616(   as PROTOCOL_VIOLATION or INTERNAL_ERROR) can always be used in place),
    CONTENT#3617(   of specific error codes.),
      BREAK#3618,
    CONTENT#3619(   A stateless reset (Section 10.3) is not suitable for any error that),
    CONTENT#3620(   can be signaled with a CONNECTION_CLOSE or RESET_STREAM frame.  A),
    CONTENT#3621(   stateless reset MUST NOT be used by an endpoint that has the state),
    CONTENT#3622(   necessary to send a frame on the connection.),
      BREAK#3623,
    SECTION#3624(id=11.1, title=Connection Errors),
      BREAK#3625,
    CONTENT#3626(   Errors that result in the connection being unusable, such as an),
    CONTENT#3627(   obvious violation of protocol semantics or corruption of state that),
    CONTENT#3628(   affects an entire connection, MUST be signaled using a),
    CONTENT#3629(   CONNECTION_CLOSE frame (Section 19.19).),
      BREAK#3630,
    CONTENT#3631(   Application-specific protocol errors are signaled using the),
    CONTENT#3632(   CONNECTION_CLOSE frame with a frame type of 0x1d.  Errors that are),
    CONTENT#3633(   specific to the transport, including all those described in this),
    CONTENT#3634(   document, are carried in the CONNECTION_CLOSE frame with a frame type),
    CONTENT#3635(   of 0x1c.),
      BREAK#3636,
    CONTENT#3637(   A CONNECTION_CLOSE frame could be sent in a packet that is lost.  An),
    CONTENT#3638(   endpoint SHOULD be prepared to retransmit a packet containing a),
    CONTENT#3639(   CONNECTION_CLOSE frame if it receives more packets on a terminated),
    CONTENT#3640(   connection.  Limiting the number of retransmissions and the time over),
    CONTENT#3641(   which this final packet is sent limits the effort expended on),
    CONTENT#3642(   terminated connections.),
      BREAK#3643,
    CONTENT#3644(   An endpoint that chooses not to retransmit packets containing a),
    CONTENT#3645(   CONNECTION_CLOSE frame risks a peer missing the first such packet.),
    CONTENT#3646(   The only mechanism available to an endpoint that continues to receive),
    CONTENT#3647(   data for a terminated connection is to attempt the stateless reset),
    CONTENT#3648(   process (Section 10.3).),
      BREAK#3649,
    CONTENT#3650(   As the AEAD for Initial packets does not provide strong),
    CONTENT#3651(   authentication, an endpoint MAY discard an invalid Initial packet.),
    CONTENT#3652(   Discarding an Initial packet is permitted even where this),
    CONTENT#3653(   specification otherwise mandates a connection error.  An endpoint can),
    CONTENT#3654(   only discard a packet if it does not process the frames in the packet),
    CONTENT#3655(   or reverts the effects of any processing.  Discarding invalid Initial),
    CONTENT#3656(   packets might be used to reduce exposure to denial of service; see),
    CONTENT#3657(   Section 21.2.),
      BREAK#3658,
    SECTION#3659(id=11.2, title=Stream Errors),
      BREAK#3660,
    CONTENT#3661(   If an application-level error affects a single stream but otherwise),
    CONTENT#3662(   leaves the connection in a recoverable state, the endpoint can send a),
    CONTENT#3663(   RESET_STREAM frame (Section 19.4) with an appropriate error code to),
    CONTENT#3664(   terminate just the affected stream.),
      BREAK#3665,
    CONTENT#3666(   Resetting a stream without the involvement of the application),
    CONTENT#3667(   protocol could cause the application protocol to enter an),
    CONTENT#3668(   unrecoverable state.  RESET_STREAM MUST only be instigated by the),
    CONTENT#3669(   application protocol that uses QUIC.),
      BREAK#3670,
    CONTENT#3671(   The semantics of the application error code carried in RESET_STREAM),
    CONTENT#3672(   are defined by the application protocol.  Only the application),
    CONTENT#3673(   protocol is able to cause a stream to be terminated.  A local),
    CONTENT#3674(   instance of the application protocol uses a direct API call, and a),
    CONTENT#3675(   remote instance uses the STOP_SENDING frame, which triggers an),
    CONTENT#3676(   automatic RESET_STREAM.),
      BREAK#3677,
    CONTENT#3678(   Application protocols SHOULD define rules for handling streams that),
    CONTENT#3679(   are prematurely canceled by either endpoint.),
      BREAK#3680,
    SECTION#3681(id=12, title=Packets and Frames),
      BREAK#3682,
    CONTENT#3683(   QUIC endpoints communicate by exchanging packets.  Packets have),
    CONTENT#3684(   confidentiality and integrity protection; see Section 12.1.  Packets),
    CONTENT#3685(   are carried in UDP datagrams; see Section 12.2.),
      BREAK#3686,
    CONTENT#3687(   This version of QUIC uses the long packet header during connection),
    CONTENT#3688(   establishment; see Section 17.2.  Packets with the long header are),
    CONTENT#3689(   Initial (Section 17.2.2), 0-RTT (Section 17.2.3), Handshake),
    CONTENT#3690(   (Section 17.2.4), and Retry (Section 17.2.5).  Version negotiation),
    CONTENT#3691(   uses a version-independent packet with a long header; see),
    CONTENT#3692(   Section 17.2.1.),
      BREAK#3693,
    CONTENT#3694(   Packets with the short header are designed for minimal overhead and),
    CONTENT#3695(   are used after a connection is established and 1-RTT keys are),
    CONTENT#3696(   available; see Section 17.3.),
      BREAK#3697,
    SECTION#3698(id=12.1, title=Protected Packets),
      BREAK#3699,
    CONTENT#3700(   QUIC packets have different levels of cryptographic protection based),
    CONTENT#3701(   on the type of packet.  Details of packet protection are found in),
    CONTENT#3702(   [QUIC-TLS]; this section includes an overview of the protections that),
    CONTENT#3703(   are provided.),
      BREAK#3704,
    CONTENT#3705(   Version Negotiation packets have no cryptographic protection; see),
    CONTENT#3706(   [QUIC-INVARIANTS].),
      BREAK#3707,
    CONTENT#3708(   Retry packets use an AEAD function [AEAD] to protect against),
    CONTENT#3709(   accidental modification.),
      BREAK#3710,
    CONTENT#3711(   Initial packets use an AEAD function, the keys for which are derived),
    CONTENT#3712(   using a value that is visible on the wire.  Initial packets therefore),
    CONTENT#3713(   do not have effective confidentiality protection.  Initial protection),
    CONTENT#3714(   exists to ensure that the sender of the packet is on the network),
    CONTENT#3715(   path.  Any entity that receives an Initial packet from a client can),
    CONTENT#3716(   recover the keys that will allow them to both read the contents of),
    CONTENT#3717(   the packet and generate Initial packets that will be successfully),
    CONTENT#3718(   authenticated at either endpoint.  The AEAD also protects Initial),
    CONTENT#3719(   packets against accidental modification.),
      BREAK#3720,
    CONTENT#3721(   All other packets are protected with keys derived from the),
    CONTENT#3722(   cryptographic handshake.  The cryptographic handshake ensures that),
    CONTENT#3723(   only the communicating endpoints receive the corresponding keys for),
    CONTENT#3724(   Handshake, 0-RTT, and 1-RTT packets.  Packets protected with 0-RTT),
    CONTENT#3725(   and 1-RTT keys have strong confidentiality and integrity protection.),
      BREAK#3726,
    CONTENT#3727(   The Packet Number field that appears in some packet types has),
    CONTENT#3728(   alternative confidentiality protection that is applied as part of),
    CONTENT#3729(   header protection; see Section 5.4 of [QUIC-TLS] for details.  The),
    CONTENT#3730(   underlying packet number increases with each packet sent in a given),
    CONTENT#3731(   packet number space; see Section 12.3 for details.),
      BREAK#3732,
    SECTION#3733(id=12.2, title=Coalescing Packets),
      BREAK#3734,
    CONTENT#3735(   Initial (Section 17.2.2), 0-RTT (Section 17.2.3), and Handshake),
    CONTENT#3736(   (Section 17.2.4) packets contain a Length field that determines the),
    CONTENT#3737(   end of the packet.  The length includes both the Packet Number and),
    CONTENT#3738(   Payload fields, both of which are confidentiality protected and),
    CONTENT#3739(   initially of unknown length.  The length of the Payload field is),
    CONTENT#3740(   learned once header protection is removed.),
      BREAK#3741,
    CONTENT#3742(   Using the Length field, a sender can coalesce multiple QUIC packets),
    CONTENT#3743(   into one UDP datagram.  This can reduce the number of UDP datagrams),
    CONTENT#3744(   needed to complete the cryptographic handshake and start sending),
    CONTENT#3745(   data.  This can also be used to construct Path Maximum Transmission),
    CONTENT#3746(   Unit (PMTU) probes; see Section 14.4.1.  Receivers MUST be able to),
    CONTENT#3747(   process coalesced packets.),
      BREAK#3748,
    CONTENT#3749(   Coalescing packets in order of increasing encryption levels (Initial,),
    CONTENT#3750(   0-RTT, Handshake, 1-RTT; see Section 4.1.4 of [QUIC-TLS]) makes it),
    CONTENT#3751(   more likely that the receiver will be able to process all the packets),
    CONTENT#3752(   in a single pass.  A packet with a short header does not include a),
    CONTENT#3753(   length, so it can only be the last packet included in a UDP datagram.),
    CONTENT#3754(   An endpoint SHOULD include multiple frames in a single packet if they),
    CONTENT#3755(   are to be sent at the same encryption level, instead of coalescing),
    CONTENT#3756(   multiple packets at the same encryption level.),
      BREAK#3757,
    CONTENT#3758(   Receivers MAY route based on the information in the first packet),
    CONTENT#3759(   contained in a UDP datagram.  Senders MUST NOT coalesce QUIC packets),
    CONTENT#3760(   with different connection IDs into a single UDP datagram.  Receivers),
    CONTENT#3761(   SHOULD ignore any subsequent packets with a different Destination),
    CONTENT#3762(   Connection ID than the first packet in the datagram.),
      BREAK#3763,
    CONTENT#3764(   Every QUIC packet that is coalesced into a single UDP datagram is),
    CONTENT#3765(   separate and complete.  The receiver of coalesced QUIC packets MUST),
    CONTENT#3766(   individually process each QUIC packet and separately acknowledge),
    CONTENT#3767(   them, as if they were received as the payload of different UDP),
    CONTENT#3768(   datagrams.  For example, if decryption fails (because the keys are),
    CONTENT#3769(   not available or for any other reason), the receiver MAY either),
    CONTENT#3770(   discard or buffer the packet for later processing and MUST attempt to),
    CONTENT#3771(   process the remaining packets.),
      BREAK#3772,
    CONTENT#3773(   Retry packets (Section 17.2.5), Version Negotiation packets),
    CONTENT#3774(   (Section 17.2.1), and packets with a short header (Section 17.3) do),
    CONTENT#3775(   not contain a Length field and so cannot be followed by other packets),
    CONTENT#3776(   in the same UDP datagram.  Note also that there is no situation where),
    CONTENT#3777(   a Retry or Version Negotiation packet is coalesced with another),
    CONTENT#3778(   packet.),
      BREAK#3779,
    SECTION#3780(id=12.3, title=Packet Numbers),
      BREAK#3781,
    CONTENT#3782(   The packet number is an integer in the range 0 to 2^62-1.  This),
    CONTENT#3783(   number is used in determining the cryptographic nonce for packet),
    CONTENT#3784(   protection.  Each endpoint maintains a separate packet number for),
    CONTENT#3785(   sending and receiving.),
      BREAK#3786,
    CONTENT#3787(   Packet numbers are limited to this range because they need to be),
    CONTENT#3788(   representable in whole in the Largest Acknowledged field of an ACK),
    CONTENT#3789(   frame (Section 19.3).  When present in a long or short header,),
    CONTENT#3790(   however, packet numbers are reduced and encoded in 1 to 4 bytes; see),
    CONTENT#3791(   Section 17.1.),
      BREAK#3792,
    CONTENT#3793(   Version Negotiation (Section 17.2.1) and Retry (Section 17.2.5)),
    CONTENT#3794(   packets do not include a packet number.),
      BREAK#3795,
    CONTENT#3796(   Packet numbers are divided into three spaces in QUIC:),
      BREAK#3797,
    CONTENT#3798(   Initial space:  All Initial packets (Section 17.2.2) are in this),
    CONTENT#3799(      space.),
      BREAK#3800,
    CONTENT#3801(   Handshake space:  All Handshake packets (Section 17.2.4) are in this),
    CONTENT#3802(      space.),
      BREAK#3803,
    CONTENT#3804(   Application data space:  All 0-RTT (Section 17.2.3) and 1-RTT),
    CONTENT#3805(      (Section 17.3.1) packets are in this space.),
      BREAK#3806,
    CONTENT#3807(   As described in [QUIC-TLS], each packet type uses different),
    CONTENT#3808(   protection keys.),
      BREAK#3809,
    CONTENT#3810(   Conceptually, a packet number space is the context in which a packet),
    CONTENT#3811(   can be processed and acknowledged.  Initial packets can only be sent),
    CONTENT#3812(   with Initial packet protection keys and acknowledged in packets that),
    CONTENT#3813(   are also Initial packets.  Similarly, Handshake packets are sent at),
    CONTENT#3814(   the Handshake encryption level and can only be acknowledged in),
    CONTENT#3815(   Handshake packets.),
      BREAK#3816,
    CONTENT#3817(   This enforces cryptographic separation between the data sent in the),
    CONTENT#3818(   different packet number spaces.  Packet numbers in each space start),
    CONTENT#3819(   at packet number 0.  Subsequent packets sent in the same packet),
    CONTENT#3820(   number space MUST increase the packet number by at least one.),
      BREAK#3821,
    CONTENT#3822(   0-RTT and 1-RTT data exist in the same packet number space to make),
    CONTENT#3823(   loss recovery algorithms easier to implement between the two packet),
    CONTENT#3824(   types.),
      BREAK#3825,
    CONTENT#3826(   A QUIC endpoint MUST NOT reuse a packet number within the same packet),
    CONTENT#3827(   number space in one connection.  If the packet number for sending),
    CONTENT#3828(   reaches 2^62-1, the sender MUST close the connection without sending),
    CONTENT#3829(   a CONNECTION_CLOSE frame or any further packets; an endpoint MAY send),
    CONTENT#3830(   a Stateless Reset (Section 10.3) in response to further packets that),
    CONTENT#3831(   it receives.),
      BREAK#3832,
    CONTENT#3833(   A receiver MUST discard a newly unprotected packet unless it is),
    CONTENT#3834(   certain that it has not processed another packet with the same packet),
    CONTENT#3835(   number from the same packet number space.  Duplicate suppression MUST),
    CONTENT#3836(   happen after removing packet protection for the reasons described in),
    CONTENT#3837(   Section 9.5 of [QUIC-TLS].),
      BREAK#3838,
    CONTENT#3839(   Endpoints that track all individual packets for the purposes of),
    CONTENT#3840(   detecting duplicates are at risk of accumulating excessive state.),
    CONTENT#3841(   The data required for detecting duplicates can be limited by),
    CONTENT#3842(   maintaining a minimum packet number below which all packets are),
    CONTENT#3843(   immediately dropped.  Any minimum needs to account for large),
    CONTENT#3844(   variations in round-trip time, which includes the possibility that a),
    CONTENT#3845(   peer might probe network paths with much larger round-trip times; see),
    CONTENT#3846(   Section 9.),
      BREAK#3847,
    CONTENT#3848(   Packet number encoding at a sender and decoding at a receiver are),
    CONTENT#3849(   described in Section 17.1.),
      BREAK#3850,
    SECTION#3851(id=12.4, title=Frames and Frame Types),
      BREAK#3852,
    CONTENT#3853(   The payload of QUIC packets, after removing packet protection,),
    CONTENT#3854(   consists of a sequence of complete frames, as shown in Figure 11.),
    CONTENT#3855(   Version Negotiation, Stateless Reset, and Retry packets do not),
    CONTENT#3856(   contain frames.),
      BREAK#3857,
    CONTENT#3858(   Packet Payload {),
    CONTENT#3859(     Frame (8..) ...,),
    CONTENT#3860(   }),
      BREAK#3861,
    CONTENT#3862(                          Figure 11: QUIC Payload),
      BREAK#3863,
    CONTENT#3864(   The payload of a packet that contains frames MUST contain at least),
    CONTENT#3865(   one frame, and MAY contain multiple frames and multiple frame types.),
    CONTENT#3866(   An endpoint MUST treat receipt of a packet containing no frames as a),
    CONTENT#3867(   connection error of type PROTOCOL_VIOLATION.  Frames always fit),
    CONTENT#3868(   within a single QUIC packet and cannot span multiple packets.),
      BREAK#3869,
    CONTENT#3870(   Each frame begins with a Frame Type, indicating its type, followed by),
    CONTENT#3871(   additional type-dependent fields:),
      BREAK#3872,
    CONTENT#3873(   Frame {),
    CONTENT#3874(     Frame Type (i),),
    CONTENT#3875(     Type-Dependent Fields (..),),
    CONTENT#3876(   }),
      BREAK#3877,
    CONTENT#3878(                      Figure 12: Generic Frame Layout),
      BREAK#3879,
    CONTENT#3880(   Table 3 lists and summarizes information about each frame type that),
    CONTENT#3881(   is defined in this specification.  A description of this summary is),
    CONTENT#3882(   included after the table.),
      BREAK#3883,
    CONTENT#3884(    +============+======================+===============+======+======+),
    CONTENT#3885(    | Type Value | Frame Type Name      | Definition    | Pkts | Spec |),
    CONTENT#3886(    +============+======================+===============+======+======+),
    CONTENT#3887(    | 0x00       | PADDING              | Section 19.1  | IH01 | NP   |),
    CONTENT#3888(    +------------+----------------------+---------------+------+------+),
    CONTENT#3889(    | 0x01       | PING                 | Section 19.2  | IH01 |      |),
    CONTENT#3890(    +------------+----------------------+---------------+------+------+),
    CONTENT#3891(    | 0x02-0x03  | ACK                  | Section 19.3  | IH_1 | NC   |),
    CONTENT#3892(    +------------+----------------------+---------------+------+------+),
    CONTENT#3893(    | 0x04       | RESET_STREAM         | Section 19.4  | __01 |      |),
    CONTENT#3894(    +------------+----------------------+---------------+------+------+),
    CONTENT#3895(    | 0x05       | STOP_SENDING         | Section 19.5  | __01 |      |),
    CONTENT#3896(    +------------+----------------------+---------------+------+------+),
    CONTENT#3897(    | 0x06       | CRYPTO               | Section 19.6  | IH_1 |      |),
    CONTENT#3898(    +------------+----------------------+---------------+------+------+),
    CONTENT#3899(    | 0x07       | NEW_TOKEN            | Section 19.7  | ___1 |      |),
    CONTENT#3900(    +------------+----------------------+---------------+------+------+),
    CONTENT#3901(    | 0x08-0x0f  | STREAM               | Section 19.8  | __01 | F    |),
    CONTENT#3902(    +------------+----------------------+---------------+------+------+),
    CONTENT#3903(    | 0x10       | MAX_DATA             | Section 19.9  | __01 |      |),
    CONTENT#3904(    +------------+----------------------+---------------+------+------+),
    CONTENT#3905(    | 0x11       | MAX_STREAM_DATA      | Section 19.10 | __01 |      |),
    CONTENT#3906(    +------------+----------------------+---------------+------+------+),
    CONTENT#3907(    | 0x12-0x13  | MAX_STREAMS          | Section 19.11 | __01 |      |),
    CONTENT#3908(    +------------+----------------------+---------------+------+------+),
    CONTENT#3909(    | 0x14       | DATA_BLOCKED         | Section 19.12 | __01 |      |),
    CONTENT#3910(    +------------+----------------------+---------------+------+------+),
    CONTENT#3911(    | 0x15       | STREAM_DATA_BLOCKED  | Section 19.13 | __01 |      |),
    CONTENT#3912(    +------------+----------------------+---------------+------+------+),
    CONTENT#3913(    | 0x16-0x17  | STREAMS_BLOCKED      | Section 19.14 | __01 |      |),
    CONTENT#3914(    +------------+----------------------+---------------+------+------+),
    CONTENT#3915(    | 0x18       | NEW_CONNECTION_ID    | Section 19.15 | __01 | P    |),
    CONTENT#3916(    +------------+----------------------+---------------+------+------+),
    CONTENT#3917(    | 0x19       | RETIRE_CONNECTION_ID | Section 19.16 | __01 |      |),
    CONTENT#3918(    +------------+----------------------+---------------+------+------+),
    CONTENT#3919(    | 0x1a       | PATH_CHALLENGE       | Section 19.17 | __01 | P    |),
    CONTENT#3920(    +------------+----------------------+---------------+------+------+),
    CONTENT#3921(    | 0x1b       | PATH_RESPONSE        | Section 19.18 | ___1 | P    |),
    CONTENT#3922(    +------------+----------------------+---------------+------+------+),
    CONTENT#3923(    | 0x1c-0x1d  | CONNECTION_CLOSE     | Section 19.19 | ih01 | N    |),
    CONTENT#3924(    +------------+----------------------+---------------+------+------+),
    CONTENT#3925(    | 0x1e       | HANDSHAKE_DONE       | Section 19.20 | ___1 |      |),
    CONTENT#3926(    +------------+----------------------+---------------+------+------+),
      BREAK#3927,
    CONTENT#3928(                            Table 3: Frame Types),
      BREAK#3929,
    CONTENT#3930(   The format and semantics of each frame type are explained in more),
    CONTENT#3931(   detail in Section 19.  The remainder of this section provides a),
    CONTENT#3932(   summary of important and general information.),
      BREAK#3933,
    CONTENT#3934(   The Frame Type in ACK, STREAM, MAX_STREAMS, STREAMS_BLOCKED, and),
    CONTENT#3935(   CONNECTION_CLOSE frames is used to carry other frame-specific flags.),
    CONTENT#3936(   For all other frames, the Frame Type field simply identifies the),
    CONTENT#3937(   frame.),
      BREAK#3938,
    CONTENT#3939(   The "Pkts" column in Table 3 lists the types of packets that each),
    CONTENT#3940(   frame type could appear in, indicated by the following characters:),
      BREAK#3941,
    CONTENT#3942(   I:   Initial (Section 17.2.2)),
      BREAK#3943,
    CONTENT#3944(   H:   Handshake (Section 17.2.4)),
      BREAK#3945,
    CONTENT#3946(   0:   0-RTT (Section 17.2.3)),
      BREAK#3947,
    CONTENT#3948(   1:   1-RTT (Section 17.3.1)),
      BREAK#3949,
    CONTENT#3950(   ih:  Only a CONNECTION_CLOSE frame of type 0x1c can appear in Initial),
    CONTENT#3951(        or Handshake packets.),
      BREAK#3952,
    CONTENT#3953(   For more details about these restrictions, see Section 12.5.  Note),
    CONTENT#3954(   that all frames can appear in 1-RTT packets.  An endpoint MUST treat),
    CONTENT#3955(   receipt of a frame in a packet type that is not permitted as a),
    CONTENT#3956(   connection error of type PROTOCOL_VIOLATION.),
      BREAK#3957,
    CONTENT#3958(   The "Spec" column in Table 3 summarizes any special rules governing),
    CONTENT#3959(   the processing or generation of the frame type, as indicated by the),
    CONTENT#3960(   following characters:),
      BREAK#3961,
    CONTENT#3962(   N:   Packets containing only frames with this marking are not ack-),
    CONTENT#3963(        eliciting; see Section 13.2.),
      BREAK#3964,
    CONTENT#3965(   C:   Packets containing only frames with this marking do not count),
    CONTENT#3966(        toward bytes in flight for congestion control purposes; see),
    CONTENT#3967(        [QUIC-RECOVERY].),
      BREAK#3968,
    CONTENT#3969(   P:   Packets containing only frames with this marking can be used to),
    CONTENT#3970(        probe new network paths during connection migration; see),
    CONTENT#3971(        Section 9.1.),
      BREAK#3972,
    CONTENT#3973(   F:   The contents of frames with this marking are flow controlled;),
    CONTENT#3974(        see Section 4.),
      BREAK#3975,
    CONTENT#3976(   The "Pkts" and "Spec" columns in Table 3 do not form part of the IANA),
    CONTENT#3977(   registry; see Section 22.4.),
      BREAK#3978,
    CONTENT#3979(   An endpoint MUST treat the receipt of a frame of unknown type as a),
    CONTENT#3980(   connection error of type FRAME_ENCODING_ERROR.),
      BREAK#3981,
    CONTENT#3982(   All frames are idempotent in this version of QUIC.  That is, a valid),
    CONTENT#3983(   frame does not cause undesirable side effects or errors when received),
    CONTENT#3984(   more than once.),
      BREAK#3985,
    CONTENT#3986(   The Frame Type field uses a variable-length integer encoding (see),
    CONTENT#3987(   Section 16), with one exception.  To ensure simple and efficient),
    CONTENT#3988(   implementations of frame parsing, a frame type MUST use the shortest),
    CONTENT#3989(   possible encoding.  For frame types defined in this document, this),
    CONTENT#3990(   means a single-byte encoding, even though it is possible to encode),
    CONTENT#3991(   these values as a two-, four-, or eight-byte variable-length integer.),
    CONTENT#3992(   For instance, though 0x4001 is a legitimate two-byte encoding for a),
    CONTENT#3993(   variable-length integer with a value of 1, PING frames are always),
    CONTENT#3994(   encoded as a single byte with the value 0x01.  This rule applies to),
    CONTENT#3995(   all current and future QUIC frame types.  An endpoint MAY treat the),
    CONTENT#3996(   receipt of a frame type that uses a longer encoding than necessary as),
    CONTENT#3997(   a connection error of type PROTOCOL_VIOLATION.),
      BREAK#3998,
    SECTION#3999(id=12.5, title=Frames and Number Spaces),
      BREAK#4000,
    CONTENT#4001(   Some frames are prohibited in different packet number spaces.  The),
    CONTENT#4002(   rules here generalize those of TLS, in that frames associated with),
    CONTENT#4003(   establishing the connection can usually appear in packets in any),
    CONTENT#4004(   packet number space, whereas those associated with transferring data),
    CONTENT#4005(   can only appear in the application data packet number space:),
      BREAK#4006,
    CONTENT#4007(   *  PADDING, PING, and CRYPTO frames MAY appear in any packet number),
    CONTENT#4008(      space.),
      BREAK#4009,
    CONTENT#4010(   *  CONNECTION_CLOSE frames signaling errors at the QUIC layer (type),
    CONTENT#4011(      0x1c) MAY appear in any packet number space.  CONNECTION_CLOSE),
    CONTENT#4012(      frames signaling application errors (type 0x1d) MUST only appear),
    CONTENT#4013(      in the application data packet number space.),
      BREAK#4014,
    CONTENT#4015(   *  ACK frames MAY appear in any packet number space but can only),
    CONTENT#4016(      acknowledge packets that appeared in that packet number space.),
    CONTENT#4017(      However, as noted below, 0-RTT packets cannot contain ACK frames.),
      BREAK#4018,
    CONTENT#4019(   *  All other frame types MUST only be sent in the application data),
    CONTENT#4020(      packet number space.),
      BREAK#4021,
    CONTENT#4022(   Note that it is not possible to send the following frames in 0-RTT),
    CONTENT#4023(   packets for various reasons: ACK, CRYPTO, HANDSHAKE_DONE, NEW_TOKEN,),
    CONTENT#4024(   PATH_RESPONSE, and RETIRE_CONNECTION_ID.  A server MAY treat receipt),
    CONTENT#4025(   of these frames in 0-RTT packets as a connection error of type),
    CONTENT#4026(   PROTOCOL_VIOLATION.),
      BREAK#4027,
    SECTION#4028(id=13, title=Packetization and Reliability),
      BREAK#4029,
    CONTENT#4030(   A sender sends one or more frames in a QUIC packet; see Section 12.4.),
      BREAK#4031,
    CONTENT#4032(   A sender can minimize per-packet bandwidth and computational costs by),
    CONTENT#4033(   including as many frames as possible in each QUIC packet.  A sender),
    CONTENT#4034(   MAY wait for a short period of time to collect multiple frames before),
    CONTENT#4035(   sending a packet that is not maximally packed, to avoid sending out),
    CONTENT#4036(   large numbers of small packets.  An implementation MAY use knowledge),
    CONTENT#4037(   about application sending behavior or heuristics to determine whether),
    CONTENT#4038(   and for how long to wait.  This waiting period is an implementation),
    CONTENT#4039(   decision, and an implementation should be careful to delay),
    CONTENT#4040(   conservatively, since any delay is likely to increase application-),
    CONTENT#4041(   visible latency.),
      BREAK#4042,
    CONTENT#4043(   Stream multiplexing is achieved by interleaving STREAM frames from),
    CONTENT#4044(   multiple streams into one or more QUIC packets.  A single QUIC packet),
    CONTENT#4045(   can include multiple STREAM frames from one or more streams.),
      BREAK#4046,
    CONTENT#4047(   One of the benefits of QUIC is avoidance of head-of-line blocking),
    CONTENT#4048(   across multiple streams.  When a packet loss occurs, only streams),
    CONTENT#4049(   with data in that packet are blocked waiting for a retransmission to),
    CONTENT#4050(   be received, while other streams can continue making progress.  Note),
    CONTENT#4051(   that when data from multiple streams is included in a single QUIC),
    CONTENT#4052(   packet, loss of that packet blocks all those streams from making),
    CONTENT#4053(   progress.  Implementations are advised to include as few streams as),
    CONTENT#4054(   necessary in outgoing packets without losing transmission efficiency),
    CONTENT#4055(   to underfilled packets.),
      BREAK#4056,
    SECTION#4057(id=13.1, title=Packet Processing),
      BREAK#4058,
    CONTENT#4059(   A packet MUST NOT be acknowledged until packet protection has been),
    CONTENT#4060(   successfully removed and all frames contained in the packet have been),
    CONTENT#4061(   processed.  For STREAM frames, this means the data has been enqueued),
    CONTENT#4062(   in preparation to be received by the application protocol, but it),
    CONTENT#4063(   does not require that data be delivered and consumed.),
      BREAK#4064,
    CONTENT#4065(   Once the packet has been fully processed, a receiver acknowledges),
    CONTENT#4066(   receipt by sending one or more ACK frames containing the packet),
    CONTENT#4067(   number of the received packet.),
      BREAK#4068,
    CONTENT#4069(   An endpoint SHOULD treat receipt of an acknowledgment for a packet it),
    CONTENT#4070(   did not send as a connection error of type PROTOCOL_VIOLATION, if it),
    CONTENT#4071(   is able to detect the condition.  For further discussion of how this),
    CONTENT#4072(   might be achieved, see Section 21.4.),
      BREAK#4073,
    SECTION#4074(id=13.2, title=Generating Acknowledgments),
      BREAK#4075,
    CONTENT#4076(   Endpoints acknowledge all packets they receive and process.  However,),
    CONTENT#4077(   only ack-eliciting packets cause an ACK frame to be sent within the),
    CONTENT#4078(   maximum ack delay.  Packets that are not ack-eliciting are only),
    CONTENT#4079(   acknowledged when an ACK frame is sent for other reasons.),
      BREAK#4080,
    CONTENT#4081(   When sending a packet for any reason, an endpoint SHOULD attempt to),
    CONTENT#4082(   include an ACK frame if one has not been sent recently.  Doing so),
    CONTENT#4083(   helps with timely loss detection at the peer.),
      BREAK#4084,
    CONTENT#4085(   In general, frequent feedback from a receiver improves loss and),
    CONTENT#4086(   congestion response, but this has to be balanced against excessive),
    CONTENT#4087(   load generated by a receiver that sends an ACK frame in response to),
    CONTENT#4088(   every ack-eliciting packet.  The guidance offered below seeks to),
    CONTENT#4089(   strike this balance.),
      BREAK#4090,
    SECTION#4091(id=13.2.1, title=Sending ACK Frames),
      BREAK#4092,
    CONTENT#4093(   Every packet SHOULD be acknowledged at least once, and ack-eliciting),
    CONTENT#4094(   packets MUST be acknowledged at least once within the maximum delay),
    CONTENT#4095(   an endpoint communicated using the max_ack_delay transport parameter;),
    CONTENT#4096(   see Section 18.2.  max_ack_delay declares an explicit contract: an),
    CONTENT#4097(   endpoint promises to never intentionally delay acknowledgments of an),
    CONTENT#4098(   ack-eliciting packet by more than the indicated value.  If it does,),
    CONTENT#4099(   any excess accrues to the RTT estimate and could result in spurious),
    CONTENT#4100(   or delayed retransmissions from the peer.  A sender uses the),
    CONTENT#4101(   receiver's max_ack_delay value in determining timeouts for timer-),
    CONTENT#4102(   based retransmission, as detailed in Section 6.2 of [QUIC-RECOVERY].),
      BREAK#4103,
    CONTENT#4104(   An endpoint MUST acknowledge all ack-eliciting Initial and Handshake),
    CONTENT#4105(   packets immediately and all ack-eliciting 0-RTT and 1-RTT packets),
    CONTENT#4106(   within its advertised max_ack_delay, with the following exception.),
    CONTENT#4107(   Prior to handshake confirmation, an endpoint might not have packet),
    CONTENT#4108(   protection keys for decrypting Handshake, 0-RTT, or 1-RTT packets),
    CONTENT#4109(   when they are received.  It might therefore buffer them and),
    CONTENT#4110(   acknowledge them when the requisite keys become available.),
      BREAK#4111,
    CONTENT#4112(   Since packets containing only ACK frames are not congestion),
    CONTENT#4113(   controlled, an endpoint MUST NOT send more than one such packet in),
    CONTENT#4114(   response to receiving an ack-eliciting packet.),
      BREAK#4115,
    CONTENT#4116(   An endpoint MUST NOT send a non-ack-eliciting packet in response to a),
    CONTENT#4117(   non-ack-eliciting packet, even if there are packet gaps that precede),
    CONTENT#4118(   the received packet.  This avoids an infinite feedback loop of),
    CONTENT#4119(   acknowledgments, which could prevent the connection from ever),
    CONTENT#4120(   becoming idle.  Non-ack-eliciting packets are eventually acknowledged),
    CONTENT#4121(   when the endpoint sends an ACK frame in response to other events.),
      BREAK#4122,
    CONTENT#4123(   An endpoint that is only sending ACK frames will not receive),
    CONTENT#4124(   acknowledgments from its peer unless those acknowledgments are),
    CONTENT#4125(   included in packets with ack-eliciting frames.  An endpoint SHOULD),
    CONTENT#4126(   send an ACK frame with other frames when there are new ack-eliciting),
    CONTENT#4127(   packets to acknowledge.  When only non-ack-eliciting packets need to),
    CONTENT#4128(   be acknowledged, an endpoint MAY choose not to send an ACK frame with),
    CONTENT#4129(   outgoing frames until an ack-eliciting packet has been received.),
      BREAK#4130,
    CONTENT#4131(   An endpoint that is only sending non-ack-eliciting packets might),
    CONTENT#4132(   choose to occasionally add an ack-eliciting frame to those packets to),
    CONTENT#4133(   ensure that it receives an acknowledgment; see Section 13.2.4.  In),
    CONTENT#4134(   that case, an endpoint MUST NOT send an ack-eliciting frame in all),
    CONTENT#4135(   packets that would otherwise be non-ack-eliciting, to avoid an),
    CONTENT#4136(   infinite feedback loop of acknowledgments.),
      BREAK#4137,
    CONTENT#4138(   In order to assist loss detection at the sender, an endpoint SHOULD),
    CONTENT#4139(   generate and send an ACK frame without delay when it receives an ack-),
    CONTENT#4140(   eliciting packet either:),
      BREAK#4141,
    CONTENT#4142(   *  when the received packet has a packet number less than another),
    CONTENT#4143(      ack-eliciting packet that has been received, or),
      BREAK#4144,
    CONTENT#4145(   *  when the packet has a packet number larger than the highest-),
    CONTENT#4146(      numbered ack-eliciting packet that has been received and there are),
    CONTENT#4147(      missing packets between that packet and this packet.),
      BREAK#4148,
    CONTENT#4149(   Similarly, packets marked with the ECN Congestion Experienced (CE)),
    CONTENT#4150(   codepoint in the IP header SHOULD be acknowledged immediately, to),
    CONTENT#4151(   reduce the peer's response time to congestion events.),
      BREAK#4152,
    CONTENT#4153(   The algorithms in [QUIC-RECOVERY] are expected to be resilient to),
    CONTENT#4154(   receivers that do not follow the guidance offered above.  However, an),
    CONTENT#4155(   implementation should only deviate from these requirements after),
    CONTENT#4156(   careful consideration of the performance implications of a change,),
    CONTENT#4157(   for connections made by the endpoint and for other users of the),
    CONTENT#4158(   network.),
      BREAK#4159,
    SECTION#4160(id=13.2.2, title=Acknowledgment Frequency),
      BREAK#4161,
    CONTENT#4162(   A receiver determines how frequently to send acknowledgments in),
    CONTENT#4163(   response to ack-eliciting packets.  This determination involves a),
    CONTENT#4164(   trade-off.),
      BREAK#4165,
    CONTENT#4166(   Endpoints rely on timely acknowledgment to detect loss; see Section 6),
    CONTENT#4167(   of [QUIC-RECOVERY].  Window-based congestion controllers, such as the),
    CONTENT#4168(   one described in Section 7 of [QUIC-RECOVERY], rely on),
    CONTENT#4169(   acknowledgments to manage their congestion window.  In both cases,),
    CONTENT#4170(   delaying acknowledgments can adversely affect performance.),
      BREAK#4171,
    CONTENT#4172(   On the other hand, reducing the frequency of packets that carry only),
    CONTENT#4173(   acknowledgments reduces packet transmission and processing cost at),
    CONTENT#4174(   both endpoints.  It can improve connection throughput on severely),
    CONTENT#4175(   asymmetric links and reduce the volume of acknowledgment traffic),
    CONTENT#4176(   using return path capacity; see Section 3 of [RFC3449].),
      BREAK#4177,
    CONTENT#4178(   A receiver SHOULD send an ACK frame after receiving at least two ack-),
    CONTENT#4179(   eliciting packets.  This recommendation is general in nature and),
    CONTENT#4180(   consistent with recommendations for TCP endpoint behavior [RFC5681].),
    CONTENT#4181(   Knowledge of network conditions, knowledge of the peer's congestion),
    CONTENT#4182(   controller, or further research and experimentation might suggest),
    CONTENT#4183(   alternative acknowledgment strategies with better performance),
    CONTENT#4184(   characteristics.),
      BREAK#4185,
    CONTENT#4186(   A receiver MAY process multiple available packets before determining),
    CONTENT#4187(   whether to send an ACK frame in response.),
      BREAK#4188,
    SECTION#4189(id=13.2.3, title=Managing ACK Ranges),
      BREAK#4190,
    CONTENT#4191(   When an ACK frame is sent, one or more ranges of acknowledged packets),
    CONTENT#4192(   are included.  Including acknowledgments for older packets reduces),
    CONTENT#4193(   the chance of spurious retransmissions caused by losing previously),
    CONTENT#4194(   sent ACK frames, at the cost of larger ACK frames.),
      BREAK#4195,
    CONTENT#4196(   ACK frames SHOULD always acknowledge the most recently received),
    CONTENT#4197(   packets, and the more out of order the packets are, the more),
    CONTENT#4198(   important it is to send an updated ACK frame quickly, to prevent the),
    CONTENT#4199(   peer from declaring a packet as lost and spuriously retransmitting),
    CONTENT#4200(   the frames it contains.  An ACK frame is expected to fit within a),
    CONTENT#4201(   single QUIC packet.  If it does not, then older ranges (those with),
    CONTENT#4202(   the smallest packet numbers) are omitted.),
      BREAK#4203,
    CONTENT#4204(   A receiver limits the number of ACK Ranges (Section 19.3.1) it),
    CONTENT#4205(   remembers and sends in ACK frames, both to limit the size of ACK),
    CONTENT#4206(   frames and to avoid resource exhaustion.  After receiving),
    CONTENT#4207(   acknowledgments for an ACK frame, the receiver SHOULD stop tracking),
    CONTENT#4208(   those acknowledged ACK Ranges.  Senders can expect acknowledgments),
    CONTENT#4209(   for most packets, but QUIC does not guarantee receipt of an),
    CONTENT#4210(   acknowledgment for every packet that the receiver processes.),
      BREAK#4211,
    CONTENT#4212(   It is possible that retaining many ACK Ranges could cause an ACK),
    CONTENT#4213(   frame to become too large.  A receiver can discard unacknowledged ACK),
    CONTENT#4214(   Ranges to limit ACK frame size, at the cost of increased),
    CONTENT#4215(   retransmissions from the sender.  This is necessary if an ACK frame),
    CONTENT#4216(   would be too large to fit in a packet.  Receivers MAY also limit ACK),
    CONTENT#4217(   frame size further to preserve space for other frames or to limit the),
    CONTENT#4218(   capacity that acknowledgments consume.),
      BREAK#4219,
    CONTENT#4220(   A receiver MUST retain an ACK Range unless it can ensure that it will),
    CONTENT#4221(   not subsequently accept packets with numbers in that range.),
    CONTENT#4222(   Maintaining a minimum packet number that increases as ranges are),
    CONTENT#4223(   discarded is one way to achieve this with minimal state.),
      BREAK#4224,
    CONTENT#4225(   Receivers can discard all ACK Ranges, but they MUST retain the),
    CONTENT#4226(   largest packet number that has been successfully processed, as that),
    CONTENT#4227(   is used to recover packet numbers from subsequent packets; see),
    CONTENT#4228(   Section 17.1.),
      BREAK#4229,
    CONTENT#4230(   A receiver SHOULD include an ACK Range containing the largest),
    CONTENT#4231(   received packet number in every ACK frame.  The Largest Acknowledged),
    CONTENT#4232(   field is used in ECN validation at a sender, and including a lower),
    CONTENT#4233(   value than what was included in a previous ACK frame could cause ECN),
    CONTENT#4234(   to be unnecessarily disabled; see Section 13.4.2.),
      BREAK#4235,
    CONTENT#4236(   Section 13.2.4 describes an exemplary approach for determining what),
    CONTENT#4237(   packets to acknowledge in each ACK frame.  Though the goal of this),
    CONTENT#4238(   algorithm is to generate an acknowledgment for every packet that is),
    CONTENT#4239(   processed, it is still possible for acknowledgments to be lost.),
      BREAK#4240,
    SECTION#4241(id=13.2.4, title=Limiting Ranges by Tracking ACK Frames),
      BREAK#4242,
    CONTENT#4243(   When a packet containing an ACK frame is sent, the Largest),
    CONTENT#4244(   Acknowledged field in that frame can be saved.  When a packet),
    CONTENT#4245(   containing an ACK frame is acknowledged, the receiver can stop),
    CONTENT#4246(   acknowledging packets less than or equal to the Largest Acknowledged),
    CONTENT#4247(   field in the sent ACK frame.),
      BREAK#4248,
    CONTENT#4249(   A receiver that sends only non-ack-eliciting packets, such as ACK),
    CONTENT#4250(   frames, might not receive an acknowledgment for a long period of),
    CONTENT#4251(   time.  This could cause the receiver to maintain state for a large),
    CONTENT#4252(   number of ACK frames for a long period of time, and ACK frames it),
    CONTENT#4253(   sends could be unnecessarily large.  In such a case, a receiver could),
    CONTENT#4254(   send a PING or other small ack-eliciting frame occasionally, such as),
    CONTENT#4255(   once per round trip, to elicit an ACK from the peer.),
      BREAK#4256,
    CONTENT#4257(   In cases without ACK frame loss, this algorithm allows for a minimum),
    CONTENT#4258(   of 1 RTT of reordering.  In cases with ACK frame loss and reordering,),
    CONTENT#4259(   this approach does not guarantee that every acknowledgment is seen by),
    CONTENT#4260(   the sender before it is no longer included in the ACK frame.  Packets),
    CONTENT#4261(   could be received out of order, and all subsequent ACK frames),
    CONTENT#4262(   containing them could be lost.  In this case, the loss recovery),
    CONTENT#4263(   algorithm could cause spurious retransmissions, but the sender will),
    CONTENT#4264(   continue making forward progress.),
      BREAK#4265,
    SECTION#4266(id=13.2.5, title=Measuring and Reporting Host Delay),
      BREAK#4267,
    CONTENT#4268(   An endpoint measures the delays intentionally introduced between the),
    CONTENT#4269(   time the packet with the largest packet number is received and the),
    CONTENT#4270(   time an acknowledgment is sent.  The endpoint encodes this),
    CONTENT#4271(   acknowledgment delay in the ACK Delay field of an ACK frame; see),
    CONTENT#4272(   Section 19.3.  This allows the receiver of the ACK frame to adjust),
    CONTENT#4273(   for any intentional delays, which is important for getting a better),
    CONTENT#4274(   estimate of the path RTT when acknowledgments are delayed.),
      BREAK#4275,
    CONTENT#4276(   A packet might be held in the OS kernel or elsewhere on the host),
    CONTENT#4277(   before being processed.  An endpoint MUST NOT include delays that it),
    CONTENT#4278(   does not control when populating the ACK Delay field in an ACK frame.),
    CONTENT#4279(   However, endpoints SHOULD include buffering delays caused by),
    CONTENT#4280(   unavailability of decryption keys, since these delays can be large),
    CONTENT#4281(   and are likely to be non-repeating.),
      BREAK#4282,
    CONTENT#4283(   When the measured acknowledgment delay is larger than its),
    CONTENT#4284(   max_ack_delay, an endpoint SHOULD report the measured delay.  This),
    CONTENT#4285(   information is especially useful during the handshake when delays),
    CONTENT#4286(   might be large; see Section 13.2.1.),
      BREAK#4287,
    SECTION#4288(id=13.2.6, title=ACK Frames and Packet Protection),
      BREAK#4289,
    CONTENT#4290(   ACK frames MUST only be carried in a packet that has the same packet),
    CONTENT#4291(   number space as the packet being acknowledged; see Section 12.1.  For),
    CONTENT#4292(   instance, packets that are protected with 1-RTT keys MUST be),
    CONTENT#4293(   acknowledged in packets that are also protected with 1-RTT keys.),
      BREAK#4294,
    CONTENT#4295(   Packets that a client sends with 0-RTT packet protection MUST be),
    CONTENT#4296(   acknowledged by the server in packets protected by 1-RTT keys.  This),
    CONTENT#4297(   can mean that the client is unable to use these acknowledgments if),
    CONTENT#4298(   the server cryptographic handshake messages are delayed or lost.),
    CONTENT#4299(   Note that the same limitation applies to other data sent by the),
    CONTENT#4300(   server protected by the 1-RTT keys.),
      BREAK#4301,
    SECTION#4302(id=13.2.7, title=PADDING Frames Consume Congestion Window),
      BREAK#4303,
    CONTENT#4304(   Packets containing PADDING frames are considered to be in flight for),
    CONTENT#4305(   congestion control purposes [QUIC-RECOVERY].  Packets containing only),
    CONTENT#4306(   PADDING frames therefore consume congestion window but do not),
    CONTENT#4307(   generate acknowledgments that will open the congestion window.  To),
    CONTENT#4308(   avoid a deadlock, a sender SHOULD ensure that other frames are sent),
    CONTENT#4309(   periodically in addition to PADDING frames to elicit acknowledgments),
    CONTENT#4310(   from the receiver.),
      BREAK#4311,
    SECTION#4312(id=13.3, title=Retransmission of Information),
      BREAK#4313,
    CONTENT#4314(   QUIC packets that are determined to be lost are not retransmitted),
    CONTENT#4315(   whole.  The same applies to the frames that are contained within lost),
    CONTENT#4316(   packets.  Instead, the information that might be carried in frames is),
    CONTENT#4317(   sent again in new frames as needed.),
      BREAK#4318,
    CONTENT#4319(   New frames and packets are used to carry information that is),
    CONTENT#4320(   determined to have been lost.  In general, information is sent again),
    CONTENT#4321(   when a packet containing that information is determined to be lost,),
    CONTENT#4322(   and sending ceases when a packet containing that information is),
    CONTENT#4323(   acknowledged.),
      BREAK#4324,
    CONTENT#4325(   *  Data sent in CRYPTO frames is retransmitted according to the rules),
    CONTENT#4326(      in [QUIC-RECOVERY], until all data has been acknowledged.  Data in),
    CONTENT#4327(      CRYPTO frames for Initial and Handshake packets is discarded when),
    CONTENT#4328(      keys for the corresponding packet number space are discarded.),
      BREAK#4329,
    CONTENT#4330(   *  Application data sent in STREAM frames is retransmitted in new),
    CONTENT#4331(      STREAM frames unless the endpoint has sent a RESET_STREAM for that),
    CONTENT#4332(      stream.  Once an endpoint sends a RESET_STREAM frame, no further),
    CONTENT#4333(      STREAM frames are needed.),
      BREAK#4334,
    CONTENT#4335(   *  ACK frames carry the most recent set of acknowledgments and the),
    CONTENT#4336(      acknowledgment delay from the largest acknowledged packet, as),
    CONTENT#4337(      described in Section 13.2.1.  Delaying the transmission of packets),
    CONTENT#4338(      containing ACK frames or resending old ACK frames can cause the),
    CONTENT#4339(      peer to generate an inflated RTT sample or unnecessarily disable),
    CONTENT#4340(      ECN.),
      BREAK#4341,
    CONTENT#4342(   *  Cancellation of stream transmission, as carried in a RESET_STREAM),
    CONTENT#4343(      frame, is sent until acknowledged or until all stream data is),
    CONTENT#4344(      acknowledged by the peer (that is, either the "Reset Recvd" or),
    CONTENT#4345(      "Data Recvd" state is reached on the sending part of the stream).),
    CONTENT#4346(      The content of a RESET_STREAM frame MUST NOT change when it is),
    CONTENT#4347(      sent again.),
      BREAK#4348,
    CONTENT#4349(   *  Similarly, a request to cancel stream transmission, as encoded in),
    CONTENT#4350(      a STOP_SENDING frame, is sent until the receiving part of the),
    CONTENT#4351(      stream enters either a "Data Recvd" or "Reset Recvd" state; see),
    CONTENT#4352(      Section 3.5.),
      BREAK#4353,
    CONTENT#4354(   *  Connection close signals, including packets that contain),
    CONTENT#4355(      CONNECTION_CLOSE frames, are not sent again when packet loss is),
    CONTENT#4356(      detected.  Resending these signals is described in Section 10.),
      BREAK#4357,
    CONTENT#4358(   *  The current connection maximum data is sent in MAX_DATA frames.),
    CONTENT#4359(      An updated value is sent in a MAX_DATA frame if the packet),
    CONTENT#4360(      containing the most recently sent MAX_DATA frame is declared lost),
    CONTENT#4361(      or when the endpoint decides to update the limit.  Care is),
    CONTENT#4362(      necessary to avoid sending this frame too often, as the limit can),
    CONTENT#4363(      increase frequently and cause an unnecessarily large number of),
    CONTENT#4364(      MAX_DATA frames to be sent; see Section 4.2.),
      BREAK#4365,
    CONTENT#4366(   *  The current maximum stream data offset is sent in MAX_STREAM_DATA),
    CONTENT#4367(      frames.  Like MAX_DATA, an updated value is sent when the packet),
    CONTENT#4368(      containing the most recent MAX_STREAM_DATA frame for a stream is),
    CONTENT#4369(      lost or when the limit is updated, with care taken to prevent the),
    CONTENT#4370(      frame from being sent too often.  An endpoint SHOULD stop sending),
    CONTENT#4371(      MAX_STREAM_DATA frames when the receiving part of the stream),
    CONTENT#4372(      enters a "Size Known" or "Reset Recvd" state.),
      BREAK#4373,
    CONTENT#4374(   *  The limit on streams of a given type is sent in MAX_STREAMS),
    CONTENT#4375(      frames.  Like MAX_DATA, an updated value is sent when a packet),
    CONTENT#4376(      containing the most recent MAX_STREAMS for a stream type frame is),
    CONTENT#4377(      declared lost or when the limit is updated, with care taken to),
    CONTENT#4378(      prevent the frame from being sent too often.),
      BREAK#4379,
    CONTENT#4380(   *  Blocked signals are carried in DATA_BLOCKED, STREAM_DATA_BLOCKED,),
    CONTENT#4381(      and STREAMS_BLOCKED frames.  DATA_BLOCKED frames have connection),
    CONTENT#4382(      scope, STREAM_DATA_BLOCKED frames have stream scope, and),
    CONTENT#4383(      STREAMS_BLOCKED frames are scoped to a specific stream type.  A),
    CONTENT#4384(      new frame is sent if a packet containing the most recent frame for),
    CONTENT#4385(      a scope is lost, but only while the endpoint is blocked on the),
    CONTENT#4386(      corresponding limit.  These frames always include the limit that),
    CONTENT#4387(      is causing blocking at the time that they are transmitted.),
      BREAK#4388,
    CONTENT#4389(   *  A liveness or path validation check using PATH_CHALLENGE frames is),
    CONTENT#4390(      sent periodically until a matching PATH_RESPONSE frame is received),
    CONTENT#4391(      or until there is no remaining need for liveness or path),
    CONTENT#4392(      validation checking.  PATH_CHALLENGE frames include a different),
    CONTENT#4393(      payload each time they are sent.),
      BREAK#4394,
    CONTENT#4395(   *  Responses to path validation using PATH_RESPONSE frames are sent),
    CONTENT#4396(      just once.  The peer is expected to send more PATH_CHALLENGE),
    CONTENT#4397(      frames as necessary to evoke additional PATH_RESPONSE frames.),
      BREAK#4398,
    CONTENT#4399(   *  New connection IDs are sent in NEW_CONNECTION_ID frames and),
    CONTENT#4400(      retransmitted if the packet containing them is lost.),
    CONTENT#4401(      Retransmissions of this frame carry the same sequence number),
    CONTENT#4402(      value.  Likewise, retired connection IDs are sent in),
    CONTENT#4403(      RETIRE_CONNECTION_ID frames and retransmitted if the packet),
    CONTENT#4404(      containing them is lost.),
      BREAK#4405,
    CONTENT#4406(   *  NEW_TOKEN frames are retransmitted if the packet containing them),
    CONTENT#4407(      is lost.  No special support is made for detecting reordered and),
    CONTENT#4408(      duplicated NEW_TOKEN frames other than a direct comparison of the),
    CONTENT#4409(      frame contents.),
      BREAK#4410,
    CONTENT#4411(   *  PING and PADDING frames contain no information, so lost PING or),
    CONTENT#4412(      PADDING frames do not require repair.),
      BREAK#4413,
    CONTENT#4414(   *  The HANDSHAKE_DONE frame MUST be retransmitted until it is),
    CONTENT#4415(      acknowledged.),
      BREAK#4416,
    CONTENT#4417(   Endpoints SHOULD prioritize retransmission of data over sending new),
    CONTENT#4418(   data, unless priorities specified by the application indicate),
    CONTENT#4419(   otherwise; see Section 2.3.),
      BREAK#4420,
    CONTENT#4421(   Even though a sender is encouraged to assemble frames containing up-),
    CONTENT#4422(   to-date information every time it sends a packet, it is not forbidden),
    CONTENT#4423(   to retransmit copies of frames from lost packets.  A sender that),
    CONTENT#4424(   retransmits copies of frames needs to handle decreases in available),
    CONTENT#4425(   payload size due to changes in packet number length, connection ID),
    CONTENT#4426(   length, and path MTU.  A receiver MUST accept packets containing an),
    CONTENT#4427(   outdated frame, such as a MAX_DATA frame carrying a smaller maximum),
    CONTENT#4428(   data value than one found in an older packet.),
      BREAK#4429,
    CONTENT#4430(   A sender SHOULD avoid retransmitting information from packets once),
    CONTENT#4431(   they are acknowledged.  This includes packets that are acknowledged),
    CONTENT#4432(   after being declared lost, which can happen in the presence of),
    CONTENT#4433(   network reordering.  Doing so requires senders to retain information),
    CONTENT#4434(   about packets after they are declared lost.  A sender can discard),
    CONTENT#4435(   this information after a period of time elapses that adequately),
    CONTENT#4436(   allows for reordering, such as a PTO (Section 6.2 of),
    CONTENT#4437(   [QUIC-RECOVERY]), or based on other events, such as reaching a memory),
    CONTENT#4438(   limit.),
      BREAK#4439,
    CONTENT#4440(   Upon detecting losses, a sender MUST take appropriate congestion),
    CONTENT#4441(   control action.  The details of loss detection and congestion control),
    CONTENT#4442(   are described in [QUIC-RECOVERY].),
      BREAK#4443,
    SECTION#4444(id=13.4, title=Explicit Congestion Notification),
      BREAK#4445,
    CONTENT#4446(   QUIC endpoints can use ECN [RFC3168] to detect and respond to network),
    CONTENT#4447(   congestion.  ECN allows an endpoint to set an ECN-Capable Transport),
    CONTENT#4448(   (ECT) codepoint in the ECN field of an IP packet.  A network node can),
    CONTENT#4449(   then indicate congestion by setting the ECN-CE codepoint in the ECN),
    CONTENT#4450(   field instead of dropping the packet [RFC8087].  Endpoints react to),
    CONTENT#4451(   reported congestion by reducing their sending rate in response, as),
    CONTENT#4452(   described in [QUIC-RECOVERY].),
      BREAK#4453,
    CONTENT#4454(   To enable ECN, a sending QUIC endpoint first determines whether a),
    CONTENT#4455(   path supports ECN marking and whether the peer reports the ECN values),
    CONTENT#4456(   in received IP headers; see Section 13.4.2.),
      BREAK#4457,
    SECTION#4458(id=13.4.1, title=Reporting ECN Counts),
      BREAK#4459,
    CONTENT#4460(   The use of ECN requires the receiving endpoint to read the ECN field),
    CONTENT#4461(   from an IP packet, which is not possible on all platforms.  If an),
    CONTENT#4462(   endpoint does not implement ECN support or does not have access to),
    CONTENT#4463(   received ECN fields, it does not report ECN counts for packets it),
    CONTENT#4464(   receives.),
      BREAK#4465,
    CONTENT#4466(   Even if an endpoint does not set an ECT field in packets it sends,),
    CONTENT#4467(   the endpoint MUST provide feedback about ECN markings it receives, if),
    CONTENT#4468(   these are accessible.  Failing to report the ECN counts will cause),
    CONTENT#4469(   the sender to disable the use of ECN for this connection.),
      BREAK#4470,
    CONTENT#4471(   On receiving an IP packet with an ECT(0), ECT(1), or ECN-CE),
    CONTENT#4472(   codepoint, an ECN-enabled endpoint accesses the ECN field and),
    CONTENT#4473(   increases the corresponding ECT(0), ECT(1), or ECN-CE count.  These),
    CONTENT#4474(   ECN counts are included in subsequent ACK frames; see Sections 13.2),
    CONTENT#4475(   and 19.3.),
      BREAK#4476,
    CONTENT#4477(   Each packet number space maintains separate acknowledgment state and),
    CONTENT#4478(   separate ECN counts.  Coalesced QUIC packets (see Section 12.2) share),
    CONTENT#4479(   the same IP header so the ECN counts are incremented once for each),
    CONTENT#4480(   coalesced QUIC packet.),
      BREAK#4481,
    CONTENT#4482(   For example, if one each of an Initial, Handshake, and 1-RTT QUIC),
    CONTENT#4483(   packet are coalesced into a single UDP datagram, the ECN counts for),
    CONTENT#4484(   all three packet number spaces will be incremented by one each, based),
    CONTENT#4485(   on the ECN field of the single IP header.),
      BREAK#4486,
    CONTENT#4487(   ECN counts are only incremented when QUIC packets from the received),
    CONTENT#4488(   IP packet are processed.  As such, duplicate QUIC packets are not),
    CONTENT#4489(   processed and do not increase ECN counts; see Section 21.10 for),
    CONTENT#4490(   relevant security concerns.),
      BREAK#4491,
    SECTION#4492(id=13.4.2, title=ECN Validation),
      BREAK#4493,
    CONTENT#4494(   It is possible for faulty network devices to corrupt or erroneously),
    CONTENT#4495(   drop packets that carry a non-zero ECN codepoint.  To ensure),
    CONTENT#4496(   connectivity in the presence of such devices, an endpoint validates),
    CONTENT#4497(   the ECN counts for each network path and disables the use of ECN on),
    CONTENT#4498(   that path if errors are detected.),
      BREAK#4499,
    CONTENT#4500(   To perform ECN validation for a new path:),
      BREAK#4501,
    CONTENT#4502(   *  The endpoint sets an ECT(0) codepoint in the IP header of early),
    CONTENT#4503(      outgoing packets sent on a new path to the peer [RFC8311].),
      BREAK#4504,
    CONTENT#4505(   *  The endpoint monitors whether all packets sent with an ECT),
    CONTENT#4506(      codepoint are eventually deemed lost (Section 6 of),
    CONTENT#4507(      [QUIC-RECOVERY]), indicating that ECN validation has failed.),
      BREAK#4508,
    CONTENT#4509(   If an endpoint has cause to expect that IP packets with an ECT),
    CONTENT#4510(   codepoint might be dropped by a faulty network element, the endpoint),
    CONTENT#4511(   could set an ECT codepoint for only the first ten outgoing packets on),
    CONTENT#4512(   a path, or for a period of three PTOs (see Section 6.2 of),
    CONTENT#4513(   [QUIC-RECOVERY]).  If all packets marked with non-zero ECN codepoints),
    CONTENT#4514(   are subsequently lost, it can disable marking on the assumption that),
    CONTENT#4515(   the marking caused the loss.),
      BREAK#4516,
    CONTENT#4517(   An endpoint thus attempts to use ECN and validates this for each new),
    CONTENT#4518(   connection, when switching to a server's preferred address, and on),
    CONTENT#4519(   active connection migration to a new path.  Appendix A.4 describes),
    CONTENT#4520(   one possible algorithm.),
      BREAK#4521,
    CONTENT#4522(   Other methods of probing paths for ECN support are possible, as are),
    CONTENT#4523(   different marking strategies.  Implementations MAY use other methods),
    CONTENT#4524(   defined in RFCs; see [RFC8311].  Implementations that use the ECT(1)),
    CONTENT#4525(   codepoint need to perform ECN validation using the reported ECT(1)),
    CONTENT#4526(   counts.),
      BREAK#4527,
    SECTION#4528(id=13.4.2.1, title=Receiving ACK Frames with ECN Counts),
      BREAK#4529,
    CONTENT#4530(   Erroneous application of ECN-CE markings by the network can result in),
    CONTENT#4531(   degraded connection performance.  An endpoint that receives an ACK),
    CONTENT#4532(   frame with ECN counts therefore validates the counts before using),
    CONTENT#4533(   them.  It performs this validation by comparing newly received counts),
    CONTENT#4534(   against those from the last successfully processed ACK frame.  Any),
    CONTENT#4535(   increase in the ECN counts is validated based on the ECN markings),
    CONTENT#4536(   that were applied to packets that are newly acknowledged in the ACK),
    CONTENT#4537(   frame.),
      BREAK#4538,
    CONTENT#4539(   If an ACK frame newly acknowledges a packet that the endpoint sent),
    CONTENT#4540(   with either the ECT(0) or ECT(1) codepoint set, ECN validation fails),
    CONTENT#4541(   if the corresponding ECN counts are not present in the ACK frame.),
    CONTENT#4542(   This check detects a network element that zeroes the ECN field or a),
    CONTENT#4543(   peer that does not report ECN markings.),
      BREAK#4544,
    CONTENT#4545(   ECN validation also fails if the sum of the increase in ECT(0) and),
    CONTENT#4546(   ECN-CE counts is less than the number of newly acknowledged packets),
    CONTENT#4547(   that were originally sent with an ECT(0) marking.  Similarly, ECN),
    CONTENT#4548(   validation fails if the sum of the increases to ECT(1) and ECN-CE),
    CONTENT#4549(   counts is less than the number of newly acknowledged packets sent),
    CONTENT#4550(   with an ECT(1) marking.  These checks can detect remarking of ECN-CE),
    CONTENT#4551(   markings by the network.),
      BREAK#4552,
    CONTENT#4553(   An endpoint could miss acknowledgments for a packet when ACK frames),
    CONTENT#4554(   are lost.  It is therefore possible for the total increase in ECT(0),),
    CONTENT#4555(   ECT(1), and ECN-CE counts to be greater than the number of packets),
    CONTENT#4556(   that are newly acknowledged by an ACK frame.  This is why ECN counts),
    CONTENT#4557(   are permitted to be larger than the total number of packets that are),
    CONTENT#4558(   acknowledged.),
      BREAK#4559,
    CONTENT#4560(   Validating ECN counts from reordered ACK frames can result in),
    CONTENT#4561(   failure.  An endpoint MUST NOT fail ECN validation as a result of),
    CONTENT#4562(   processing an ACK frame that does not increase the largest),
    CONTENT#4563(   acknowledged packet number.),
      BREAK#4564,
    CONTENT#4565(   ECN validation can fail if the received total count for either ECT(0)),
    CONTENT#4566(   or ECT(1) exceeds the total number of packets sent with each),
    CONTENT#4567(   corresponding ECT codepoint.  In particular, validation will fail),
    CONTENT#4568(   when an endpoint receives a non-zero ECN count corresponding to an),
    CONTENT#4569(   ECT codepoint that it never applied.  This check detects when packets),
    CONTENT#4570(   are remarked to ECT(0) or ECT(1) in the network.),
      BREAK#4571,
    SECTION#4572(id=13.4.2.2, title=ECN Validation Outcomes),
      BREAK#4573,
    CONTENT#4574(   If validation fails, then the endpoint MUST disable ECN.  It stops),
    CONTENT#4575(   setting the ECT codepoint in IP packets that it sends, assuming that),
    CONTENT#4576(   either the network path or the peer does not support ECN.),
      BREAK#4577,
    CONTENT#4578(   Even if validation fails, an endpoint MAY revalidate ECN for the same),
    CONTENT#4579(   path at any later time in the connection.  An endpoint could continue),
    CONTENT#4580(   to periodically attempt validation.),
      BREAK#4581,
    CONTENT#4582(   Upon successful validation, an endpoint MAY continue to set an ECT),
    CONTENT#4583(   codepoint in subsequent packets it sends, with the expectation that),
    CONTENT#4584(   the path is ECN capable.  Network routing and path elements can),
    CONTENT#4585(   change mid-connection; an endpoint MUST disable ECN if validation),
    CONTENT#4586(   later fails.),
      BREAK#4587,
    SECTION#4588(id=14, title=Datagram Size),
      BREAK#4589,
    CONTENT#4590(   A UDP datagram can include one or more QUIC packets.  The datagram),
    CONTENT#4591(   size refers to the total UDP payload size of a single UDP datagram),
    CONTENT#4592(   carrying QUIC packets.  The datagram size includes one or more QUIC),
    CONTENT#4593(   packet headers and protected payloads, but not the UDP or IP headers.),
      BREAK#4594,
    CONTENT#4595(   The maximum datagram size is defined as the largest size of UDP),
    CONTENT#4596(   payload that can be sent across a network path using a single UDP),
    CONTENT#4597(   datagram.  QUIC MUST NOT be used if the network path cannot support a),
    CONTENT#4598(   maximum datagram size of at least 1200 bytes.),
      BREAK#4599,
    CONTENT#4600(   QUIC assumes a minimum IP packet size of at least 1280 bytes.  This),
    CONTENT#4601(   is the IPv6 minimum size [IPv6] and is also supported by most modern),
    CONTENT#4602(   IPv4 networks.  Assuming the minimum IP header size of 40 bytes for),
    CONTENT#4603(   IPv6 and 20 bytes for IPv4 and a UDP header size of 8 bytes, this),
    CONTENT#4604(   results in a maximum datagram size of 1232 bytes for IPv6 and 1252),
    CONTENT#4605(   bytes for IPv4.  Thus, modern IPv4 and all IPv6 network paths are),
    CONTENT#4606(   expected to be able to support QUIC.),
      BREAK#4607,
    CONTENT#4608(      |  Note: This requirement to support a UDP payload of 1200 bytes),
    CONTENT#4609(      |  limits the space available for IPv6 extension headers to 32),
    CONTENT#4610(      |  bytes or IPv4 options to 52 bytes if the path only supports the),
    CONTENT#4611(      |  IPv6 minimum MTU of 1280 bytes.  This affects Initial packets),
    CONTENT#4612(      |  and path validation.),
      BREAK#4613,
    CONTENT#4614(   Any maximum datagram size larger than 1200 bytes can be discovered),
    CONTENT#4615(   using Path Maximum Transmission Unit Discovery (PMTUD) (see),
    CONTENT#4616(   Section 14.2.1) or Datagram Packetization Layer PMTU Discovery),
    CONTENT#4617(   (DPLPMTUD) (see Section 14.3).),
      BREAK#4618,
    CONTENT#4619(   Enforcement of the max_udp_payload_size transport parameter),
    CONTENT#4620(   (Section 18.2) might act as an additional limit on the maximum),
    CONTENT#4621(   datagram size.  A sender can avoid exceeding this limit, once the),
    CONTENT#4622(   value is known.  However, prior to learning the value of the),
    CONTENT#4623(   transport parameter, endpoints risk datagrams being lost if they send),
    CONTENT#4624(   datagrams larger than the smallest allowed maximum datagram size of),
    CONTENT#4625(   1200 bytes.),
      BREAK#4626,
    CONTENT#4627(   UDP datagrams MUST NOT be fragmented at the IP layer.  In IPv4),
    CONTENT#4628(   [IPv4], the Don't Fragment (DF) bit MUST be set if possible, to),
    CONTENT#4629(   prevent fragmentation on the path.),
      BREAK#4630,
    CONTENT#4631(   QUIC sometimes requires datagrams to be no smaller than a certain),
    CONTENT#4632(   size; see Section 8.1 as an example.  However, the size of a datagram),
    CONTENT#4633(   is not authenticated.  That is, if an endpoint receives a datagram of),
    CONTENT#4634(   a certain size, it cannot know that the sender sent the datagram at),
    CONTENT#4635(   the same size.  Therefore, an endpoint MUST NOT close a connection),
    CONTENT#4636(   when it receives a datagram that does not meet size constraints; the),
    CONTENT#4637(   endpoint MAY discard such datagrams.),
      BREAK#4638,
    SECTION#4639(id=14.1, title=Initial Datagram Size),
      BREAK#4640,
    CONTENT#4641(   A client MUST expand the payload of all UDP datagrams carrying),
    CONTENT#4642(   Initial packets to at least the smallest allowed maximum datagram),
    CONTENT#4643(   size of 1200 bytes by adding PADDING frames to the Initial packet or),
    CONTENT#4644(   by coalescing the Initial packet; see Section 12.2.  Initial packets),
    CONTENT#4645(   can even be coalesced with invalid packets, which a receiver will),
    CONTENT#4646(   discard.  Similarly, a server MUST expand the payload of all UDP),
    CONTENT#4647(   datagrams carrying ack-eliciting Initial packets to at least the),
    CONTENT#4648(   smallest allowed maximum datagram size of 1200 bytes.),
      BREAK#4649,
    CONTENT#4650(   Sending UDP datagrams of this size ensures that the network path),
    CONTENT#4651(   supports a reasonable Path Maximum Transmission Unit (PMTU), in both),
    CONTENT#4652(   directions.  Additionally, a client that expands Initial packets),
    CONTENT#4653(   helps reduce the amplitude of amplification attacks caused by server),
    CONTENT#4654(   responses toward an unverified client address; see Section 8.),
      BREAK#4655,
    CONTENT#4656(   Datagrams containing Initial packets MAY exceed 1200 bytes if the),
    CONTENT#4657(   sender believes that the network path and peer both support the size),
    CONTENT#4658(   that it chooses.),
      BREAK#4659,
    CONTENT#4660(   A server MUST discard an Initial packet that is carried in a UDP),
    CONTENT#4661(   datagram with a payload that is smaller than the smallest allowed),
    CONTENT#4662(   maximum datagram size of 1200 bytes.  A server MAY also immediately),
    CONTENT#4663(   close the connection by sending a CONNECTION_CLOSE frame with an),
    CONTENT#4664(   error code of PROTOCOL_VIOLATION; see Section 10.2.3.),
      BREAK#4665,
    CONTENT#4666(   The server MUST also limit the number of bytes it sends before),
    CONTENT#4667(   validating the address of the client; see Section 8.),
      BREAK#4668,
    SECTION#4669(id=14.2, title=Path Maximum Transmission Unit),
      BREAK#4670,
    CONTENT#4671(   The PMTU is the maximum size of the entire IP packet, including the),
    CONTENT#4672(   IP header, UDP header, and UDP payload.  The UDP payload includes one),
    CONTENT#4673(   or more QUIC packet headers and protected payloads.  The PMTU can),
    CONTENT#4674(   depend on path characteristics and can therefore change over time.),
    CONTENT#4675(   The largest UDP payload an endpoint sends at any given time is),
    CONTENT#4676(   referred to as the endpoint's maximum datagram size.),
      BREAK#4677,
    CONTENT#4678(   An endpoint SHOULD use DPLPMTUD (Section 14.3) or PMTUD),
    CONTENT#4679(   (Section 14.2.1) to determine whether the path to a destination will),
    CONTENT#4680(   support a desired maximum datagram size without fragmentation.  In),
    CONTENT#4681(   the absence of these mechanisms, QUIC endpoints SHOULD NOT send),
    CONTENT#4682(   datagrams larger than the smallest allowed maximum datagram size.),
      BREAK#4683,
    CONTENT#4684(   Both DPLPMTUD and PMTUD send datagrams that are larger than the),
    CONTENT#4685(   current maximum datagram size, referred to as PMTU probes.  All QUIC),
    CONTENT#4686(   packets that are not sent in a PMTU probe SHOULD be sized to fit),
    CONTENT#4687(   within the maximum datagram size to avoid the datagram being),
    CONTENT#4688(   fragmented or dropped [RFC8085].),
      BREAK#4689,
    CONTENT#4690(   If a QUIC endpoint determines that the PMTU between any pair of local),
    CONTENT#4691(   and remote IP addresses cannot support the smallest allowed maximum),
    CONTENT#4692(   datagram size of 1200 bytes, it MUST immediately cease sending QUIC),
    CONTENT#4693(   packets, except for those in PMTU probes or those containing),
    CONTENT#4694(   CONNECTION_CLOSE frames, on the affected path.  An endpoint MAY),
    CONTENT#4695(   terminate the connection if an alternative path cannot be found.),
      BREAK#4696,
    CONTENT#4697(   Each pair of local and remote addresses could have a different PMTU.),
    CONTENT#4698(   QUIC implementations that implement any kind of PMTU discovery),
    CONTENT#4699(   therefore SHOULD maintain a maximum datagram size for each),
    CONTENT#4700(   combination of local and remote IP addresses.),
      BREAK#4701,
    CONTENT#4702(   A QUIC implementation MAY be more conservative in computing the),
    CONTENT#4703(   maximum datagram size to allow for unknown tunnel overheads or IP),
    CONTENT#4704(   header options/extensions.),
      BREAK#4705,
    SECTION#4706(id=14.2.1, title=Handling of ICMP Messages by PMTUD),
      BREAK#4707,
    CONTENT#4708(   PMTUD [RFC1191] [RFC8201] relies on reception of ICMP messages (that),
    CONTENT#4709(   is, IPv6 Packet Too Big (PTB) messages) that indicate when an IP),
    CONTENT#4710(   packet is dropped because it is larger than the local router MTU.),
    CONTENT#4711(   DPLPMTUD can also optionally use these messages.  This use of ICMP),
    CONTENT#4712(   messages is potentially vulnerable to attacks by entities that cannot),
    CONTENT#4713(   observe packets but might successfully guess the addresses used on),
    CONTENT#4714(   the path.  These attacks could reduce the PMTU to a bandwidth-),
    CONTENT#4715(   inefficient value.),
      BREAK#4716,
    CONTENT#4717(   An endpoint MUST ignore an ICMP message that claims the PMTU has),
    CONTENT#4718(   decreased below QUIC's smallest allowed maximum datagram size.),
      BREAK#4719,
    CONTENT#4720(   The requirements for generating ICMP [RFC1812] [RFC4443] state that),
    CONTENT#4721(   the quoted packet should contain as much of the original packet as),
    CONTENT#4722(   possible without exceeding the minimum MTU for the IP version.  The),
    CONTENT#4723(   size of the quoted packet can actually be smaller, or the information),
    CONTENT#4724(   unintelligible, as described in Section 1.1 of [DPLPMTUD].),
      BREAK#4725,
    CONTENT#4726(   QUIC endpoints using PMTUD SHOULD validate ICMP messages to protect),
    CONTENT#4727(   from packet injection as specified in [RFC8201] and Section 5.2 of),
    CONTENT#4728(   [RFC8085].  This validation SHOULD use the quoted packet supplied in),
    CONTENT#4729(   the payload of an ICMP message to associate the message with a),
    CONTENT#4730(   corresponding transport connection (see Section 4.6.1 of [DPLPMTUD]).),
    CONTENT#4731(   ICMP message validation MUST include matching IP addresses and UDP),
    CONTENT#4732(   ports [RFC8085] and, when possible, connection IDs to an active QUIC),
    CONTENT#4733(   session.  The endpoint SHOULD ignore all ICMP messages that fail),
    CONTENT#4734(   validation.),
      BREAK#4735,
    CONTENT#4736(   An endpoint MUST NOT increase the PMTU based on ICMP messages; see),
    CONTENT#4737(   Item 6 in Section 3 of [DPLPMTUD].  Any reduction in QUIC's maximum),
    CONTENT#4738(   datagram size in response to ICMP messages MAY be provisional until),
    CONTENT#4739(   QUIC's loss detection algorithm determines that the quoted packet has),
    CONTENT#4740(   actually been lost.),
      BREAK#4741,
    SECTION#4742(id=14.3, title=Datagram Packetization Layer PMTU Discovery),
      BREAK#4743,
    CONTENT#4744(   DPLPMTUD [DPLPMTUD] relies on tracking loss or acknowledgment of QUIC),
    CONTENT#4745(   packets that are carried in PMTU probes.  PMTU probes for DPLPMTUD),
    CONTENT#4746(   that use the PADDING frame implement "Probing using padding data", as),
    CONTENT#4747(   defined in Section 4.1 of [DPLPMTUD].),
      BREAK#4748,
    CONTENT#4749(   Endpoints SHOULD set the initial value of BASE_PLPMTU (Section 5.1 of),
    CONTENT#4750(   [DPLPMTUD]) to be consistent with QUIC's smallest allowed maximum),
    CONTENT#4751(   datagram size.  The MIN_PLPMTU is the same as the BASE_PLPMTU.),
      BREAK#4752,
    CONTENT#4753(   QUIC endpoints implementing DPLPMTUD maintain a DPLPMTUD Maximum),
    CONTENT#4754(   Packet Size (MPS) (Section 4.4 of [DPLPMTUD]) for each combination of),
    CONTENT#4755(   local and remote IP addresses.  This corresponds to the maximum),
    CONTENT#4756(   datagram size.),
      BREAK#4757,
    SECTION#4758(id=14.3.1, title=DPLPMTUD and Initial Connectivity),
      BREAK#4759,
    CONTENT#4760(   From the perspective of DPLPMTUD, QUIC is an acknowledged),
    CONTENT#4761(   Packetization Layer (PL).  A QUIC sender can therefore enter the),
    CONTENT#4762(   DPLPMTUD BASE state (Section 5.2 of [DPLPMTUD]) when the QUIC),
    CONTENT#4763(   connection handshake has been completed.),
      BREAK#4764,
    SECTION#4765(id=14.3.2, title=Validating the Network Path with DPLPMTUD),
      BREAK#4766,
    CONTENT#4767(   QUIC is an acknowledged PL; therefore, a QUIC sender does not),
    CONTENT#4768(   implement a DPLPMTUD CONFIRMATION_TIMER while in the SEARCH_COMPLETE),
    CONTENT#4769(   state; see Section 5.2 of [DPLPMTUD].),
      BREAK#4770,
    SECTION#4771(id=14.3.3, title=Handling of ICMP Messages by DPLPMTUD),
      BREAK#4772,
    CONTENT#4773(   An endpoint using DPLPMTUD requires the validation of any received),
    CONTENT#4774(   ICMP PTB message before using the PTB information, as defined in),
    CONTENT#4775(   Section 4.6 of [DPLPMTUD].  In addition to UDP port validation, QUIC),
    CONTENT#4776(   validates an ICMP message by using other PL information (e.g.,),
    CONTENT#4777(   validation of connection IDs in the quoted packet of any received),
    CONTENT#4778(   ICMP message).),
      BREAK#4779,
    CONTENT#4780(   The considerations for processing ICMP messages described in),
    CONTENT#4781(   Section 14.2.1 also apply if these messages are used by DPLPMTUD.),
      BREAK#4782,
    SECTION#4783(id=14.4, title=Sending QUIC PMTU Probes),
      BREAK#4784,
    CONTENT#4785(   PMTU probes are ack-eliciting packets.),
      BREAK#4786,
    CONTENT#4787(   Endpoints could limit the content of PMTU probes to PING and PADDING),
    CONTENT#4788(   frames, since packets that are larger than the current maximum),
    CONTENT#4789(   datagram size are more likely to be dropped by the network.  Loss of),
    CONTENT#4790(   a QUIC packet that is carried in a PMTU probe is therefore not a),
    CONTENT#4791(   reliable indication of congestion and SHOULD NOT trigger a congestion),
    CONTENT#4792(   control reaction; see Item 7 in Section 3 of [DPLPMTUD].  However,),
    CONTENT#4793(   PMTU probes consume congestion window, which could delay subsequent),
    CONTENT#4794(   transmission by an application.),
      BREAK#4795,
    SECTION#4796(id=14.4.1, title=PMTU Probes Containing Source Connection ID),
      BREAK#4797,
    CONTENT#4798(   Endpoints that rely on the Destination Connection ID field for),
    CONTENT#4799(   routing incoming QUIC packets are likely to require that the),
    CONTENT#4800(   connection ID be included in PMTU probes to route any resulting ICMP),
    CONTENT#4801(   messages (Section 14.2.1) back to the correct endpoint.  However,),
    CONTENT#4802(   only long header packets (Section 17.2) contain the Source Connection),
    CONTENT#4803(   ID field, and long header packets are not decrypted or acknowledged),
    CONTENT#4804(   by the peer once the handshake is complete.),
      BREAK#4805,
    CONTENT#4806(   One way to construct a PMTU probe is to coalesce (see Section 12.2) a),
    CONTENT#4807(   packet with a long header, such as a Handshake or 0-RTT packet),
    CONTENT#4808(   (Section 17.2), with a short header packet in a single UDP datagram.),
    CONTENT#4809(   If the resulting PMTU probe reaches the endpoint, the packet with the),
    CONTENT#4810(   long header will be ignored, but the short header packet will be),
    CONTENT#4811(   acknowledged.  If the PMTU probe causes an ICMP message to be sent,),
    CONTENT#4812(   the first part of the probe will be quoted in that message.  If the),
    CONTENT#4813(   Source Connection ID field is within the quoted portion of the probe,),
    CONTENT#4814(   that could be used for routing or validation of the ICMP message.),
      BREAK#4815,
    CONTENT#4816(      |  Note: The purpose of using a packet with a long header is only),
    CONTENT#4817(      |  to ensure that the quoted packet contained in the ICMP message),
    CONTENT#4818(      |  contains a Source Connection ID field.  This packet does not),
    CONTENT#4819(      |  need to be a valid packet, and it can be sent even if there is),
    CONTENT#4820(      |  no current use for packets of that type.),
      BREAK#4821,
    SECTION#4822(id=15, title=Versions),
      BREAK#4823,
    CONTENT#4824(   QUIC versions are identified using a 32-bit unsigned number.),
      BREAK#4825,
    CONTENT#4826(   The version 0x00000000 is reserved to represent version negotiation.),
    CONTENT#4827(   This version of the specification is identified by the number),
    CONTENT#4828(   0x00000001.),
      BREAK#4829,
    CONTENT#4830(   Other versions of QUIC might have different properties from this),
    CONTENT#4831(   version.  The properties of QUIC that are guaranteed to be consistent),
    CONTENT#4832(   across all versions of the protocol are described in),
    CONTENT#4833(   [QUIC-INVARIANTS].),
      BREAK#4834,
    CONTENT#4835(   Version 0x00000001 of QUIC uses TLS as a cryptographic handshake),
    CONTENT#4836(   protocol, as described in [QUIC-TLS].),
      BREAK#4837,
    CONTENT#4838(   Versions with the most significant 16 bits of the version number),
    CONTENT#4839(   cleared are reserved for use in future IETF consensus documents.),
      BREAK#4840,
    CONTENT#4841(   Versions that follow the pattern 0x?a?a?a?a are reserved for use in),
    CONTENT#4842(   forcing version negotiation to be exercised -- that is, any version),
    CONTENT#4843(   number where the low four bits of all bytes is 1010 (in binary).  A),
    CONTENT#4844(   client or server MAY advertise support for any of these reserved),
    CONTENT#4845(   versions.),
      BREAK#4846,
    CONTENT#4847(   Reserved version numbers will never represent a real protocol; a),
    CONTENT#4848(   client MAY use one of these version numbers with the expectation that),
    CONTENT#4849(   the server will initiate version negotiation; a server MAY advertise),
    CONTENT#4850(   support for one of these versions and can expect that clients ignore),
    CONTENT#4851(   the value.),
      BREAK#4852,
    SECTION#4853(id=16, title=Variable-Length Integer Encoding),
      BREAK#4854,
    CONTENT#4855(   QUIC packets and frames commonly use a variable-length encoding for),
    CONTENT#4856(   non-negative integer values.  This encoding ensures that smaller),
    CONTENT#4857(   integer values need fewer bytes to encode.),
      BREAK#4858,
    CONTENT#4859(   The QUIC variable-length integer encoding reserves the two most),
    CONTENT#4860(   significant bits of the first byte to encode the base-2 logarithm of),
    CONTENT#4861(   the integer encoding length in bytes.  The integer value is encoded),
    CONTENT#4862(   on the remaining bits, in network byte order.),
      BREAK#4863,
    CONTENT#4864(   This means that integers are encoded on 1, 2, 4, or 8 bytes and can),
    CONTENT#4865(   encode 6-, 14-, 30-, or 62-bit values, respectively.  Table 4),
    CONTENT#4866(   summarizes the encoding properties.),
      BREAK#4867,
    CONTENT#4868(          +======+========+=============+=======================+),
    CONTENT#4869(          | 2MSB | Length | Usable Bits | Range                 |),
    CONTENT#4870(          +======+========+=============+=======================+),
    CONTENT#4871(          | 00   | 1      | 6           | 0-63                  |),
    CONTENT#4872(          +------+--------+-------------+-----------------------+),
    CONTENT#4873(          | 01   | 2      | 14          | 0-16383               |),
    CONTENT#4874(          +------+--------+-------------+-----------------------+),
    CONTENT#4875(          | 10   | 4      | 30          | 0-1073741823          |),
    CONTENT#4876(          +------+--------+-------------+-----------------------+),
    CONTENT#4877(          | 11   | 8      | 62          | 0-4611686018427387903 |),
    CONTENT#4878(          +------+--------+-------------+-----------------------+),
      BREAK#4879,
    CONTENT#4880(                   Table 4: Summary of Integer Encodings),
      BREAK#4881,
    CONTENT#4882(   An example of a decoding algorithm and sample encodings are shown in),
    CONTENT#4883(   Appendix A.1.),
      BREAK#4884,
    CONTENT#4885(   Values do not need to be encoded on the minimum number of bytes),
    CONTENT#4886(   necessary, with the sole exception of the Frame Type field; see),
    CONTENT#4887(   Section 12.4.),
      BREAK#4888,
    CONTENT#4889(   Versions (Section 15), packet numbers sent in the header),
    CONTENT#4890(   (Section 17.1), and the length of connection IDs in long header),
    CONTENT#4891(   packets (Section 17.2) are described using integers but do not use),
    CONTENT#4892(   this encoding.),
      BREAK#4893,
    SECTION#4894(id=17, title=Packet Formats),
      BREAK#4895,
    CONTENT#4896(   All numeric values are encoded in network byte order (that is, big),
    CONTENT#4897(   endian), and all field sizes are in bits.  Hexadecimal notation is),
    CONTENT#4898(   used for describing the value of fields.),
      BREAK#4899,
    SECTION#4900(id=17.1, title=Packet Number Encoding and Decoding),
      BREAK#4901,
    CONTENT#4902(   Packet numbers are integers in the range 0 to 2^62-1 (Section 12.3).),
    CONTENT#4903(   When present in long or short packet headers, they are encoded in 1),
    CONTENT#4904(   to 4 bytes.  The number of bits required to represent the packet),
    CONTENT#4905(   number is reduced by including only the least significant bits of the),
    CONTENT#4906(   packet number.),
      BREAK#4907,
    CONTENT#4908(   The encoded packet number is protected as described in Section 5.4 of),
    CONTENT#4909(   [QUIC-TLS].),
      BREAK#4910,
    CONTENT#4911(   Prior to receiving an acknowledgment for a packet number space, the),
    CONTENT#4912(   full packet number MUST be included; it is not to be truncated, as),
    CONTENT#4913(   described below.),
      BREAK#4914,
    CONTENT#4915(   After an acknowledgment is received for a packet number space, the),
    CONTENT#4916(   sender MUST use a packet number size able to represent more than),
    CONTENT#4917(   twice as large a range as the difference between the largest),
    CONTENT#4918(   acknowledged packet number and the packet number being sent.  A peer),
    CONTENT#4919(   receiving the packet will then correctly decode the packet number,),
    CONTENT#4920(   unless the packet is delayed in transit such that it arrives after),
    CONTENT#4921(   many higher-numbered packets have been received.  An endpoint SHOULD),
    CONTENT#4922(   use a large enough packet number encoding to allow the packet number),
    CONTENT#4923(   to be recovered even if the packet arrives after packets that are),
    CONTENT#4924(   sent afterwards.),
      BREAK#4925,
    CONTENT#4926(   As a result, the size of the packet number encoding is at least one),
    CONTENT#4927(   bit more than the base-2 logarithm of the number of contiguous),
    CONTENT#4928(   unacknowledged packet numbers, including the new packet.  Pseudocode),
    CONTENT#4929(   and an example for packet number encoding can be found in),
    CONTENT#4930(   Appendix A.2.),
      BREAK#4931,
    CONTENT#4932(   At a receiver, protection of the packet number is removed prior to),
    CONTENT#4933(   recovering the full packet number.  The full packet number is then),
    CONTENT#4934(   reconstructed based on the number of significant bits present, the),
    CONTENT#4935(   value of those bits, and the largest packet number received in a),
    CONTENT#4936(   successfully authenticated packet.  Recovering the full packet number),
    CONTENT#4937(   is necessary to successfully complete the removal of packet),
    CONTENT#4938(   protection.),
      BREAK#4939,
    CONTENT#4940(   Once header protection is removed, the packet number is decoded by),
    CONTENT#4941(   finding the packet number value that is closest to the next expected),
    CONTENT#4942(   packet.  The next expected packet is the highest received packet),
    CONTENT#4943(   number plus one.  Pseudocode and an example for packet number),
    CONTENT#4944(   decoding can be found in Appendix A.3.),
      BREAK#4945,
    SECTION#4946(id=17.2, title=Long Header Packets),
      BREAK#4947,
    CONTENT#4948(   Long Header Packet {),
    CONTENT#4949(     Header Form (1) = 1,),
    CONTENT#4950(     Fixed Bit (1) = 1,),
    CONTENT#4951(     Long Packet Type (2),),
    CONTENT#4952(     Type-Specific Bits (4),),
    CONTENT#4953(     Version (32),),
    CONTENT#4954(     Destination Connection ID Length (8),),
    CONTENT#4955(     Destination Connection ID (0..160),),
    CONTENT#4956(     Source Connection ID Length (8),),
    CONTENT#4957(     Source Connection ID (0..160),),
    CONTENT#4958(     Type-Specific Payload (..),),
    CONTENT#4959(   }),
      BREAK#4960,
    CONTENT#4961(                    Figure 13: Long Header Packet Format),
      BREAK#4962,
    CONTENT#4963(   Long headers are used for packets that are sent prior to the),
    CONTENT#4964(   establishment of 1-RTT keys.  Once 1-RTT keys are available, a sender),
    CONTENT#4965(   switches to sending packets using the short header (Section 17.3).),
    CONTENT#4966(   The long form allows for special packets -- such as the Version),
    CONTENT#4967(   Negotiation packet -- to be represented in this uniform fixed-length),
    CONTENT#4968(   packet format.  Packets that use the long header contain the),
    CONTENT#4969(   following fields:),
      BREAK#4970,
    CONTENT#4971(   Header Form:  The most significant bit (0x80) of byte 0 (the first),
    CONTENT#4972(      byte) is set to 1 for long headers.),
      BREAK#4973,
    CONTENT#4974(   Fixed Bit:  The next bit (0x40) of byte 0 is set to 1, unless the),
    CONTENT#4975(      packet is a Version Negotiation packet.  Packets containing a zero),
    CONTENT#4976(      value for this bit are not valid packets in this version and MUST),
    CONTENT#4977(      be discarded.  A value of 1 for this bit allows QUIC to coexist),
    CONTENT#4978(      with other protocols; see [RFC7983].),
      BREAK#4979,
    CONTENT#4980(   Long Packet Type:  The next two bits (those with a mask of 0x30) of),
    CONTENT#4981(      byte 0 contain a packet type.  Packet types are listed in Table 5.),
      BREAK#4982,
    CONTENT#4983(   Type-Specific Bits:  The semantics of the lower four bits (those with),
    CONTENT#4984(      a mask of 0x0f) of byte 0 are determined by the packet type.),
      BREAK#4985,
    CONTENT#4986(   Version:  The QUIC Version is a 32-bit field that follows the first),
    CONTENT#4987(      byte.  This field indicates the version of QUIC that is in use and),
    CONTENT#4988(      determines how the rest of the protocol fields are interpreted.),
      BREAK#4989,
    CONTENT#4990(   Destination Connection ID Length:  The byte following the version),
    CONTENT#4991(      contains the length in bytes of the Destination Connection ID),
    CONTENT#4992(      field that follows it.  This length is encoded as an 8-bit),
    CONTENT#4993(      unsigned integer.  In QUIC version 1, this value MUST NOT exceed),
    CONTENT#4994(      20 bytes.  Endpoints that receive a version 1 long header with a),
    CONTENT#4995(      value larger than 20 MUST drop the packet.  In order to properly),
    CONTENT#4996(      form a Version Negotiation packet, servers SHOULD be able to read),
    CONTENT#4997(      longer connection IDs from other QUIC versions.),
      BREAK#4998,
    CONTENT#4999(   Destination Connection ID:  The Destination Connection ID field),
    CONTENT#5000(      follows the Destination Connection ID Length field, which),
    CONTENT#5001(      indicates the length of this field.  Section 7.2 describes the use),
    CONTENT#5002(      of this field in more detail.),
      BREAK#5003,
    CONTENT#5004(   Source Connection ID Length:  The byte following the Destination),
    CONTENT#5005(      Connection ID contains the length in bytes of the Source),
    CONTENT#5006(      Connection ID field that follows it.  This length is encoded as an),
    CONTENT#5007(      8-bit unsigned integer.  In QUIC version 1, this value MUST NOT),
    CONTENT#5008(      exceed 20 bytes.  Endpoints that receive a version 1 long header),
    CONTENT#5009(      with a value larger than 20 MUST drop the packet.  In order to),
    CONTENT#5010(      properly form a Version Negotiation packet, servers SHOULD be able),
    CONTENT#5011(      to read longer connection IDs from other QUIC versions.),
      BREAK#5012,
    CONTENT#5013(   Source Connection ID:  The Source Connection ID field follows the),
    CONTENT#5014(      Source Connection ID Length field, which indicates the length of),
    CONTENT#5015(      this field.  Section 7.2 describes the use of this field in more),
    CONTENT#5016(      detail.),
      BREAK#5017,
    CONTENT#5018(   Type-Specific Payload:  The remainder of the packet, if any, is type),
    CONTENT#5019(      specific.),
      BREAK#5020,
    CONTENT#5021(   In this version of QUIC, the following packet types with the long),
    CONTENT#5022(   header are defined:),
      BREAK#5023,
    CONTENT#5024(                   +======+===========+================+),
    CONTENT#5025(                   | Type | Name      | Section        |),
    CONTENT#5026(                   +======+===========+================+),
    CONTENT#5027(                   | 0x00 | Initial   | Section 17.2.2 |),
    CONTENT#5028(                   +------+-----------+----------------+),
    CONTENT#5029(                   | 0x01 | 0-RTT     | Section 17.2.3 |),
    CONTENT#5030(                   +------+-----------+----------------+),
    CONTENT#5031(                   | 0x02 | Handshake | Section 17.2.4 |),
    CONTENT#5032(                   +------+-----------+----------------+),
    CONTENT#5033(                   | 0x03 | Retry     | Section 17.2.5 |),
    CONTENT#5034(                   +------+-----------+----------------+),
      BREAK#5035,
    CONTENT#5036(                     Table 5: Long Header Packet Types),
      BREAK#5037,
    CONTENT#5038(   The header form bit, Destination and Source Connection ID lengths,),
    CONTENT#5039(   Destination and Source Connection ID fields, and Version fields of a),
    CONTENT#5040(   long header packet are version independent.  The other fields in the),
    CONTENT#5041(   first byte are version specific.  See [QUIC-INVARIANTS] for details),
    CONTENT#5042(   on how packets from different versions of QUIC are interpreted.),
      BREAK#5043,
    CONTENT#5044(   The interpretation of the fields and the payload are specific to a),
    CONTENT#5045(   version and packet type.  While type-specific semantics for this),
    CONTENT#5046(   version are described in the following sections, several long header),
    CONTENT#5047(   packets in this version of QUIC contain these additional fields:),
      BREAK#5048,
    CONTENT#5049(   Reserved Bits:  Two bits (those with a mask of 0x0c) of byte 0 are),
    CONTENT#5050(      reserved across multiple packet types.  These bits are protected),
    CONTENT#5051(      using header protection; see Section 5.4 of [QUIC-TLS].  The value),
    CONTENT#5052(      included prior to protection MUST be set to 0.  An endpoint MUST),
    CONTENT#5053(      treat receipt of a packet that has a non-zero value for these bits),
    CONTENT#5054(      after removing both packet and header protection as a connection),
    CONTENT#5055(      error of type PROTOCOL_VIOLATION.  Discarding such a packet after),
    CONTENT#5056(      only removing header protection can expose the endpoint to),
    CONTENT#5057(      attacks; see Section 9.5 of [QUIC-TLS].),
      BREAK#5058,
    CONTENT#5059(   Packet Number Length:  In packet types that contain a Packet Number),
    CONTENT#5060(      field, the least significant two bits (those with a mask of 0x03)),
    CONTENT#5061(      of byte 0 contain the length of the Packet Number field, encoded),
    CONTENT#5062(      as an unsigned two-bit integer that is one less than the length of),
    CONTENT#5063(      the Packet Number field in bytes.  That is, the length of the),
    CONTENT#5064(      Packet Number field is the value of this field plus one.  These),
    CONTENT#5065(      bits are protected using header protection; see Section 5.4 of),
    CONTENT#5066(      [QUIC-TLS].),
      BREAK#5067,
    CONTENT#5068(   Length:  This is the length of the remainder of the packet (that is,),
    CONTENT#5069(      the Packet Number and Payload fields) in bytes, encoded as a),
    CONTENT#5070(      variable-length integer (Section 16).),
      BREAK#5071,
    CONTENT#5072(   Packet Number:  This field is 1 to 4 bytes long.  The packet number),
    CONTENT#5073(      is protected using header protection; see Section 5.4 of),
    CONTENT#5074(      [QUIC-TLS].  The length of the Packet Number field is encoded in),
    CONTENT#5075(      the Packet Number Length bits of byte 0; see above.),
      BREAK#5076,
    CONTENT#5077(   Packet Payload:  This is the payload of the packet -- containing a),
    CONTENT#5078(      sequence of frames -- that is protected using packet protection.),
      BREAK#5079,
    SECTION#5080(id=17.2.1, title=Version Negotiation Packet),
      BREAK#5081,
    CONTENT#5082(   A Version Negotiation packet is inherently not version specific.),
    CONTENT#5083(   Upon receipt by a client, it will be identified as a Version),
    CONTENT#5084(   Negotiation packet based on the Version field having a value of 0.),
      BREAK#5085,
    CONTENT#5086(   The Version Negotiation packet is a response to a client packet that),
    CONTENT#5087(   contains a version that is not supported by the server.  It is only),
    CONTENT#5088(   sent by servers.),
      BREAK#5089,
    CONTENT#5090(   The layout of a Version Negotiation packet is:),
      BREAK#5091,
    CONTENT#5092(   Version Negotiation Packet {),
    CONTENT#5093(     Header Form (1) = 1,),
    CONTENT#5094(     Unused (7),),
    CONTENT#5095(     Version (32) = 0,),
    CONTENT#5096(     Destination Connection ID Length (8),),
    CONTENT#5097(     Destination Connection ID (0..2040),),
    CONTENT#5098(     Source Connection ID Length (8),),
    CONTENT#5099(     Source Connection ID (0..2040),),
    CONTENT#5100(     Supported Version (32) ...,),
    CONTENT#5101(   }),
      BREAK#5102,
    CONTENT#5103(                   Figure 14: Version Negotiation Packet),
      BREAK#5104,
    CONTENT#5105(   The value in the Unused field is set to an arbitrary value by the),
    CONTENT#5106(   server.  Clients MUST ignore the value of this field.  Where QUIC),
    CONTENT#5107(   might be multiplexed with other protocols (see [RFC7983]), servers),
    CONTENT#5108(   SHOULD set the most significant bit of this field (0x40) to 1 so that),
    CONTENT#5109(   Version Negotiation packets appear to have the Fixed Bit field.  Note),
    CONTENT#5110(   that other versions of QUIC might not make a similar recommendation.),
      BREAK#5111,
    CONTENT#5112(   The Version field of a Version Negotiation packet MUST be set to),
    CONTENT#5113(   0x00000000.),
      BREAK#5114,
    CONTENT#5115(   The server MUST include the value from the Source Connection ID field),
    CONTENT#5116(   of the packet it receives in the Destination Connection ID field.),
    CONTENT#5117(   The value for Source Connection ID MUST be copied from the),
    CONTENT#5118(   Destination Connection ID of the received packet, which is initially),
    CONTENT#5119(   randomly selected by a client.  Echoing both connection IDs gives),
    CONTENT#5120(   clients some assurance that the server received the packet and that),
    CONTENT#5121(   the Version Negotiation packet was not generated by an entity that),
    CONTENT#5122(   did not observe the Initial packet.),
      BREAK#5123,
    CONTENT#5124(   Future versions of QUIC could have different requirements for the),
    CONTENT#5125(   lengths of connection IDs.  In particular, connection IDs might have),
    CONTENT#5126(   a smaller minimum length or a greater maximum length.  Version-),
    CONTENT#5127(   specific rules for the connection ID therefore MUST NOT influence a),
    CONTENT#5128(   decision about whether to send a Version Negotiation packet.),
      BREAK#5129,
    CONTENT#5130(   The remainder of the Version Negotiation packet is a list of 32-bit),
    CONTENT#5131(   versions that the server supports.),
      BREAK#5132,
    CONTENT#5133(   A Version Negotiation packet is not acknowledged.  It is only sent in),
    CONTENT#5134(   response to a packet that indicates an unsupported version; see),
    CONTENT#5135(   Section 5.2.2.),
      BREAK#5136,
    CONTENT#5137(   The Version Negotiation packet does not include the Packet Number and),
    CONTENT#5138(   Length fields present in other packets that use the long header form.),
    CONTENT#5139(   Consequently, a Version Negotiation packet consumes an entire UDP),
    CONTENT#5140(   datagram.),
      BREAK#5141,
    CONTENT#5142(   A server MUST NOT send more than one Version Negotiation packet in),
    CONTENT#5143(   response to a single UDP datagram.),
      BREAK#5144,
    CONTENT#5145(   See Section 6 for a description of the version negotiation process.),
      BREAK#5146,
    SECTION#5147(id=17.2.2, title=Initial Packet),
      BREAK#5148,
    CONTENT#5149(   An Initial packet uses long headers with a type value of 0x00.  It),
    CONTENT#5150(   carries the first CRYPTO frames sent by the client and server to),
    CONTENT#5151(   perform key exchange, and it carries ACK frames in either direction.),
      BREAK#5152,
    CONTENT#5153(   Initial Packet {),
    CONTENT#5154(     Header Form (1) = 1,),
    CONTENT#5155(     Fixed Bit (1) = 1,),
    CONTENT#5156(     Long Packet Type (2) = 0,),
    CONTENT#5157(     Reserved Bits (2),),
    CONTENT#5158(     Packet Number Length (2),),
    CONTENT#5159(     Version (32),),
    CONTENT#5160(     Destination Connection ID Length (8),),
    CONTENT#5161(     Destination Connection ID (0..160),),
    CONTENT#5162(     Source Connection ID Length (8),),
    CONTENT#5163(     Source Connection ID (0..160),),
    CONTENT#5164(     Token Length (i),),
    CONTENT#5165(     Token (..),),
    CONTENT#5166(     Length (i),),
    CONTENT#5167(     Packet Number (8..32),),
    CONTENT#5168(     Packet Payload (8..),),
    CONTENT#5169(   }),
      BREAK#5170,
    CONTENT#5171(                         Figure 15: Initial Packet),
      BREAK#5172,
    CONTENT#5173(   The Initial packet contains a long header as well as the Length and),
    CONTENT#5174(   Packet Number fields; see Section 17.2.  The first byte contains the),
    CONTENT#5175(   Reserved and Packet Number Length bits; see also Section 17.2.),
    CONTENT#5176(   Between the Source Connection ID and Length fields, there are two),
    CONTENT#5177(   additional fields specific to the Initial packet.),
      BREAK#5178,
    CONTENT#5179(   Token Length:  A variable-length integer specifying the length of the),
    CONTENT#5180(      Token field, in bytes.  This value is 0 if no token is present.),
    CONTENT#5181(      Initial packets sent by the server MUST set the Token Length field),
    CONTENT#5182(      to 0; clients that receive an Initial packet with a non-zero Token),
    CONTENT#5183(      Length field MUST either discard the packet or generate a),
    CONTENT#5184(      connection error of type PROTOCOL_VIOLATION.),
      BREAK#5185,
    CONTENT#5186(   Token:  The value of the token that was previously provided in a),
    CONTENT#5187(      Retry packet or NEW_TOKEN frame; see Section 8.1.),
      BREAK#5188,
    CONTENT#5189(   In order to prevent tampering by version-unaware middleboxes, Initial),
    CONTENT#5190(   packets are protected with connection- and version-specific keys),
    CONTENT#5191(   (Initial keys) as described in [QUIC-TLS].  This protection does not),
    CONTENT#5192(   provide confidentiality or integrity against attackers that can),
    CONTENT#5193(   observe packets, but it does prevent attackers that cannot observe),
    CONTENT#5194(   packets from spoofing Initial packets.),
      BREAK#5195,
    CONTENT#5196(   The client and server use the Initial packet type for any packet that),
    CONTENT#5197(   contains an initial cryptographic handshake message.  This includes),
    CONTENT#5198(   all cases where a new packet containing the initial cryptographic),
    CONTENT#5199(   message needs to be created, such as the packets sent after receiving),
    CONTENT#5200(   a Retry packet; see Section 17.2.5.),
      BREAK#5201,
    CONTENT#5202(   A server sends its first Initial packet in response to a client),
    CONTENT#5203(   Initial.  A server MAY send multiple Initial packets.  The),
    CONTENT#5204(   cryptographic key exchange could require multiple round trips or),
    CONTENT#5205(   retransmissions of this data.),
      BREAK#5206,
    CONTENT#5207(   The payload of an Initial packet includes a CRYPTO frame (or frames)),
    CONTENT#5208(   containing a cryptographic handshake message, ACK frames, or both.),
    CONTENT#5209(   PING, PADDING, and CONNECTION_CLOSE frames of type 0x1c are also),
    CONTENT#5210(   permitted.  An endpoint that receives an Initial packet containing),
    CONTENT#5211(   other frames can either discard the packet as spurious or treat it as),
    CONTENT#5212(   a connection error.),
      BREAK#5213,
    CONTENT#5214(   The first packet sent by a client always includes a CRYPTO frame that),
    CONTENT#5215(   contains the start or all of the first cryptographic handshake),
    CONTENT#5216(   message.  The first CRYPTO frame sent always begins at an offset of),
    CONTENT#5217(   0; see Section 7.),
      BREAK#5218,
    CONTENT#5219(   Note that if the server sends a TLS HelloRetryRequest (see),
    CONTENT#5220(   Section 4.7 of [QUIC-TLS]), the client will send another series of),
    CONTENT#5221(   Initial packets.  These Initial packets will continue the),
    CONTENT#5222(   cryptographic handshake and will contain CRYPTO frames starting at an),
    CONTENT#5223(   offset matching the size of the CRYPTO frames sent in the first),
    CONTENT#5224(   flight of Initial packets.),
      BREAK#5225,
    SECTION#5226(id=17.2.2.1, title=Abandoning Initial Packets),
      BREAK#5227,
    CONTENT#5228(   A client stops both sending and processing Initial packets when it),
    CONTENT#5229(   sends its first Handshake packet.  A server stops sending and),
    CONTENT#5230(   processing Initial packets when it receives its first Handshake),
    CONTENT#5231(   packet.  Though packets might still be in flight or awaiting),
    CONTENT#5232(   acknowledgment, no further Initial packets need to be exchanged),
    CONTENT#5233(   beyond this point.  Initial packet protection keys are discarded (see),
    CONTENT#5234(   Section 4.9.1 of [QUIC-TLS]) along with any loss recovery and),
    CONTENT#5235(   congestion control state; see Section 6.4 of [QUIC-RECOVERY].),
      BREAK#5236,
    CONTENT#5237(   Any data in CRYPTO frames is discarded -- and no longer retransmitted),
    CONTENT#5238(   -- when Initial keys are discarded.),
      BREAK#5239,
    SECTION#5240(id=17.2.3, title=0-RTT),
      BREAK#5241,
    CONTENT#5242(   A 0-RTT packet uses long headers with a type value of 0x01, followed),
    CONTENT#5243(   by the Length and Packet Number fields; see Section 17.2.  The first),
    CONTENT#5244(   byte contains the Reserved and Packet Number Length bits; see),
    CONTENT#5245(   Section 17.2.  A 0-RTT packet is used to carry "early" data from the),
    CONTENT#5246(   client to the server as part of the first flight, prior to handshake),
    CONTENT#5247(   completion.  As part of the TLS handshake, the server can accept or),
    CONTENT#5248(   reject this early data.),
      BREAK#5249,
    CONTENT#5250(   See Section 2.3 of [TLS13] for a discussion of 0-RTT data and its),
    CONTENT#5251(   limitations.),
      BREAK#5252,
    CONTENT#5253(   0-RTT Packet {),
    CONTENT#5254(     Header Form (1) = 1,),
    CONTENT#5255(     Fixed Bit (1) = 1,),
    CONTENT#5256(     Long Packet Type (2) = 1,),
    CONTENT#5257(     Reserved Bits (2),),
    CONTENT#5258(     Packet Number Length (2),),
    CONTENT#5259(     Version (32),),
    CONTENT#5260(     Destination Connection ID Length (8),),
    CONTENT#5261(     Destination Connection ID (0..160),),
    CONTENT#5262(     Source Connection ID Length (8),),
    CONTENT#5263(     Source Connection ID (0..160),),
    CONTENT#5264(     Length (i),),
    CONTENT#5265(     Packet Number (8..32),),
    CONTENT#5266(     Packet Payload (8..),),
    CONTENT#5267(   }),
      BREAK#5268,
    CONTENT#5269(                          Figure 16: 0-RTT Packet),
      BREAK#5270,
    CONTENT#5271(   Packet numbers for 0-RTT protected packets use the same space as),
    CONTENT#5272(   1-RTT protected packets.),
      BREAK#5273,
    CONTENT#5274(   After a client receives a Retry packet, 0-RTT packets are likely to),
    CONTENT#5275(   have been lost or discarded by the server.  A client SHOULD attempt),
    CONTENT#5276(   to resend data in 0-RTT packets after it sends a new Initial packet.),
    CONTENT#5277(   New packet numbers MUST be used for any new packets that are sent; as),
    CONTENT#5278(   described in Section 17.2.5.3, reusing packet numbers could),
    CONTENT#5279(   compromise packet protection.),
      BREAK#5280,
    CONTENT#5281(   A client only receives acknowledgments for its 0-RTT packets once the),
    CONTENT#5282(   handshake is complete, as defined in Section 4.1.1 of [QUIC-TLS].),
      BREAK#5283,
    CONTENT#5284(   A client MUST NOT send 0-RTT packets once it starts processing 1-RTT),
    CONTENT#5285(   packets from the server.  This means that 0-RTT packets cannot),
    CONTENT#5286(   contain any response to frames from 1-RTT packets.  For instance, a),
    CONTENT#5287(   client cannot send an ACK frame in a 0-RTT packet, because that can),
    CONTENT#5288(   only acknowledge a 1-RTT packet.  An acknowledgment for a 1-RTT),
    CONTENT#5289(   packet MUST be carried in a 1-RTT packet.),
      BREAK#5290,
    CONTENT#5291(   A server SHOULD treat a violation of remembered limits),
    CONTENT#5292(   (Section 7.4.1) as a connection error of an appropriate type (for),
    CONTENT#5293(   instance, a FLOW_CONTROL_ERROR for exceeding stream data limits).),
      BREAK#5294,
    SECTION#5295(id=17.2.4, title=Handshake Packet),
      BREAK#5296,
    CONTENT#5297(   A Handshake packet uses long headers with a type value of 0x02,),
    CONTENT#5298(   followed by the Length and Packet Number fields; see Section 17.2.),
    CONTENT#5299(   The first byte contains the Reserved and Packet Number Length bits;),
    CONTENT#5300(   see Section 17.2.  It is used to carry cryptographic handshake),
    CONTENT#5301(   messages and acknowledgments from the server and client.),
      BREAK#5302,
    CONTENT#5303(   Handshake Packet {),
    CONTENT#5304(     Header Form (1) = 1,),
    CONTENT#5305(     Fixed Bit (1) = 1,),
    CONTENT#5306(     Long Packet Type (2) = 2,),
    CONTENT#5307(     Reserved Bits (2),),
    CONTENT#5308(     Packet Number Length (2),),
    CONTENT#5309(     Version (32),),
    CONTENT#5310(     Destination Connection ID Length (8),),
    CONTENT#5311(     Destination Connection ID (0..160),),
    CONTENT#5312(     Source Connection ID Length (8),),
    CONTENT#5313(     Source Connection ID (0..160),),
    CONTENT#5314(     Length (i),),
    CONTENT#5315(     Packet Number (8..32),),
    CONTENT#5316(     Packet Payload (8..),),
    CONTENT#5317(   }),
      BREAK#5318,
    CONTENT#5319(                   Figure 17: Handshake Protected Packet),
      BREAK#5320,
    CONTENT#5321(   Once a client has received a Handshake packet from a server, it uses),
    CONTENT#5322(   Handshake packets to send subsequent cryptographic handshake messages),
    CONTENT#5323(   and acknowledgments to the server.),
      BREAK#5324,
    CONTENT#5325(   The Destination Connection ID field in a Handshake packet contains a),
    CONTENT#5326(   connection ID that is chosen by the recipient of the packet; the),
    CONTENT#5327(   Source Connection ID includes the connection ID that the sender of),
    CONTENT#5328(   the packet wishes to use; see Section 7.2.),
      BREAK#5329,
    CONTENT#5330(   Handshake packets have their own packet number space, and thus the),
    CONTENT#5331(   first Handshake packet sent by a server contains a packet number of),
    CONTENT#5332(   0.),
      BREAK#5333,
    CONTENT#5334(   The payload of this packet contains CRYPTO frames and could contain),
    CONTENT#5335(   PING, PADDING, or ACK frames.  Handshake packets MAY contain),
    CONTENT#5336(   CONNECTION_CLOSE frames of type 0x1c.  Endpoints MUST treat receipt),
    CONTENT#5337(   of Handshake packets with other frames as a connection error of type),
    CONTENT#5338(   PROTOCOL_VIOLATION.),
      BREAK#5339,
    CONTENT#5340(   Like Initial packets (see Section 17.2.2.1), data in CRYPTO frames),
    CONTENT#5341(   for Handshake packets is discarded -- and no longer retransmitted --),
    CONTENT#5342(   when Handshake protection keys are discarded.),
      BREAK#5343,
    SECTION#5344(id=17.2.5, title=Retry Packet),
      BREAK#5345,
    CONTENT#5346(   As shown in Figure 18, a Retry packet uses a long packet header with),
    CONTENT#5347(   a type value of 0x03.  It carries an address validation token created),
    CONTENT#5348(   by the server.  It is used by a server that wishes to perform a),
    CONTENT#5349(   retry; see Section 8.1.),
      BREAK#5350,
    CONTENT#5351(   Retry Packet {),
    CONTENT#5352(     Header Form (1) = 1,),
    CONTENT#5353(     Fixed Bit (1) = 1,),
    CONTENT#5354(     Long Packet Type (2) = 3,),
    CONTENT#5355(     Unused (4),),
    CONTENT#5356(     Version (32),),
    CONTENT#5357(     Destination Connection ID Length (8),),
    CONTENT#5358(     Destination Connection ID (0..160),),
    CONTENT#5359(     Source Connection ID Length (8),),
    CONTENT#5360(     Source Connection ID (0..160),),
    CONTENT#5361(     Retry Token (..),),
    CONTENT#5362(     Retry Integrity Tag (128),),
    CONTENT#5363(   }),
      BREAK#5364,
    CONTENT#5365(                          Figure 18: Retry Packet),
      BREAK#5366,
    CONTENT#5367(   A Retry packet does not contain any protected fields.  The value in),
    CONTENT#5368(   the Unused field is set to an arbitrary value by the server; a client),
    CONTENT#5369(   MUST ignore these bits.  In addition to the fields from the long),
    CONTENT#5370(   header, it contains these additional fields:),
      BREAK#5371,
    CONTENT#5372(   Retry Token:  An opaque token that the server can use to validate the),
    CONTENT#5373(      client's address.),
      BREAK#5374,
    CONTENT#5375(   Retry Integrity Tag:  Defined in Section 5.8 ("Retry Packet),
    CONTENT#5376(      Integrity") of [QUIC-TLS].),
      BREAK#5377,
    SECTION#5378(id=17.2.5.1, title=Sending a Retry Packet),
      BREAK#5379,
    CONTENT#5380(   The server populates the Destination Connection ID with the),
    CONTENT#5381(   connection ID that the client included in the Source Connection ID of),
    CONTENT#5382(   the Initial packet.),
      BREAK#5383,
    CONTENT#5384(   The server includes a connection ID of its choice in the Source),
    CONTENT#5385(   Connection ID field.  This value MUST NOT be equal to the Destination),
    CONTENT#5386(   Connection ID field of the packet sent by the client.  A client MUST),
    CONTENT#5387(   discard a Retry packet that contains a Source Connection ID field),
    CONTENT#5388(   that is identical to the Destination Connection ID field of its),
    CONTENT#5389(   Initial packet.  The client MUST use the value from the Source),
    CONTENT#5390(   Connection ID field of the Retry packet in the Destination Connection),
    CONTENT#5391(   ID field of subsequent packets that it sends.),
      BREAK#5392,
    CONTENT#5393(   A server MAY send Retry packets in response to Initial and 0-RTT),
    CONTENT#5394(   packets.  A server can either discard or buffer 0-RTT packets that it),
    CONTENT#5395(   receives.  A server can send multiple Retry packets as it receives),
    CONTENT#5396(   Initial or 0-RTT packets.  A server MUST NOT send more than one Retry),
    CONTENT#5397(   packet in response to a single UDP datagram.),
      BREAK#5398,
    SECTION#5399(id=17.2.5.2, title=Handling a Retry Packet),
      BREAK#5400,
    CONTENT#5401(   A client MUST accept and process at most one Retry packet for each),
    CONTENT#5402(   connection attempt.  After the client has received and processed an),
    CONTENT#5403(   Initial or Retry packet from the server, it MUST discard any),
    CONTENT#5404(   subsequent Retry packets that it receives.),
      BREAK#5405,
    CONTENT#5406(   Clients MUST discard Retry packets that have a Retry Integrity Tag),
    CONTENT#5407(   that cannot be validated; see Section 5.8 of [QUIC-TLS].  This),
    CONTENT#5408(   diminishes an attacker's ability to inject a Retry packet and),
    CONTENT#5409(   protects against accidental corruption of Retry packets.  A client),
    CONTENT#5410(   MUST discard a Retry packet with a zero-length Retry Token field.),
      BREAK#5411,
    CONTENT#5412(   The client responds to a Retry packet with an Initial packet that),
    CONTENT#5413(   includes the provided Retry token to continue connection),
    CONTENT#5414(   establishment.),
      BREAK#5415,
    CONTENT#5416(   A client sets the Destination Connection ID field of this Initial),
    CONTENT#5417(   packet to the value from the Source Connection ID field in the Retry),
    CONTENT#5418(   packet.  Changing the Destination Connection ID field also results in),
    CONTENT#5419(   a change to the keys used to protect the Initial packet.  It also),
    CONTENT#5420(   sets the Token field to the token provided in the Retry packet.  The),
    CONTENT#5421(   client MUST NOT change the Source Connection ID because the server),
    CONTENT#5422(   could include the connection ID as part of its token validation),
    CONTENT#5423(   logic; see Section 8.1.4.),
      BREAK#5424,
    CONTENT#5425(   A Retry packet does not include a packet number and cannot be),
    CONTENT#5426(   explicitly acknowledged by a client.),
      BREAK#5427,
    SECTION#5428(id=17.2.5.3, title=Continuing a Handshake after Retry),
      BREAK#5429,
    CONTENT#5430(   Subsequent Initial packets from the client include the connection ID),
    CONTENT#5431(   and token values from the Retry packet.  The client copies the Source),
    CONTENT#5432(   Connection ID field from the Retry packet to the Destination),
    CONTENT#5433(   Connection ID field and uses this value until an Initial packet with),
    CONTENT#5434(   an updated value is received; see Section 7.2.  The value of the),
    CONTENT#5435(   Token field is copied to all subsequent Initial packets; see),
    CONTENT#5436(   Section 8.1.2.),
      BREAK#5437,
    CONTENT#5438(   Other than updating the Destination Connection ID and Token fields,),
    CONTENT#5439(   the Initial packet sent by the client is subject to the same),
    CONTENT#5440(   restrictions as the first Initial packet.  A client MUST use the same),
    CONTENT#5441(   cryptographic handshake message it included in this packet.  A server),
    CONTENT#5442(   MAY treat a packet that contains a different cryptographic handshake),
    CONTENT#5443(   message as a connection error or discard it.  Note that including a),
    CONTENT#5444(   Token field reduces the available space for the cryptographic),
    CONTENT#5445(   handshake message, which might result in the client needing to send),
    CONTENT#5446(   multiple Initial packets.),
      BREAK#5447,
    CONTENT#5448(   A client MAY attempt 0-RTT after receiving a Retry packet by sending),
    CONTENT#5449(   0-RTT packets to the connection ID provided by the server.),
      BREAK#5450,
    CONTENT#5451(   A client MUST NOT reset the packet number for any packet number space),
    CONTENT#5452(   after processing a Retry packet.  In particular, 0-RTT packets),
    CONTENT#5453(   contain confidential information that will most likely be),
    CONTENT#5454(   retransmitted on receiving a Retry packet.  The keys used to protect),
    CONTENT#5455(   these new 0-RTT packets will not change as a result of responding to),
    CONTENT#5456(   a Retry packet.  However, the data sent in these packets could be),
    CONTENT#5457(   different than what was sent earlier.  Sending these new packets with),
    CONTENT#5458(   the same packet number is likely to compromise the packet protection),
    CONTENT#5459(   for those packets because the same key and nonce could be used to),
    CONTENT#5460(   protect different content.  A server MAY abort the connection if it),
    CONTENT#5461(   detects that the client reset the packet number.),
      BREAK#5462,
    CONTENT#5463(   The connection IDs used in Initial and Retry packets exchanged),
    CONTENT#5464(   between client and server are copied to the transport parameters and),
    CONTENT#5465(   validated as described in Section 7.3.),
      BREAK#5466,
    SECTION#5467(id=17.3, title=Short Header Packets),
      BREAK#5468,
    CONTENT#5469(   This version of QUIC defines a single packet type that uses the short),
    CONTENT#5470(   packet header.),
      BREAK#5471,
    SECTION#5472(id=17.3.1, title=1-RTT Packet),
      BREAK#5473,
    CONTENT#5474(   A 1-RTT packet uses a short packet header.  It is used after the),
    CONTENT#5475(   version and 1-RTT keys are negotiated.),
      BREAK#5476,
    CONTENT#5477(   1-RTT Packet {),
    CONTENT#5478(     Header Form (1) = 0,),
    CONTENT#5479(     Fixed Bit (1) = 1,),
    CONTENT#5480(     Spin Bit (1),),
    CONTENT#5481(     Reserved Bits (2),),
    CONTENT#5482(     Key Phase (1),),
    CONTENT#5483(     Packet Number Length (2),),
    CONTENT#5484(     Destination Connection ID (0..160),),
    CONTENT#5485(     Packet Number (8..32),),
    CONTENT#5486(     Packet Payload (8..),),
    CONTENT#5487(   }),
      BREAK#5488,
    CONTENT#5489(                          Figure 19: 1-RTT Packet),
      BREAK#5490,
    CONTENT#5491(   1-RTT packets contain the following fields:),
      BREAK#5492,
    CONTENT#5493(   Header Form:  The most significant bit (0x80) of byte 0 is set to 0),
    CONTENT#5494(      for the short header.),
      BREAK#5495,
    CONTENT#5496(   Fixed Bit:  The next bit (0x40) of byte 0 is set to 1.  Packets),
    CONTENT#5497(      containing a zero value for this bit are not valid packets in this),
    CONTENT#5498(      version and MUST be discarded.  A value of 1 for this bit allows),
    CONTENT#5499(      QUIC to coexist with other protocols; see [RFC7983].),
      BREAK#5500,
    CONTENT#5501(   Spin Bit:  The third most significant bit (0x20) of byte 0 is the),
    CONTENT#5502(      latency spin bit, set as described in Section 17.4.),
      BREAK#5503,
    CONTENT#5504(   Reserved Bits:  The next two bits (those with a mask of 0x18) of byte),
    CONTENT#5505(      0 are reserved.  These bits are protected using header protection;),
    CONTENT#5506(      see Section 5.4 of [QUIC-TLS].  The value included prior to),
    CONTENT#5507(      protection MUST be set to 0.  An endpoint MUST treat receipt of a),
    CONTENT#5508(      packet that has a non-zero value for these bits, after removing),
    CONTENT#5509(      both packet and header protection, as a connection error of type),
    CONTENT#5510(      PROTOCOL_VIOLATION.  Discarding such a packet after only removing),
    CONTENT#5511(      header protection can expose the endpoint to attacks; see),
    CONTENT#5512(      Section 9.5 of [QUIC-TLS].),
      BREAK#5513,
    CONTENT#5514(   Key Phase:  The next bit (0x04) of byte 0 indicates the key phase,),
    CONTENT#5515(      which allows a recipient of a packet to identify the packet),
    CONTENT#5516(      protection keys that are used to protect the packet.  See),
    CONTENT#5517(      [QUIC-TLS] for details.  This bit is protected using header),
    CONTENT#5518(      protection; see Section 5.4 of [QUIC-TLS].),
      BREAK#5519,
    CONTENT#5520(   Packet Number Length:  The least significant two bits (those with a),
    CONTENT#5521(      mask of 0x03) of byte 0 contain the length of the Packet Number),
    CONTENT#5522(      field, encoded as an unsigned two-bit integer that is one less),
    CONTENT#5523(      than the length of the Packet Number field in bytes.  That is, the),
    CONTENT#5524(      length of the Packet Number field is the value of this field plus),
    CONTENT#5525(      one.  These bits are protected using header protection; see),
    CONTENT#5526(      Section 5.4 of [QUIC-TLS].),
      BREAK#5527,
    CONTENT#5528(   Destination Connection ID:  The Destination Connection ID is a),
    CONTENT#5529(      connection ID that is chosen by the intended recipient of the),
    CONTENT#5530(      packet.  See Section 5.1 for more details.),
      BREAK#5531,
    CONTENT#5532(   Packet Number:  The Packet Number field is 1 to 4 bytes long.  The),
    CONTENT#5533(      packet number is protected using header protection; see),
    CONTENT#5534(      Section 5.4 of [QUIC-TLS].  The length of the Packet Number field),
    CONTENT#5535(      is encoded in Packet Number Length field.  See Section 17.1 for),
    CONTENT#5536(      details.),
      BREAK#5537,
    CONTENT#5538(   Packet Payload:  1-RTT packets always include a 1-RTT protected),
    CONTENT#5539(      payload.),
      BREAK#5540,
    CONTENT#5541(   The header form bit and the Destination Connection ID field of a),
    CONTENT#5542(   short header packet are version independent.  The remaining fields),
    CONTENT#5543(   are specific to the selected QUIC version.  See [QUIC-INVARIANTS] for),
    CONTENT#5544(   details on how packets from different versions of QUIC are),
    CONTENT#5545(   interpreted.),
      BREAK#5546,
    SECTION#5547(id=17.4, title=Latency Spin Bit),
      BREAK#5548,
    CONTENT#5549(   The latency spin bit, which is defined for 1-RTT packets),
    CONTENT#5550(   (Section 17.3.1), enables passive latency monitoring from observation),
    CONTENT#5551(   points on the network path throughout the duration of a connection.),
    CONTENT#5552(   The server reflects the spin value received, while the client "spins"),
    CONTENT#5553(   it after one RTT.  On-path observers can measure the time between two),
    CONTENT#5554(   spin bit toggle events to estimate the end-to-end RTT of a),
    CONTENT#5555(   connection.),
      BREAK#5556,
    CONTENT#5557(   The spin bit is only present in 1-RTT packets, since it is possible),
    CONTENT#5558(   to measure the initial RTT of a connection by observing the),
    CONTENT#5559(   handshake.  Therefore, the spin bit is available after version),
    CONTENT#5560(   negotiation and connection establishment are completed.  On-path),
    CONTENT#5561(   measurement and use of the latency spin bit are further discussed in),
    CONTENT#5562(   [QUIC-MANAGEABILITY].),
      BREAK#5563,
    CONTENT#5564(   The spin bit is an OPTIONAL feature of this version of QUIC.  An),
    CONTENT#5565(   endpoint that does not support this feature MUST disable it, as),
    CONTENT#5566(   defined below.),
      BREAK#5567,
    CONTENT#5568(   Each endpoint unilaterally decides if the spin bit is enabled or),
    CONTENT#5569(   disabled for a connection.  Implementations MUST allow administrators),
    CONTENT#5570(   of clients and servers to disable the spin bit either globally or on),
    CONTENT#5571(   a per-connection basis.  Even when the spin bit is not disabled by),
    CONTENT#5572(   the administrator, endpoints MUST disable their use of the spin bit),
    CONTENT#5573(   for a random selection of at least one in every 16 network paths, or),
    CONTENT#5574(   for one in every 16 connection IDs, in order to ensure that QUIC),
    CONTENT#5575(   connections that disable the spin bit are commonly observed on the),
    CONTENT#5576(   network.  As each endpoint disables the spin bit independently, this),
    CONTENT#5577(   ensures that the spin bit signal is disabled on approximately one in),
    CONTENT#5578(   eight network paths.),
      BREAK#5579,
    CONTENT#5580(   When the spin bit is disabled, endpoints MAY set the spin bit to any),
    CONTENT#5581(   value and MUST ignore any incoming value.  It is RECOMMENDED that),
    CONTENT#5582(   endpoints set the spin bit to a random value either chosen),
    CONTENT#5583(   independently for each packet or chosen independently for each),
    CONTENT#5584(   connection ID.),
      BREAK#5585,
    CONTENT#5586(   If the spin bit is enabled for the connection, the endpoint maintains),
    CONTENT#5587(   a spin value for each network path and sets the spin bit in the),
    CONTENT#5588(   packet header to the currently stored value when a 1-RTT packet is),
    CONTENT#5589(   sent on that path.  The spin value is initialized to 0 in the),
    CONTENT#5590(   endpoint for each network path.  Each endpoint also remembers the),
    CONTENT#5591(   highest packet number seen from its peer on each path.),
      BREAK#5592,
    CONTENT#5593(   When a server receives a 1-RTT packet that increases the highest),
    CONTENT#5594(   packet number seen by the server from the client on a given network),
    CONTENT#5595(   path, it sets the spin value for that path to be equal to the spin),
    CONTENT#5596(   bit in the received packet.),
      BREAK#5597,
    CONTENT#5598(   When a client receives a 1-RTT packet that increases the highest),
    CONTENT#5599(   packet number seen by the client from the server on a given network),
    CONTENT#5600(   path, it sets the spin value for that path to the inverse of the spin),
    CONTENT#5601(   bit in the received packet.),
      BREAK#5602,
    CONTENT#5603(   An endpoint resets the spin value for a network path to 0 when),
    CONTENT#5604(   changing the connection ID being used on that network path.),
      BREAK#5605,
    SECTION#5606(id=18, title=Transport Parameter Encoding),
      BREAK#5607,
    CONTENT#5608(   The extension_data field of the quic_transport_parameters extension),
    CONTENT#5609(   defined in [QUIC-TLS] contains the QUIC transport parameters.  They),
    CONTENT#5610(   are encoded as a sequence of transport parameters, as shown in),
    CONTENT#5611(   Figure 20:),
      BREAK#5612,
    CONTENT#5613(   Transport Parameters {),
    CONTENT#5614(     Transport Parameter (..) ...,),
    CONTENT#5615(   }),
      BREAK#5616,
    CONTENT#5617(                Figure 20: Sequence of Transport Parameters),
      BREAK#5618,
    CONTENT#5619(   Each transport parameter is encoded as an (identifier, length, value)),
    CONTENT#5620(   tuple, as shown in Figure 21:),
      BREAK#5621,
    CONTENT#5622(   Transport Parameter {),
    CONTENT#5623(     Transport Parameter ID (i),),
    CONTENT#5624(     Transport Parameter Length (i),),
    CONTENT#5625(     Transport Parameter Value (..),),
    CONTENT#5626(   }),
      BREAK#5627,
    CONTENT#5628(                  Figure 21: Transport Parameter Encoding),
      BREAK#5629,
    CONTENT#5630(   The Transport Parameter Length field contains the length of the),
    CONTENT#5631(   Transport Parameter Value field in bytes.),
      BREAK#5632,
    CONTENT#5633(   QUIC encodes transport parameters into a sequence of bytes, which is),
    CONTENT#5634(   then included in the cryptographic handshake.),
      BREAK#5635,
    SECTION#5636(id=18.1, title=Reserved Transport Parameters),
      BREAK#5637,
    CONTENT#5638(   Transport parameters with an identifier of the form "31 * N + 27" for),
    CONTENT#5639(   integer values of N are reserved to exercise the requirement that),
    CONTENT#5640(   unknown transport parameters be ignored.  These transport parameters),
    CONTENT#5641(   have no semantics and can carry arbitrary values.),
      BREAK#5642,
    SECTION#5643(id=18.2, title=Transport Parameter Definitions),
      BREAK#5644,
    CONTENT#5645(   This section details the transport parameters defined in this),
    CONTENT#5646(   document.),
      BREAK#5647,
    CONTENT#5648(   Many transport parameters listed here have integer values.  Those),
    CONTENT#5649(   transport parameters that are identified as integers use a variable-),
    CONTENT#5650(   length integer encoding; see Section 16.  Transport parameters have a),
    CONTENT#5651(   default value of 0 if the transport parameter is absent, unless),
    CONTENT#5652(   otherwise stated.),
      BREAK#5653,
    CONTENT#5654(   The following transport parameters are defined:),
      BREAK#5655,
    CONTENT#5656(   original_destination_connection_id (0x00):  This parameter is the),
    CONTENT#5657(      value of the Destination Connection ID field from the first),
    CONTENT#5658(      Initial packet sent by the client; see Section 7.3.  This),
    CONTENT#5659(      transport parameter is only sent by a server.),
      BREAK#5660,
    CONTENT#5661(   max_idle_timeout (0x01):  The maximum idle timeout is a value in),
    CONTENT#5662(      milliseconds that is encoded as an integer; see (Section 10.1).),
    CONTENT#5663(      Idle timeout is disabled when both endpoints omit this transport),
    CONTENT#5664(      parameter or specify a value of 0.),
      BREAK#5665,
    CONTENT#5666(   stateless_reset_token (0x02):  A stateless reset token is used in),
    CONTENT#5667(      verifying a stateless reset; see Section 10.3.  This parameter is),
    CONTENT#5668(      a sequence of 16 bytes.  This transport parameter MUST NOT be sent),
    CONTENT#5669(      by a client but MAY be sent by a server.  A server that does not),
    CONTENT#5670(      send this transport parameter cannot use stateless reset),
    CONTENT#5671(      (Section 10.3) for the connection ID negotiated during the),
    CONTENT#5672(      handshake.),
      BREAK#5673,
    CONTENT#5674(   max_udp_payload_size (0x03):  The maximum UDP payload size parameter),
    CONTENT#5675(      is an integer value that limits the size of UDP payloads that the),
    CONTENT#5676(      endpoint is willing to receive.  UDP datagrams with payloads),
    CONTENT#5677(      larger than this limit are not likely to be processed by the),
    CONTENT#5678(      receiver.),
      BREAK#5679,
    CONTENT#5680(      The default for this parameter is the maximum permitted UDP),
    CONTENT#5681(      payload of 65527.  Values below 1200 are invalid.),
      BREAK#5682,
    CONTENT#5683(      This limit does act as an additional constraint on datagram size),
    CONTENT#5684(      in the same way as the path MTU, but it is a property of the),
    CONTENT#5685(      endpoint and not the path; see Section 14.  It is expected that),
    CONTENT#5686(      this is the space an endpoint dedicates to holding incoming),
    CONTENT#5687(      packets.),
      BREAK#5688,
    CONTENT#5689(   initial_max_data (0x04):  The initial maximum data parameter is an),
    CONTENT#5690(      integer value that contains the initial value for the maximum),
    CONTENT#5691(      amount of data that can be sent on the connection.  This is),
    CONTENT#5692(      equivalent to sending a MAX_DATA (Section 19.9) for the connection),
    CONTENT#5693(      immediately after completing the handshake.),
      BREAK#5694,
    CONTENT#5695(   initial_max_stream_data_bidi_local (0x05):  This parameter is an),
    CONTENT#5696(      integer value specifying the initial flow control limit for),
    CONTENT#5697(      locally initiated bidirectional streams.  This limit applies to),
    CONTENT#5698(      newly created bidirectional streams opened by the endpoint that),
    CONTENT#5699(      sends the transport parameter.  In client transport parameters,),
    CONTENT#5700(      this applies to streams with an identifier with the least),
    CONTENT#5701(      significant two bits set to 0x00; in server transport parameters,),
    CONTENT#5702(      this applies to streams with the least significant two bits set to),
    CONTENT#5703(      0x01.),
      BREAK#5704,
    CONTENT#5705(   initial_max_stream_data_bidi_remote (0x06):  This parameter is an),
    CONTENT#5706(      integer value specifying the initial flow control limit for peer-),
    CONTENT#5707(      initiated bidirectional streams.  This limit applies to newly),
    CONTENT#5708(      created bidirectional streams opened by the endpoint that receives),
    CONTENT#5709(      the transport parameter.  In client transport parameters, this),
    CONTENT#5710(      applies to streams with an identifier with the least significant),
    CONTENT#5711(      two bits set to 0x01; in server transport parameters, this applies),
    CONTENT#5712(      to streams with the least significant two bits set to 0x00.),
      BREAK#5713,
    CONTENT#5714(   initial_max_stream_data_uni (0x07):  This parameter is an integer),
    CONTENT#5715(      value specifying the initial flow control limit for unidirectional),
    CONTENT#5716(      streams.  This limit applies to newly created unidirectional),
    CONTENT#5717(      streams opened by the endpoint that receives the transport),
    CONTENT#5718(      parameter.  In client transport parameters, this applies to),
    CONTENT#5719(      streams with an identifier with the least significant two bits set),
    CONTENT#5720(      to 0x03; in server transport parameters, this applies to streams),
    CONTENT#5721(      with the least significant two bits set to 0x02.),
      BREAK#5722,
    CONTENT#5723(   initial_max_streams_bidi (0x08):  The initial maximum bidirectional),
    CONTENT#5724(      streams parameter is an integer value that contains the initial),
    CONTENT#5725(      maximum number of bidirectional streams the endpoint that receives),
    CONTENT#5726(      this transport parameter is permitted to initiate.  If this),
    CONTENT#5727(      parameter is absent or zero, the peer cannot open bidirectional),
    CONTENT#5728(      streams until a MAX_STREAMS frame is sent.  Setting this parameter),
    CONTENT#5729(      is equivalent to sending a MAX_STREAMS (Section 19.11) of the),
    CONTENT#5730(      corresponding type with the same value.),
      BREAK#5731,
    CONTENT#5732(   initial_max_streams_uni (0x09):  The initial maximum unidirectional),
    CONTENT#5733(      streams parameter is an integer value that contains the initial),
    CONTENT#5734(      maximum number of unidirectional streams the endpoint that),
    CONTENT#5735(      receives this transport parameter is permitted to initiate.  If),
    CONTENT#5736(      this parameter is absent or zero, the peer cannot open),
    CONTENT#5737(      unidirectional streams until a MAX_STREAMS frame is sent.  Setting),
    CONTENT#5738(      this parameter is equivalent to sending a MAX_STREAMS),
    CONTENT#5739(      (Section 19.11) of the corresponding type with the same value.),
      BREAK#5740,
    CONTENT#5741(   ack_delay_exponent (0x0a):  The acknowledgment delay exponent is an),
    CONTENT#5742(      integer value indicating an exponent used to decode the ACK Delay),
    CONTENT#5743(      field in the ACK frame (Section 19.3).  If this value is absent, a),
    CONTENT#5744(      default value of 3 is assumed (indicating a multiplier of 8).),
    CONTENT#5745(      Values above 20 are invalid.),
      BREAK#5746,
    CONTENT#5747(   max_ack_delay (0x0b):  The maximum acknowledgment delay is an integer),
    CONTENT#5748(      value indicating the maximum amount of time in milliseconds by),
    CONTENT#5749(      which the endpoint will delay sending acknowledgments.  This value),
    CONTENT#5750(      SHOULD include the receiver's expected delays in alarms firing.),
    CONTENT#5751(      For example, if a receiver sets a timer for 5ms and alarms),
    CONTENT#5752(      commonly fire up to 1ms late, then it should send a max_ack_delay),
    CONTENT#5753(      of 6ms.  If this value is absent, a default of 25 milliseconds is),
    CONTENT#5754(      assumed.  Values of 2^14 or greater are invalid.),
      BREAK#5755,
    CONTENT#5756(   disable_active_migration (0x0c):  The disable active migration),
    CONTENT#5757(      transport parameter is included if the endpoint does not support),
    CONTENT#5758(      active connection migration (Section 9) on the address being used),
    CONTENT#5759(      during the handshake.  An endpoint that receives this transport),
    CONTENT#5760(      parameter MUST NOT use a new local address when sending to the),
    CONTENT#5761(      address that the peer used during the handshake.  This transport),
    CONTENT#5762(      parameter does not prohibit connection migration after a client),
    CONTENT#5763(      has acted on a preferred_address transport parameter.  This),
    CONTENT#5764(      parameter is a zero-length value.),
      BREAK#5765,
    CONTENT#5766(   preferred_address (0x0d):  The server's preferred address is used to),
    CONTENT#5767(      effect a change in server address at the end of the handshake, as),
    CONTENT#5768(      described in Section 9.6.  This transport parameter is only sent),
    CONTENT#5769(      by a server.  Servers MAY choose to only send a preferred address),
    CONTENT#5770(      of one address family by sending an all-zero address and port),
    CONTENT#5771(      (0.0.0.0:0 or [::]:0) for the other family.  IP addresses are),
    CONTENT#5772(      encoded in network byte order.),
      BREAK#5773,
    CONTENT#5774(      The preferred_address transport parameter contains an address and),
    CONTENT#5775(      port for both IPv4 and IPv6.  The four-byte IPv4 Address field is),
    CONTENT#5776(      followed by the associated two-byte IPv4 Port field.  This is),
    CONTENT#5777(      followed by a 16-byte IPv6 Address field and two-byte IPv6 Port),
    CONTENT#5778(      field.  After address and port pairs, a Connection ID Length field),
    CONTENT#5779(      describes the length of the following Connection ID field.),
    CONTENT#5780(      Finally, a 16-byte Stateless Reset Token field includes the),
    CONTENT#5781(      stateless reset token associated with the connection ID.  The),
    CONTENT#5782(      format of this transport parameter is shown in Figure 22 below.),
      BREAK#5783,
    CONTENT#5784(      The Connection ID field and the Stateless Reset Token field),
    CONTENT#5785(      contain an alternative connection ID that has a sequence number of),
    CONTENT#5786(      1; see Section 5.1.1.  Having these values sent alongside the),
    CONTENT#5787(      preferred address ensures that there will be at least one unused),
    CONTENT#5788(      active connection ID when the client initiates migration to the),
    CONTENT#5789(      preferred address.),
      BREAK#5790,
    CONTENT#5791(      The Connection ID and Stateless Reset Token fields of a preferred),
    CONTENT#5792(      address are identical in syntax and semantics to the corresponding),
    CONTENT#5793(      fields of a NEW_CONNECTION_ID frame (Section 19.15).  A server),
    CONTENT#5794(      that chooses a zero-length connection ID MUST NOT provide a),
    CONTENT#5795(      preferred address.  Similarly, a server MUST NOT include a zero-),
    CONTENT#5796(      length connection ID in this transport parameter.  A client MUST),
    CONTENT#5797(      treat a violation of these requirements as a connection error of),
    CONTENT#5798(      type TRANSPORT_PARAMETER_ERROR.),
      BREAK#5799,
    CONTENT#5800(   Preferred Address {),
    CONTENT#5801(     IPv4 Address (32),),
    CONTENT#5802(     IPv4 Port (16),),
    CONTENT#5803(     IPv6 Address (128),),
    CONTENT#5804(     IPv6 Port (16),),
    CONTENT#5805(     Connection ID Length (8),),
    CONTENT#5806(     Connection ID (..),),
    CONTENT#5807(     Stateless Reset Token (128),),
    CONTENT#5808(   }),
      BREAK#5809,
    CONTENT#5810(                    Figure 22: Preferred Address Format),
      BREAK#5811,
    CONTENT#5812(   active_connection_id_limit (0x0e):  This is an integer value),
    CONTENT#5813(      specifying the maximum number of connection IDs from the peer that),
    CONTENT#5814(      an endpoint is willing to store.  This value includes the),
    CONTENT#5815(      connection ID received during the handshake, that received in the),
    CONTENT#5816(      preferred_address transport parameter, and those received in),
    CONTENT#5817(      NEW_CONNECTION_ID frames.  The value of the),
    CONTENT#5818(      active_connection_id_limit parameter MUST be at least 2.  An),
    CONTENT#5819(      endpoint that receives a value less than 2 MUST close the),
    CONTENT#5820(      connection with an error of type TRANSPORT_PARAMETER_ERROR.  If),
    CONTENT#5821(      this transport parameter is absent, a default of 2 is assumed.  If),
    CONTENT#5822(      an endpoint issues a zero-length connection ID, it will never send),
    CONTENT#5823(      a NEW_CONNECTION_ID frame and therefore ignores the),
    CONTENT#5824(      active_connection_id_limit value received from its peer.),
      BREAK#5825,
    CONTENT#5826(   initial_source_connection_id (0x0f):  This is the value that the),
    CONTENT#5827(      endpoint included in the Source Connection ID field of the first),
    CONTENT#5828(      Initial packet it sends for the connection; see Section 7.3.),
      BREAK#5829,
    CONTENT#5830(   retry_source_connection_id (0x10):  This is the value that the server),
    CONTENT#5831(      included in the Source Connection ID field of a Retry packet; see),
    CONTENT#5832(      Section 7.3.  This transport parameter is only sent by a server.),
      BREAK#5833,
    CONTENT#5834(   If present, transport parameters that set initial per-stream flow),
    CONTENT#5835(   control limits (initial_max_stream_data_bidi_local,),
    CONTENT#5836(   initial_max_stream_data_bidi_remote, and initial_max_stream_data_uni)),
    CONTENT#5837(   are equivalent to sending a MAX_STREAM_DATA frame (Section 19.10) on),
    CONTENT#5838(   every stream of the corresponding type immediately after opening.  If),
    CONTENT#5839(   the transport parameter is absent, streams of that type start with a),
    CONTENT#5840(   flow control limit of 0.),
      BREAK#5841,
    CONTENT#5842(   A client MUST NOT include any server-only transport parameter:),
    CONTENT#5843(   original_destination_connection_id, preferred_address,),
    CONTENT#5844(   retry_source_connection_id, or stateless_reset_token.  A server MUST),
    CONTENT#5845(   treat receipt of any of these transport parameters as a connection),
    CONTENT#5846(   error of type TRANSPORT_PARAMETER_ERROR.),
      BREAK#5847,
    SECTION#5848(id=19, title=Frame Types and Formats),
      BREAK#5849,
    CONTENT#5850(   As described in Section 12.4, packets contain one or more frames.),
    CONTENT#5851(   This section describes the format and semantics of the core QUIC),
    CONTENT#5852(   frame types.),
      BREAK#5853,
    SECTION#5854(id=19.1, title=PADDING Frames),
      BREAK#5855,
    CONTENT#5856(   A PADDING frame (type=0x00) has no semantic value.  PADDING frames),
    CONTENT#5857(   can be used to increase the size of a packet.  Padding can be used to),
    CONTENT#5858(   increase an Initial packet to the minimum required size or to provide),
    CONTENT#5859(   protection against traffic analysis for protected packets.),
      BREAK#5860,
    CONTENT#5861(   PADDING frames are formatted as shown in Figure 23, which shows that),
    CONTENT#5862(   PADDING frames have no content.  That is, a PADDING frame consists of),
    CONTENT#5863(   the single byte that identifies the frame as a PADDING frame.),
      BREAK#5864,
    CONTENT#5865(   PADDING Frame {),
    CONTENT#5866(     Type (i) = 0x00,),
    CONTENT#5867(   }),
      BREAK#5868,
    CONTENT#5869(                      Figure 23: PADDING Frame Format),
      BREAK#5870,
    SECTION#5871(id=19.2, title=PING Frames),
      BREAK#5872,
    CONTENT#5873(   Endpoints can use PING frames (type=0x01) to verify that their peers),
    CONTENT#5874(   are still alive or to check reachability to the peer.),
      BREAK#5875,
    CONTENT#5876(   PING frames are formatted as shown in Figure 24, which shows that),
    CONTENT#5877(   PING frames have no content.),
      BREAK#5878,
    CONTENT#5879(   PING Frame {),
    CONTENT#5880(     Type (i) = 0x01,),
    CONTENT#5881(   }),
      BREAK#5882,
    CONTENT#5883(                        Figure 24: PING Frame Format),
      BREAK#5884,
    CONTENT#5885(   The receiver of a PING frame simply needs to acknowledge the packet),
    CONTENT#5886(   containing this frame.),
      BREAK#5887,
    CONTENT#5888(   The PING frame can be used to keep a connection alive when an),
    CONTENT#5889(   application or application protocol wishes to prevent the connection),
    CONTENT#5890(   from timing out; see Section 10.1.2.),
      BREAK#5891,
    SECTION#5892(id=19.3, title=ACK Frames),
      BREAK#5893,
    CONTENT#5894(   Receivers send ACK frames (types 0x02 and 0x03) to inform senders of),
    CONTENT#5895(   packets they have received and processed.  The ACK frame contains one),
    CONTENT#5896(   or more ACK Ranges.  ACK Ranges identify acknowledged packets.  If),
    CONTENT#5897(   the frame type is 0x03, ACK frames also contain the cumulative count),
    CONTENT#5898(   of QUIC packets with associated ECN marks received on the connection),
    CONTENT#5899(   up until this point.  QUIC implementations MUST properly handle both),
    CONTENT#5900(   types, and, if they have enabled ECN for packets they send, they),
    CONTENT#5901(   SHOULD use the information in the ECN section to manage their),
    CONTENT#5902(   congestion state.),
      BREAK#5903,
    CONTENT#5904(   QUIC acknowledgments are irrevocable.  Once acknowledged, a packet),
    CONTENT#5905(   remains acknowledged, even if it does not appear in a future ACK),
    CONTENT#5906(   frame.  This is unlike reneging for TCP Selective Acknowledgments),
    CONTENT#5907(   (SACKs) [RFC2018].),
      BREAK#5908,
    CONTENT#5909(   Packets from different packet number spaces can be identified using),
    CONTENT#5910(   the same numeric value.  An acknowledgment for a packet needs to),
    CONTENT#5911(   indicate both a packet number and a packet number space.  This is),
    CONTENT#5912(   accomplished by having each ACK frame only acknowledge packet numbers),
    CONTENT#5913(   in the same space as the packet in which the ACK frame is contained.),
      BREAK#5914,
    CONTENT#5915(   Version Negotiation and Retry packets cannot be acknowledged because),
    CONTENT#5916(   they do not contain a packet number.  Rather than relying on ACK),
    CONTENT#5917(   frames, these packets are implicitly acknowledged by the next Initial),
    CONTENT#5918(   packet sent by the client.),
      BREAK#5919,
    CONTENT#5920(   ACK frames are formatted as shown in Figure 25.),
      BREAK#5921,
    CONTENT#5922(   ACK Frame {),
    CONTENT#5923(     Type (i) = 0x02..0x03,),
    CONTENT#5924(     Largest Acknowledged (i),),
    CONTENT#5925(     ACK Delay (i),),
    CONTENT#5926(     ACK Range Count (i),),
    CONTENT#5927(     First ACK Range (i),),
    CONTENT#5928(     ACK Range (..) ...,),
    CONTENT#5929(     [ECN Counts (..)],),
    CONTENT#5930(   }),
      BREAK#5931,
    CONTENT#5932(                        Figure 25: ACK Frame Format),
      BREAK#5933,
    CONTENT#5934(   ACK frames contain the following fields:),
      BREAK#5935,
    CONTENT#5936(   Largest Acknowledged:  A variable-length integer representing the),
    CONTENT#5937(      largest packet number the peer is acknowledging; this is usually),
    CONTENT#5938(      the largest packet number that the peer has received prior to),
    CONTENT#5939(      generating the ACK frame.  Unlike the packet number in the QUIC),
    CONTENT#5940(      long or short header, the value in an ACK frame is not truncated.),
      BREAK#5941,
    CONTENT#5942(   ACK Delay:  A variable-length integer encoding the acknowledgment),
    CONTENT#5943(      delay in microseconds; see Section 13.2.5.  It is decoded by),
    CONTENT#5944(      multiplying the value in the field by 2 to the power of the),
    CONTENT#5945(      ack_delay_exponent transport parameter sent by the sender of the),
    CONTENT#5946(      ACK frame; see Section 18.2.  Compared to simply expressing the),
    CONTENT#5947(      delay as an integer, this encoding allows for a larger range of),
    CONTENT#5948(      values within the same number of bytes, at the cost of lower),
    CONTENT#5949(      resolution.),
      BREAK#5950,
    CONTENT#5951(   ACK Range Count:  A variable-length integer specifying the number of),
    CONTENT#5952(      ACK Range fields in the frame.),
      BREAK#5953,
    CONTENT#5954(   First ACK Range:  A variable-length integer indicating the number of),
    CONTENT#5955(      contiguous packets preceding the Largest Acknowledged that are),
    CONTENT#5956(      being acknowledged.  That is, the smallest packet acknowledged in),
    CONTENT#5957(      the range is determined by subtracting the First ACK Range value),
    CONTENT#5958(      from the Largest Acknowledged field.),
      BREAK#5959,
    CONTENT#5960(   ACK Ranges:  Contains additional ranges of packets that are),
    CONTENT#5961(      alternately not acknowledged (Gap) and acknowledged (ACK Range);),
    CONTENT#5962(      see Section 19.3.1.),
      BREAK#5963,
    CONTENT#5964(   ECN Counts:  The three ECN counts; see Section 19.3.2.),
      BREAK#5965,
    SECTION#5966(id=19.3.1, title=ACK Ranges),
      BREAK#5967,
    CONTENT#5968(   Each ACK Range consists of alternating Gap and ACK Range Length),
    CONTENT#5969(   values in descending packet number order.  ACK Ranges can be),
    CONTENT#5970(   repeated.  The number of Gap and ACK Range Length values is),
    CONTENT#5971(   determined by the ACK Range Count field; one of each value is present),
    CONTENT#5972(   for each value in the ACK Range Count field.),
      BREAK#5973,
    CONTENT#5974(   ACK Ranges are structured as shown in Figure 26.),
      BREAK#5975,
    CONTENT#5976(   ACK Range {),
    CONTENT#5977(     Gap (i),),
    CONTENT#5978(     ACK Range Length (i),),
    CONTENT#5979(   }),
      BREAK#5980,
    CONTENT#5981(                           Figure 26: ACK Ranges),
      BREAK#5982,
    CONTENT#5983(   The fields that form each ACK Range are:),
      BREAK#5984,
    CONTENT#5985(   Gap:  A variable-length integer indicating the number of contiguous),
    CONTENT#5986(      unacknowledged packets preceding the packet number one lower than),
    CONTENT#5987(      the smallest in the preceding ACK Range.),
      BREAK#5988,
    CONTENT#5989(   ACK Range Length:  A variable-length integer indicating the number of),
    CONTENT#5990(      contiguous acknowledged packets preceding the largest packet),
    CONTENT#5991(      number, as determined by the preceding Gap.),
      BREAK#5992,
    CONTENT#5993(   Gap and ACK Range Length values use a relative integer encoding for),
    CONTENT#5994(   efficiency.  Though each encoded value is positive, the values are),
    CONTENT#5995(   subtracted, so that each ACK Range describes progressively lower-),
    CONTENT#5996(   numbered packets.),
      BREAK#5997,
    CONTENT#5998(   Each ACK Range acknowledges a contiguous range of packets by),
    CONTENT#5999(   indicating the number of acknowledged packets that precede the),
    CONTENT#6000(   largest packet number in that range.  A value of 0 indicates that),
    CONTENT#6001(   only the largest packet number is acknowledged.  Larger ACK Range),
    CONTENT#6002(   values indicate a larger range, with corresponding lower values for),
    CONTENT#6003(   the smallest packet number in the range.  Thus, given a largest),
    CONTENT#6004(   packet number for the range, the smallest value is determined by the),
    CONTENT#6005(   following formula:),
      BREAK#6006,
    CONTENT#6007(      smallest = largest - ack_range),
      BREAK#6008,
    CONTENT#6009(   An ACK Range acknowledges all packets between the smallest packet),
    CONTENT#6010(   number and the largest, inclusive.),
      BREAK#6011,
    CONTENT#6012(   The largest value for an ACK Range is determined by cumulatively),
    CONTENT#6013(   subtracting the size of all preceding ACK Range Lengths and Gaps.),
      BREAK#6014,
    CONTENT#6015(   Each Gap indicates a range of packets that are not being),
    CONTENT#6016(   acknowledged.  The number of packets in the gap is one higher than),
    CONTENT#6017(   the encoded value of the Gap field.),
      BREAK#6018,
    CONTENT#6019(   The value of the Gap field establishes the largest packet number),
    CONTENT#6020(   value for the subsequent ACK Range using the following formula:),
      BREAK#6021,
    CONTENT#6022(      largest = previous_smallest - gap - 2),
      BREAK#6023,
    CONTENT#6024(   If any computed packet number is negative, an endpoint MUST generate),
    CONTENT#6025(   a connection error of type FRAME_ENCODING_ERROR.),
      BREAK#6026,
    SECTION#6027(id=19.3.2, title=ECN Counts),
      BREAK#6028,
    CONTENT#6029(   The ACK frame uses the least significant bit of the type value (that),
    CONTENT#6030(   is, type 0x03) to indicate ECN feedback and report receipt of QUIC),
    CONTENT#6031(   packets with associated ECN codepoints of ECT(0), ECT(1), or ECN-CE),
    CONTENT#6032(   in the packet's IP header.  ECN counts are only present when the ACK),
    CONTENT#6033(   frame type is 0x03.),
      BREAK#6034,
    CONTENT#6035(   When present, there are three ECN counts, as shown in Figure 27.),
      BREAK#6036,
    CONTENT#6037(   ECN Counts {),
    CONTENT#6038(     ECT0 Count (i),),
    CONTENT#6039(     ECT1 Count (i),),
    CONTENT#6040(     ECN-CE Count (i),),
    CONTENT#6041(   }),
      BREAK#6042,
    CONTENT#6043(                        Figure 27: ECN Count Format),
      BREAK#6044,
    CONTENT#6045(   The ECN count fields are:),
      BREAK#6046,
    CONTENT#6047(   ECT0 Count:  A variable-length integer representing the total number),
    CONTENT#6048(      of packets received with the ECT(0) codepoint in the packet number),
    CONTENT#6049(      space of the ACK frame.),
      BREAK#6050,
    CONTENT#6051(   ECT1 Count:  A variable-length integer representing the total number),
    CONTENT#6052(      of packets received with the ECT(1) codepoint in the packet number),
    CONTENT#6053(      space of the ACK frame.),
      BREAK#6054,
    CONTENT#6055(   ECN-CE Count:  A variable-length integer representing the total),
    CONTENT#6056(      number of packets received with the ECN-CE codepoint in the packet),
    CONTENT#6057(      number space of the ACK frame.),
      BREAK#6058,
    CONTENT#6059(   ECN counts are maintained separately for each packet number space.),
      BREAK#6060,
    SECTION#6061(id=19.4, title=RESET_STREAM Frames),
      BREAK#6062,
    CONTENT#6063(   An endpoint uses a RESET_STREAM frame (type=0x04) to abruptly),
    CONTENT#6064(   terminate the sending part of a stream.),
      BREAK#6065,
    CONTENT#6066(   After sending a RESET_STREAM, an endpoint ceases transmission and),
    CONTENT#6067(   retransmission of STREAM frames on the identified stream.  A receiver),
    CONTENT#6068(   of RESET_STREAM can discard any data that it already received on that),
    CONTENT#6069(   stream.),
      BREAK#6070,
    CONTENT#6071(   An endpoint that receives a RESET_STREAM frame for a send-only stream),
    CONTENT#6072(   MUST terminate the connection with error STREAM_STATE_ERROR.),
      BREAK#6073,
    CONTENT#6074(   RESET_STREAM frames are formatted as shown in Figure 28.),
      BREAK#6075,
    CONTENT#6076(   RESET_STREAM Frame {),
    CONTENT#6077(     Type (i) = 0x04,),
    CONTENT#6078(     Stream ID (i),),
    CONTENT#6079(     Application Protocol Error Code (i),),
    CONTENT#6080(     Final Size (i),),
    CONTENT#6081(   }),
      BREAK#6082,
    CONTENT#6083(                    Figure 28: RESET_STREAM Frame Format),
      BREAK#6084,
    CONTENT#6085(   RESET_STREAM frames contain the following fields:),
      BREAK#6086,
    CONTENT#6087(   Stream ID:  A variable-length integer encoding of the stream ID of),
    CONTENT#6088(      the stream being terminated.),
      BREAK#6089,
    CONTENT#6090(   Application Protocol Error Code:  A variable-length integer),
    CONTENT#6091(      containing the application protocol error code (see Section 20.2)),
    CONTENT#6092(      that indicates why the stream is being closed.),
      BREAK#6093,
    CONTENT#6094(   Final Size:  A variable-length integer indicating the final size of),
    CONTENT#6095(      the stream by the RESET_STREAM sender, in units of bytes; see),
    CONTENT#6096(      Section 4.5.),
      BREAK#6097,
    SECTION#6098(id=19.5, title=STOP_SENDING Frames),
      BREAK#6099,
    CONTENT#6100(   An endpoint uses a STOP_SENDING frame (type=0x05) to communicate that),
    CONTENT#6101(   incoming data is being discarded on receipt per application request.),
    CONTENT#6102(   STOP_SENDING requests that a peer cease transmission on a stream.),
      BREAK#6103,
    CONTENT#6104(   A STOP_SENDING frame can be sent for streams in the "Recv" or "Size),
    CONTENT#6105(   Known" states; see Section 3.2.  Receiving a STOP_SENDING frame for a),
    CONTENT#6106(   locally initiated stream that has not yet been created MUST be),
    CONTENT#6107(   treated as a connection error of type STREAM_STATE_ERROR.  An),
    CONTENT#6108(   endpoint that receives a STOP_SENDING frame for a receive-only stream),
    CONTENT#6109(   MUST terminate the connection with error STREAM_STATE_ERROR.),
      BREAK#6110,
    CONTENT#6111(   STOP_SENDING frames are formatted as shown in Figure 29.),
      BREAK#6112,
    CONTENT#6113(   STOP_SENDING Frame {),
    CONTENT#6114(     Type (i) = 0x05,),
    CONTENT#6115(     Stream ID (i),),
    CONTENT#6116(     Application Protocol Error Code (i),),
    CONTENT#6117(   }),
      BREAK#6118,
    CONTENT#6119(                    Figure 29: STOP_SENDING Frame Format),
      BREAK#6120,
    CONTENT#6121(   STOP_SENDING frames contain the following fields:),
      BREAK#6122,
    CONTENT#6123(   Stream ID:  A variable-length integer carrying the stream ID of the),
    CONTENT#6124(      stream being ignored.),
      BREAK#6125,
    CONTENT#6126(   Application Protocol Error Code:  A variable-length integer),
    CONTENT#6127(      containing the application-specified reason the sender is ignoring),
    CONTENT#6128(      the stream; see Section 20.2.),
      BREAK#6129,
    SECTION#6130(id=19.6, title=CRYPTO Frames),
      BREAK#6131,
    CONTENT#6132(   A CRYPTO frame (type=0x06) is used to transmit cryptographic),
    CONTENT#6133(   handshake messages.  It can be sent in all packet types except 0-RTT.),
    CONTENT#6134(   The CRYPTO frame offers the cryptographic protocol an in-order stream),
    CONTENT#6135(   of bytes.  CRYPTO frames are functionally identical to STREAM frames,),
    CONTENT#6136(   except that they do not bear a stream identifier; they are not flow),
    CONTENT#6137(   controlled; and they do not carry markers for optional offset,),
    CONTENT#6138(   optional length, and the end of the stream.),
      BREAK#6139,
    CONTENT#6140(   CRYPTO frames are formatted as shown in Figure 30.),
      BREAK#6141,
    CONTENT#6142(   CRYPTO Frame {),
    CONTENT#6143(     Type (i) = 0x06,),
    CONTENT#6144(     Offset (i),),
    CONTENT#6145(     Length (i),),
    CONTENT#6146(     Crypto Data (..),),
    CONTENT#6147(   }),
      BREAK#6148,
    CONTENT#6149(                       Figure 30: CRYPTO Frame Format),
      BREAK#6150,
    CONTENT#6151(   CRYPTO frames contain the following fields:),
      BREAK#6152,
    CONTENT#6153(   Offset:  A variable-length integer specifying the byte offset in the),
    CONTENT#6154(      stream for the data in this CRYPTO frame.),
      BREAK#6155,
    CONTENT#6156(   Length:  A variable-length integer specifying the length of the),
    CONTENT#6157(      Crypto Data field in this CRYPTO frame.),
      BREAK#6158,
    CONTENT#6159(   Crypto Data:  The cryptographic message data.),
      BREAK#6160,
    CONTENT#6161(   There is a separate flow of cryptographic handshake data in each),
    CONTENT#6162(   encryption level, each of which starts at an offset of 0.  This),
    CONTENT#6163(   implies that each encryption level is treated as a separate CRYPTO),
    CONTENT#6164(   stream of data.),
      BREAK#6165,
    CONTENT#6166(   The largest offset delivered on a stream -- the sum of the offset and),
    CONTENT#6167(   data length -- cannot exceed 2^62-1.  Receipt of a frame that exceeds),
    CONTENT#6168(   this limit MUST be treated as a connection error of type),
    CONTENT#6169(   FRAME_ENCODING_ERROR or CRYPTO_BUFFER_EXCEEDED.),
      BREAK#6170,
    CONTENT#6171(   Unlike STREAM frames, which include a stream ID indicating to which),
    CONTENT#6172(   stream the data belongs, the CRYPTO frame carries data for a single),
    CONTENT#6173(   stream per encryption level.  The stream does not have an explicit),
    CONTENT#6174(   end, so CRYPTO frames do not have a FIN bit.),
      BREAK#6175,
    SECTION#6176(id=19.7, title=NEW_TOKEN Frames),
      BREAK#6177,
    CONTENT#6178(   A server sends a NEW_TOKEN frame (type=0x07) to provide the client),
    CONTENT#6179(   with a token to send in the header of an Initial packet for a future),
    CONTENT#6180(   connection.),
      BREAK#6181,
    CONTENT#6182(   NEW_TOKEN frames are formatted as shown in Figure 31.),
      BREAK#6183,
    CONTENT#6184(   NEW_TOKEN Frame {),
    CONTENT#6185(     Type (i) = 0x07,),
    CONTENT#6186(     Token Length (i),),
    CONTENT#6187(     Token (..),),
    CONTENT#6188(   }),
      BREAK#6189,
    CONTENT#6190(                     Figure 31: NEW_TOKEN Frame Format),
      BREAK#6191,
    CONTENT#6192(   NEW_TOKEN frames contain the following fields:),
      BREAK#6193,
    CONTENT#6194(   Token Length:  A variable-length integer specifying the length of the),
    CONTENT#6195(      token in bytes.),
      BREAK#6196,
    CONTENT#6197(   Token:  An opaque blob that the client can use with a future Initial),
    CONTENT#6198(      packet.  The token MUST NOT be empty.  A client MUST treat receipt),
    CONTENT#6199(      of a NEW_TOKEN frame with an empty Token field as a connection),
    CONTENT#6200(      error of type FRAME_ENCODING_ERROR.),
      BREAK#6201,
    CONTENT#6202(   A client might receive multiple NEW_TOKEN frames that contain the),
    CONTENT#6203(   same token value if packets containing the frame are incorrectly),
    CONTENT#6204(   determined to be lost.  Clients are responsible for discarding),
    CONTENT#6205(   duplicate values, which might be used to link connection attempts;),
    CONTENT#6206(   see Section 8.1.3.),
      BREAK#6207,
    CONTENT#6208(   Clients MUST NOT send NEW_TOKEN frames.  A server MUST treat receipt),
    CONTENT#6209(   of a NEW_TOKEN frame as a connection error of type),
    CONTENT#6210(   PROTOCOL_VIOLATION.),
      BREAK#6211,
    SECTION#6212(id=19.8, title=STREAM Frames),
      BREAK#6213,
    CONTENT#6214(   STREAM frames implicitly create a stream and carry stream data.  The),
    CONTENT#6215(   Type field in the STREAM frame takes the form 0b00001XXX (or the set),
    CONTENT#6216(   of values from 0x08 to 0x0f).  The three low-order bits of the frame),
    CONTENT#6217(   type determine the fields that are present in the frame:),
      BREAK#6218,
    CONTENT#6219(   *  The OFF bit (0x04) in the frame type is set to indicate that there),
    CONTENT#6220(      is an Offset field present.  When set to 1, the Offset field is),
    CONTENT#6221(      present.  When set to 0, the Offset field is absent and the Stream),
    CONTENT#6222(      Data starts at an offset of 0 (that is, the frame contains the),
    CONTENT#6223(      first bytes of the stream, or the end of a stream that includes no),
    CONTENT#6224(      data).),
      BREAK#6225,
    CONTENT#6226(   *  The LEN bit (0x02) in the frame type is set to indicate that there),
    CONTENT#6227(      is a Length field present.  If this bit is set to 0, the Length),
    CONTENT#6228(      field is absent and the Stream Data field extends to the end of),
    CONTENT#6229(      the packet.  If this bit is set to 1, the Length field is present.),
      BREAK#6230,
    CONTENT#6231(   *  The FIN bit (0x01) indicates that the frame marks the end of the),
    CONTENT#6232(      stream.  The final size of the stream is the sum of the offset and),
    CONTENT#6233(      the length of this frame.),
      BREAK#6234,
    CONTENT#6235(   An endpoint MUST terminate the connection with error),
    CONTENT#6236(   STREAM_STATE_ERROR if it receives a STREAM frame for a locally),
    CONTENT#6237(   initiated stream that has not yet been created, or for a send-only),
    CONTENT#6238(   stream.),
      BREAK#6239,
    CONTENT#6240(   STREAM frames are formatted as shown in Figure 32.),
      BREAK#6241,
    CONTENT#6242(   STREAM Frame {),
    CONTENT#6243(     Type (i) = 0x08..0x0f,),
    CONTENT#6244(     Stream ID (i),),
    CONTENT#6245(     [Offset (i)],),
    CONTENT#6246(     [Length (i)],),
    CONTENT#6247(     Stream Data (..),),
    CONTENT#6248(   }),
      BREAK#6249,
    CONTENT#6250(                       Figure 32: STREAM Frame Format),
      BREAK#6251,
    CONTENT#6252(   STREAM frames contain the following fields:),
      BREAK#6253,
    CONTENT#6254(   Stream ID:  A variable-length integer indicating the stream ID of the),
    CONTENT#6255(      stream; see Section 2.1.),
      BREAK#6256,
    CONTENT#6257(   Offset:  A variable-length integer specifying the byte offset in the),
    CONTENT#6258(      stream for the data in this STREAM frame.  This field is present),
    CONTENT#6259(      when the OFF bit is set to 1.  When the Offset field is absent,),
    CONTENT#6260(      the offset is 0.),
      BREAK#6261,
    CONTENT#6262(   Length:  A variable-length integer specifying the length of the),
    CONTENT#6263(      Stream Data field in this STREAM frame.  This field is present),
    CONTENT#6264(      when the LEN bit is set to 1.  When the LEN bit is set to 0, the),
    CONTENT#6265(      Stream Data field consumes all the remaining bytes in the packet.),
      BREAK#6266,
    CONTENT#6267(   Stream Data:  The bytes from the designated stream to be delivered.),
      BREAK#6268,
    CONTENT#6269(   When a Stream Data field has a length of 0, the offset in the STREAM),
    CONTENT#6270(   frame is the offset of the next byte that would be sent.),
      BREAK#6271,
    CONTENT#6272(   The first byte in the stream has an offset of 0.  The largest offset),
    CONTENT#6273(   delivered on a stream -- the sum of the offset and data length --),
    CONTENT#6274(   cannot exceed 2^62-1, as it is not possible to provide flow control),
    CONTENT#6275(   credit for that data.  Receipt of a frame that exceeds this limit),
    CONTENT#6276(   MUST be treated as a connection error of type FRAME_ENCODING_ERROR or),
    CONTENT#6277(   FLOW_CONTROL_ERROR.),
      BREAK#6278,
    SECTION#6279(id=19.9, title=MAX_DATA Frames),
      BREAK#6280,
    CONTENT#6281(   A MAX_DATA frame (type=0x10) is used in flow control to inform the),
    CONTENT#6282(   peer of the maximum amount of data that can be sent on the connection),
    CONTENT#6283(   as a whole.),
      BREAK#6284,
    CONTENT#6285(   MAX_DATA frames are formatted as shown in Figure 33.),
      BREAK#6286,
    CONTENT#6287(   MAX_DATA Frame {),
    CONTENT#6288(     Type (i) = 0x10,),
    CONTENT#6289(     Maximum Data (i),),
    CONTENT#6290(   }),
      BREAK#6291,
    CONTENT#6292(                      Figure 33: MAX_DATA Frame Format),
      BREAK#6293,
    CONTENT#6294(   MAX_DATA frames contain the following field:),
      BREAK#6295,
    CONTENT#6296(   Maximum Data:  A variable-length integer indicating the maximum),
    CONTENT#6297(      amount of data that can be sent on the entire connection, in units),
    CONTENT#6298(      of bytes.),
      BREAK#6299,
    CONTENT#6300(   All data sent in STREAM frames counts toward this limit.  The sum of),
    CONTENT#6301(   the final sizes on all streams -- including streams in terminal),
    CONTENT#6302(   states -- MUST NOT exceed the value advertised by a receiver.  An),
    CONTENT#6303(   endpoint MUST terminate a connection with an error of type),
    CONTENT#6304(   FLOW_CONTROL_ERROR if it receives more data than the maximum data),
    CONTENT#6305(   value that it has sent.  This includes violations of remembered),
    CONTENT#6306(   limits in Early Data; see Section 7.4.1.),
      BREAK#6307,
    SECTION#6308(id=19.10, title=MAX_STREAM_DATA Frames),
      BREAK#6309,
    CONTENT#6310(   A MAX_STREAM_DATA frame (type=0x11) is used in flow control to inform),
    CONTENT#6311(   a peer of the maximum amount of data that can be sent on a stream.),
      BREAK#6312,
    CONTENT#6313(   A MAX_STREAM_DATA frame can be sent for streams in the "Recv" state;),
    CONTENT#6314(   see Section 3.2.  Receiving a MAX_STREAM_DATA frame for a locally),
    CONTENT#6315(   initiated stream that has not yet been created MUST be treated as a),
    CONTENT#6316(   connection error of type STREAM_STATE_ERROR.  An endpoint that),
    CONTENT#6317(   receives a MAX_STREAM_DATA frame for a receive-only stream MUST),
    CONTENT#6318(   terminate the connection with error STREAM_STATE_ERROR.),
      BREAK#6319,
    CONTENT#6320(   MAX_STREAM_DATA frames are formatted as shown in Figure 34.),
      BREAK#6321,
    CONTENT#6322(   MAX_STREAM_DATA Frame {),
    CONTENT#6323(     Type (i) = 0x11,),
    CONTENT#6324(     Stream ID (i),),
    CONTENT#6325(     Maximum Stream Data (i),),
    CONTENT#6326(   }),
      BREAK#6327,
    CONTENT#6328(                  Figure 34: MAX_STREAM_DATA Frame Format),
      BREAK#6329,
    CONTENT#6330(   MAX_STREAM_DATA frames contain the following fields:),
      BREAK#6331,
    CONTENT#6332(   Stream ID:  The stream ID of the affected stream, encoded as a),
    CONTENT#6333(      variable-length integer.),
      BREAK#6334,
    CONTENT#6335(   Maximum Stream Data:  A variable-length integer indicating the),
    CONTENT#6336(      maximum amount of data that can be sent on the identified stream,),
    CONTENT#6337(      in units of bytes.),
      BREAK#6338,
    CONTENT#6339(   When counting data toward this limit, an endpoint accounts for the),
    CONTENT#6340(   largest received offset of data that is sent or received on the),
    CONTENT#6341(   stream.  Loss or reordering can mean that the largest received offset),
    CONTENT#6342(   on a stream can be greater than the total size of data received on),
    CONTENT#6343(   that stream.  Receiving STREAM frames might not increase the largest),
    CONTENT#6344(   received offset.),
      BREAK#6345,
    CONTENT#6346(   The data sent on a stream MUST NOT exceed the largest maximum stream),
    CONTENT#6347(   data value advertised by the receiver.  An endpoint MUST terminate a),
    CONTENT#6348(   connection with an error of type FLOW_CONTROL_ERROR if it receives),
    CONTENT#6349(   more data than the largest maximum stream data that it has sent for),
    CONTENT#6350(   the affected stream.  This includes violations of remembered limits),
    CONTENT#6351(   in Early Data; see Section 7.4.1.),
      BREAK#6352,
    SECTION#6353(id=19.11, title=MAX_STREAMS Frames),
      BREAK#6354,
    CONTENT#6355(   A MAX_STREAMS frame (type=0x12 or 0x13) informs the peer of the),
    CONTENT#6356(   cumulative number of streams of a given type it is permitted to open.),
    CONTENT#6357(   A MAX_STREAMS frame with a type of 0x12 applies to bidirectional),
    CONTENT#6358(   streams, and a MAX_STREAMS frame with a type of 0x13 applies to),
    CONTENT#6359(   unidirectional streams.),
      BREAK#6360,
    CONTENT#6361(   MAX_STREAMS frames are formatted as shown in Figure 35.),
      BREAK#6362,
    CONTENT#6363(   MAX_STREAMS Frame {),
    CONTENT#6364(     Type (i) = 0x12..0x13,),
    CONTENT#6365(     Maximum Streams (i),),
    CONTENT#6366(   }),
      BREAK#6367,
    CONTENT#6368(                    Figure 35: MAX_STREAMS Frame Format),
      BREAK#6369,
    CONTENT#6370(   MAX_STREAMS frames contain the following field:),
      BREAK#6371,
    CONTENT#6372(   Maximum Streams:  A count of the cumulative number of streams of the),
    CONTENT#6373(      corresponding type that can be opened over the lifetime of the),
    CONTENT#6374(      connection.  This value cannot exceed 2^60, as it is not possible),
    CONTENT#6375(      to encode stream IDs larger than 2^62-1.  Receipt of a frame that),
    CONTENT#6376(      permits opening of a stream larger than this limit MUST be treated),
    CONTENT#6377(      as a connection error of type FRAME_ENCODING_ERROR.),
      BREAK#6378,
    CONTENT#6379(   Loss or reordering can cause an endpoint to receive a MAX_STREAMS),
    CONTENT#6380(   frame with a lower stream limit than was previously received.),
    CONTENT#6381(   MAX_STREAMS frames that do not increase the stream limit MUST be),
    CONTENT#6382(   ignored.),
      BREAK#6383,
    CONTENT#6384(   An endpoint MUST NOT open more streams than permitted by the current),
    CONTENT#6385(   stream limit set by its peer.  For instance, a server that receives a),
    CONTENT#6386(   unidirectional stream limit of 3 is permitted to open streams 3, 7,),
    CONTENT#6387(   and 11, but not stream 15.  An endpoint MUST terminate a connection),
    CONTENT#6388(   with an error of type STREAM_LIMIT_ERROR if a peer opens more streams),
    CONTENT#6389(   than was permitted.  This includes violations of remembered limits in),
    CONTENT#6390(   Early Data; see Section 7.4.1.),
      BREAK#6391,
    CONTENT#6392(   Note that these frames (and the corresponding transport parameters)),
    CONTENT#6393(   do not describe the number of streams that can be opened),
    CONTENT#6394(   concurrently.  The limit includes streams that have been closed as),
    CONTENT#6395(   well as those that are open.),
      BREAK#6396,
    SECTION#6397(id=19.12, title=DATA_BLOCKED Frames),
      BREAK#6398,
    CONTENT#6399(   A sender SHOULD send a DATA_BLOCKED frame (type=0x14) when it wishes),
    CONTENT#6400(   to send data but is unable to do so due to connection-level flow),
    CONTENT#6401(   control; see Section 4.  DATA_BLOCKED frames can be used as input to),
    CONTENT#6402(   tuning of flow control algorithms; see Section 4.2.),
      BREAK#6403,
    CONTENT#6404(   DATA_BLOCKED frames are formatted as shown in Figure 36.),
      BREAK#6405,
    CONTENT#6406(   DATA_BLOCKED Frame {),
    CONTENT#6407(     Type (i) = 0x14,),
    CONTENT#6408(     Maximum Data (i),),
    CONTENT#6409(   }),
      BREAK#6410,
    CONTENT#6411(                    Figure 36: DATA_BLOCKED Frame Format),
      BREAK#6412,
    CONTENT#6413(   DATA_BLOCKED frames contain the following field:),
      BREAK#6414,
    CONTENT#6415(   Maximum Data:  A variable-length integer indicating the connection-),
    CONTENT#6416(      level limit at which blocking occurred.),
      BREAK#6417,
    SECTION#6418(id=19.13, title=STREAM_DATA_BLOCKED Frames),
      BREAK#6419,
    CONTENT#6420(   A sender SHOULD send a STREAM_DATA_BLOCKED frame (type=0x15) when it),
    CONTENT#6421(   wishes to send data but is unable to do so due to stream-level flow),
    CONTENT#6422(   control.  This frame is analogous to DATA_BLOCKED (Section 19.12).),
      BREAK#6423,
    CONTENT#6424(   An endpoint that receives a STREAM_DATA_BLOCKED frame for a send-only),
    CONTENT#6425(   stream MUST terminate the connection with error STREAM_STATE_ERROR.),
      BREAK#6426,
    CONTENT#6427(   STREAM_DATA_BLOCKED frames are formatted as shown in Figure 37.),
      BREAK#6428,
    CONTENT#6429(   STREAM_DATA_BLOCKED Frame {),
    CONTENT#6430(     Type (i) = 0x15,),
    CONTENT#6431(     Stream ID (i),),
    CONTENT#6432(     Maximum Stream Data (i),),
    CONTENT#6433(   }),
      BREAK#6434,
    CONTENT#6435(                Figure 37: STREAM_DATA_BLOCKED Frame Format),
      BREAK#6436,
    CONTENT#6437(   STREAM_DATA_BLOCKED frames contain the following fields:),
      BREAK#6438,
    CONTENT#6439(   Stream ID:  A variable-length integer indicating the stream that is),
    CONTENT#6440(      blocked due to flow control.),
      BREAK#6441,
    CONTENT#6442(   Maximum Stream Data:  A variable-length integer indicating the offset),
    CONTENT#6443(      of the stream at which the blocking occurred.),
      BREAK#6444,
    SECTION#6445(id=19.14, title=STREAMS_BLOCKED Frames),
      BREAK#6446,
    CONTENT#6447(   A sender SHOULD send a STREAMS_BLOCKED frame (type=0x16 or 0x17) when),
    CONTENT#6448(   it wishes to open a stream but is unable to do so due to the maximum),
    CONTENT#6449(   stream limit set by its peer; see Section 19.11.  A STREAMS_BLOCKED),
    CONTENT#6450(   frame of type 0x16 is used to indicate reaching the bidirectional),
    CONTENT#6451(   stream limit, and a STREAMS_BLOCKED frame of type 0x17 is used to),
    CONTENT#6452(   indicate reaching the unidirectional stream limit.),
      BREAK#6453,
    CONTENT#6454(   A STREAMS_BLOCKED frame does not open the stream, but informs the),
    CONTENT#6455(   peer that a new stream was needed and the stream limit prevented the),
    CONTENT#6456(   creation of the stream.),
      BREAK#6457,
    CONTENT#6458(   STREAMS_BLOCKED frames are formatted as shown in Figure 38.),
      BREAK#6459,
    CONTENT#6460(   STREAMS_BLOCKED Frame {),
    CONTENT#6461(     Type (i) = 0x16..0x17,),
    CONTENT#6462(     Maximum Streams (i),),
    CONTENT#6463(   }),
      BREAK#6464,
    CONTENT#6465(                  Figure 38: STREAMS_BLOCKED Frame Format),
      BREAK#6466,
    CONTENT#6467(   STREAMS_BLOCKED frames contain the following field:),
      BREAK#6468,
    CONTENT#6469(   Maximum Streams:  A variable-length integer indicating the maximum),
    CONTENT#6470(      number of streams allowed at the time the frame was sent.  This),
    CONTENT#6471(      value cannot exceed 2^60, as it is not possible to encode stream),
    CONTENT#6472(      IDs larger than 2^62-1.  Receipt of a frame that encodes a larger),
    CONTENT#6473(      stream ID MUST be treated as a connection error of type),
    CONTENT#6474(      STREAM_LIMIT_ERROR or FRAME_ENCODING_ERROR.),
      BREAK#6475,
    SECTION#6476(id=19.15, title=NEW_CONNECTION_ID Frames),
      BREAK#6477,
    CONTENT#6478(   An endpoint sends a NEW_CONNECTION_ID frame (type=0x18) to provide),
    CONTENT#6479(   its peer with alternative connection IDs that can be used to break),
    CONTENT#6480(   linkability when migrating connections; see Section 9.5.),
      BREAK#6481,
    CONTENT#6482(   NEW_CONNECTION_ID frames are formatted as shown in Figure 39.),
      BREAK#6483,
    CONTENT#6484(   NEW_CONNECTION_ID Frame {),
    CONTENT#6485(     Type (i) = 0x18,),
    CONTENT#6486(     Sequence Number (i),),
    CONTENT#6487(     Retire Prior To (i),),
    CONTENT#6488(     Length (8),),
    CONTENT#6489(     Connection ID (8..160),),
    CONTENT#6490(     Stateless Reset Token (128),),
    CONTENT#6491(   }),
      BREAK#6492,
    CONTENT#6493(                 Figure 39: NEW_CONNECTION_ID Frame Format),
      BREAK#6494,
    CONTENT#6495(   NEW_CONNECTION_ID frames contain the following fields:),
      BREAK#6496,
    CONTENT#6497(   Sequence Number:  The sequence number assigned to the connection ID),
    CONTENT#6498(      by the sender, encoded as a variable-length integer; see),
    CONTENT#6499(      Section 5.1.1.),
      BREAK#6500,
    CONTENT#6501(   Retire Prior To:  A variable-length integer indicating which),
    CONTENT#6502(      connection IDs should be retired; see Section 5.1.2.),
      BREAK#6503,
    CONTENT#6504(   Length:  An 8-bit unsigned integer containing the length of the),
    CONTENT#6505(      connection ID.  Values less than 1 and greater than 20 are invalid),
    CONTENT#6506(      and MUST be treated as a connection error of type),
    CONTENT#6507(      FRAME_ENCODING_ERROR.),
      BREAK#6508,
    CONTENT#6509(   Connection ID:  A connection ID of the specified length.),
      BREAK#6510,
    CONTENT#6511(   Stateless Reset Token:  A 128-bit value that will be used for a),
    CONTENT#6512(      stateless reset when the associated connection ID is used; see),
    CONTENT#6513(      Section 10.3.),
      BREAK#6514,
    CONTENT#6515(   An endpoint MUST NOT send this frame if it currently requires that),
    CONTENT#6516(   its peer send packets with a zero-length Destination Connection ID.),
    CONTENT#6517(   Changing the length of a connection ID to or from zero length makes),
    CONTENT#6518(   it difficult to identify when the value of the connection ID changed.),
    CONTENT#6519(   An endpoint that is sending packets with a zero-length Destination),
    CONTENT#6520(   Connection ID MUST treat receipt of a NEW_CONNECTION_ID frame as a),
    CONTENT#6521(   connection error of type PROTOCOL_VIOLATION.),
      BREAK#6522,
    CONTENT#6523(   Transmission errors, timeouts, and retransmissions might cause the),
    CONTENT#6524(   same NEW_CONNECTION_ID frame to be received multiple times.  Receipt),
    CONTENT#6525(   of the same frame multiple times MUST NOT be treated as a connection),
    CONTENT#6526(   error.  A receiver can use the sequence number supplied in the),
    CONTENT#6527(   NEW_CONNECTION_ID frame to handle receiving the same),
    CONTENT#6528(   NEW_CONNECTION_ID frame multiple times.),
      BREAK#6529,
    CONTENT#6530(   If an endpoint receives a NEW_CONNECTION_ID frame that repeats a),
    CONTENT#6531(   previously issued connection ID with a different Stateless Reset),
    CONTENT#6532(   Token field value or a different Sequence Number field value, or if a),
    CONTENT#6533(   sequence number is used for different connection IDs, the endpoint),
    CONTENT#6534(   MAY treat that receipt as a connection error of type),
    CONTENT#6535(   PROTOCOL_VIOLATION.),
      BREAK#6536,
    CONTENT#6537(   The Retire Prior To field applies to connection IDs established),
    CONTENT#6538(   during connection setup and the preferred_address transport),
    CONTENT#6539(   parameter; see Section 5.1.2.  The value in the Retire Prior To field),
    CONTENT#6540(   MUST be less than or equal to the value in the Sequence Number field.),
    CONTENT#6541(   Receiving a value in the Retire Prior To field that is greater than),
    CONTENT#6542(   that in the Sequence Number field MUST be treated as a connection),
    CONTENT#6543(   error of type FRAME_ENCODING_ERROR.),
      BREAK#6544,
    CONTENT#6545(   Once a sender indicates a Retire Prior To value, smaller values sent),
    CONTENT#6546(   in subsequent NEW_CONNECTION_ID frames have no effect.  A receiver),
    CONTENT#6547(   MUST ignore any Retire Prior To fields that do not increase the),
    CONTENT#6548(   largest received Retire Prior To value.),
      BREAK#6549,
    CONTENT#6550(   An endpoint that receives a NEW_CONNECTION_ID frame with a sequence),
    CONTENT#6551(   number smaller than the Retire Prior To field of a previously),
    CONTENT#6552(   received NEW_CONNECTION_ID frame MUST send a corresponding),
    CONTENT#6553(   RETIRE_CONNECTION_ID frame that retires the newly received connection),
    CONTENT#6554(   ID, unless it has already done so for that sequence number.),
      BREAK#6555,
    SECTION#6556(id=19.16, title=RETIRE_CONNECTION_ID Frames),
      BREAK#6557,
    CONTENT#6558(   An endpoint sends a RETIRE_CONNECTION_ID frame (type=0x19) to),
    CONTENT#6559(   indicate that it will no longer use a connection ID that was issued),
    CONTENT#6560(   by its peer.  This includes the connection ID provided during the),
    CONTENT#6561(   handshake.  Sending a RETIRE_CONNECTION_ID frame also serves as a),
    CONTENT#6562(   request to the peer to send additional connection IDs for future use;),
    CONTENT#6563(   see Section 5.1.  New connection IDs can be delivered to a peer using),
    CONTENT#6564(   the NEW_CONNECTION_ID frame (Section 19.15).),
      BREAK#6565,
    CONTENT#6566(   Retiring a connection ID invalidates the stateless reset token),
    CONTENT#6567(   associated with that connection ID.),
      BREAK#6568,
    CONTENT#6569(   RETIRE_CONNECTION_ID frames are formatted as shown in Figure 40.),
      BREAK#6570,
    CONTENT#6571(   RETIRE_CONNECTION_ID Frame {),
    CONTENT#6572(     Type (i) = 0x19,),
    CONTENT#6573(     Sequence Number (i),),
    CONTENT#6574(   }),
      BREAK#6575,
    CONTENT#6576(                Figure 40: RETIRE_CONNECTION_ID Frame Format),
      BREAK#6577,
    CONTENT#6578(   RETIRE_CONNECTION_ID frames contain the following field:),
      BREAK#6579,
    CONTENT#6580(   Sequence Number:  The sequence number of the connection ID being),
    CONTENT#6581(      retired; see Section 5.1.2.),
      BREAK#6582,
    CONTENT#6583(   Receipt of a RETIRE_CONNECTION_ID frame containing a sequence number),
    CONTENT#6584(   greater than any previously sent to the peer MUST be treated as a),
    CONTENT#6585(   connection error of type PROTOCOL_VIOLATION.),
      BREAK#6586,
    CONTENT#6587(   The sequence number specified in a RETIRE_CONNECTION_ID frame MUST),
    CONTENT#6588(   NOT refer to the Destination Connection ID field of the packet in),
    CONTENT#6589(   which the frame is contained.  The peer MAY treat this as a),
    CONTENT#6590(   connection error of type PROTOCOL_VIOLATION.),
      BREAK#6591,
    CONTENT#6592(   An endpoint cannot send this frame if it was provided with a zero-),
    CONTENT#6593(   length connection ID by its peer.  An endpoint that provides a zero-),
    CONTENT#6594(   length connection ID MUST treat receipt of a RETIRE_CONNECTION_ID),
    CONTENT#6595(   frame as a connection error of type PROTOCOL_VIOLATION.),
      BREAK#6596,
    SECTION#6597(id=19.17, title=PATH_CHALLENGE Frames),
      BREAK#6598,
    CONTENT#6599(   Endpoints can use PATH_CHALLENGE frames (type=0x1a) to check),
    CONTENT#6600(   reachability to the peer and for path validation during connection),
    CONTENT#6601(   migration.),
      BREAK#6602,
    CONTENT#6603(   PATH_CHALLENGE frames are formatted as shown in Figure 41.),
      BREAK#6604,
    CONTENT#6605(   PATH_CHALLENGE Frame {),
    CONTENT#6606(     Type (i) = 0x1a,),
    CONTENT#6607(     Data (64),),
    CONTENT#6608(   }),
      BREAK#6609,
    CONTENT#6610(                   Figure 41: PATH_CHALLENGE Frame Format),
      BREAK#6611,
    CONTENT#6612(   PATH_CHALLENGE frames contain the following field:),
      BREAK#6613,
    CONTENT#6614(   Data:  This 8-byte field contains arbitrary data.),
      BREAK#6615,
    CONTENT#6616(   Including 64 bits of entropy in a PATH_CHALLENGE frame ensures that),
    CONTENT#6617(   it is easier to receive the packet than it is to guess the value),
    CONTENT#6618(   correctly.),
      BREAK#6619,
    CONTENT#6620(   The recipient of this frame MUST generate a PATH_RESPONSE frame),
    CONTENT#6621(   (Section 19.18) containing the same Data value.),
      BREAK#6622,
    SECTION#6623(id=19.18, title=PATH_RESPONSE Frames),
      BREAK#6624,
    CONTENT#6625(   A PATH_RESPONSE frame (type=0x1b) is sent in response to a),
    CONTENT#6626(   PATH_CHALLENGE frame.),
      BREAK#6627,
    CONTENT#6628(   PATH_RESPONSE frames are formatted as shown in Figure 42.  The format),
    CONTENT#6629(   of a PATH_RESPONSE frame is identical to that of the PATH_CHALLENGE),
    CONTENT#6630(   frame; see Section 19.17.),
      BREAK#6631,
    CONTENT#6632(   PATH_RESPONSE Frame {),
    CONTENT#6633(     Type (i) = 0x1b,),
    CONTENT#6634(     Data (64),),
    CONTENT#6635(   }),
      BREAK#6636,
    CONTENT#6637(                   Figure 42: PATH_RESPONSE Frame Format),
      BREAK#6638,
    CONTENT#6639(   If the content of a PATH_RESPONSE frame does not match the content of),
    CONTENT#6640(   a PATH_CHALLENGE frame previously sent by the endpoint, the endpoint),
    CONTENT#6641(   MAY generate a connection error of type PROTOCOL_VIOLATION.),
      BREAK#6642,
    SECTION#6643(id=19.19, title=CONNECTION_CLOSE Frames),
      BREAK#6644,
    CONTENT#6645(   An endpoint sends a CONNECTION_CLOSE frame (type=0x1c or 0x1d) to),
    CONTENT#6646(   notify its peer that the connection is being closed.  The),
    CONTENT#6647(   CONNECTION_CLOSE frame with a type of 0x1c is used to signal errors),
    CONTENT#6648(   at only the QUIC layer, or the absence of errors (with the NO_ERROR),
    CONTENT#6649(   code).  The CONNECTION_CLOSE frame with a type of 0x1d is used to),
    CONTENT#6650(   signal an error with the application that uses QUIC.),
      BREAK#6651,
    CONTENT#6652(   If there are open streams that have not been explicitly closed, they),
    CONTENT#6653(   are implicitly closed when the connection is closed.),
      BREAK#6654,
    CONTENT#6655(   CONNECTION_CLOSE frames are formatted as shown in Figure 43.),
      BREAK#6656,
    CONTENT#6657(   CONNECTION_CLOSE Frame {),
    CONTENT#6658(     Type (i) = 0x1c..0x1d,),
    CONTENT#6659(     Error Code (i),),
    CONTENT#6660(     [Frame Type (i)],),
    CONTENT#6661(     Reason Phrase Length (i),),
    CONTENT#6662(     Reason Phrase (..),),
    CONTENT#6663(   }),
      BREAK#6664,
    CONTENT#6665(                  Figure 43: CONNECTION_CLOSE Frame Format),
      BREAK#6666,
    CONTENT#6667(   CONNECTION_CLOSE frames contain the following fields:),
      BREAK#6668,
    CONTENT#6669(   Error Code:  A variable-length integer that indicates the reason for),
    CONTENT#6670(      closing this connection.  A CONNECTION_CLOSE frame of type 0x1c),
    CONTENT#6671(      uses codes from the space defined in Section 20.1.  A),
    CONTENT#6672(      CONNECTION_CLOSE frame of type 0x1d uses codes defined by the),
    CONTENT#6673(      application protocol; see Section 20.2.),
      BREAK#6674,
    CONTENT#6675(   Frame Type:  A variable-length integer encoding the type of frame),
    CONTENT#6676(      that triggered the error.  A value of 0 (equivalent to the mention),
    CONTENT#6677(      of the PADDING frame) is used when the frame type is unknown.  The),
    CONTENT#6678(      application-specific variant of CONNECTION_CLOSE (type 0x1d) does),
    CONTENT#6679(      not include this field.),
      BREAK#6680,
    CONTENT#6681(   Reason Phrase Length:  A variable-length integer specifying the),
    CONTENT#6682(      length of the reason phrase in bytes.  Because a CONNECTION_CLOSE),
    CONTENT#6683(      frame cannot be split between packets, any limits on packet size),
    CONTENT#6684(      will also limit the space available for a reason phrase.),
      BREAK#6685,
    CONTENT#6686(   Reason Phrase:  Additional diagnostic information for the closure.),
    CONTENT#6687(      This can be zero length if the sender chooses not to give details),
    CONTENT#6688(      beyond the Error Code value.  This SHOULD be a UTF-8 encoded),
    CONTENT#6689(      string [RFC3629], though the frame does not carry information,),
    CONTENT#6690(      such as language tags, that would aid comprehension by any entity),
    CONTENT#6691(      other than the one that created the text.),
      BREAK#6692,
    CONTENT#6693(   The application-specific variant of CONNECTION_CLOSE (type 0x1d) can),
    CONTENT#6694(   only be sent using 0-RTT or 1-RTT packets; see Section 12.5.  When an),
    CONTENT#6695(   application wishes to abandon a connection during the handshake, an),
    CONTENT#6696(   endpoint can send a CONNECTION_CLOSE frame (type 0x1c) with an error),
    CONTENT#6697(   code of APPLICATION_ERROR in an Initial or Handshake packet.),
      BREAK#6698,
    SECTION#6699(id=19.20, title=HANDSHAKE_DONE Frames),
      BREAK#6700,
    CONTENT#6701(   The server uses a HANDSHAKE_DONE frame (type=0x1e) to signal),
    CONTENT#6702(   confirmation of the handshake to the client.),
      BREAK#6703,
    CONTENT#6704(   HANDSHAKE_DONE frames are formatted as shown in Figure 44, which),
    CONTENT#6705(   shows that HANDSHAKE_DONE frames have no content.),
      BREAK#6706,
    CONTENT#6707(   HANDSHAKE_DONE Frame {),
    CONTENT#6708(     Type (i) = 0x1e,),
    CONTENT#6709(   }),
      BREAK#6710,
    CONTENT#6711(                   Figure 44: HANDSHAKE_DONE Frame Format),
      BREAK#6712,
    CONTENT#6713(   A HANDSHAKE_DONE frame can only be sent by the server.  Servers MUST),
    CONTENT#6714(   NOT send a HANDSHAKE_DONE frame before completing the handshake.  A),
    CONTENT#6715(   server MUST treat receipt of a HANDSHAKE_DONE frame as a connection),
    CONTENT#6716(   error of type PROTOCOL_VIOLATION.),
      BREAK#6717,
    SECTION#6718(id=19.21, title=Extension Frames),
      BREAK#6719,
    CONTENT#6720(   QUIC frames do not use a self-describing encoding.  An endpoint),
    CONTENT#6721(   therefore needs to understand the syntax of all frames before it can),
    CONTENT#6722(   successfully process a packet.  This allows for efficient encoding of),
    CONTENT#6723(   frames, but it means that an endpoint cannot send a frame of a type),
    CONTENT#6724(   that is unknown to its peer.),
      BREAK#6725,
    CONTENT#6726(   An extension to QUIC that wishes to use a new type of frame MUST),
    CONTENT#6727(   first ensure that a peer is able to understand the frame.  An),
    CONTENT#6728(   endpoint can use a transport parameter to signal its willingness to),
    CONTENT#6729(   receive extension frame types.  One transport parameter can indicate),
    CONTENT#6730(   support for one or more extension frame types.),
      BREAK#6731,
    CONTENT#6732(   Extensions that modify or replace core protocol functionality),
    CONTENT#6733(   (including frame types) will be difficult to combine with other),
    CONTENT#6734(   extensions that modify or replace the same functionality unless the),
    CONTENT#6735(   behavior of the combination is explicitly defined.  Such extensions),
    CONTENT#6736(   SHOULD define their interaction with previously defined extensions),
    CONTENT#6737(   modifying the same protocol components.),
      BREAK#6738,
    CONTENT#6739(   Extension frames MUST be congestion controlled and MUST cause an ACK),
    CONTENT#6740(   frame to be sent.  The exception is extension frames that replace or),
    CONTENT#6741(   supplement the ACK frame.  Extension frames are not included in flow),
    CONTENT#6742(   control unless specified in the extension.),
      BREAK#6743,
    CONTENT#6744(   An IANA registry is used to manage the assignment of frame types; see),
    CONTENT#6745(   Section 22.4.),
      BREAK#6746,
    SECTION#6747(id=20, title=Error Codes),
      BREAK#6748,
    CONTENT#6749(   QUIC transport error codes and application error codes are 62-bit),
    CONTENT#6750(   unsigned integers.),
      BREAK#6751,
    SECTION#6752(id=20.1, title=Transport Error Codes),
      BREAK#6753,
    CONTENT#6754(   This section lists the defined QUIC transport error codes that can be),
    CONTENT#6755(   used in a CONNECTION_CLOSE frame with a type of 0x1c.  These errors),
    CONTENT#6756(   apply to the entire connection.),
      BREAK#6757,
    CONTENT#6758(   NO_ERROR (0x00):  An endpoint uses this with CONNECTION_CLOSE to),
    CONTENT#6759(      signal that the connection is being closed abruptly in the absence),
    CONTENT#6760(      of any error.),
      BREAK#6761,
    CONTENT#6762(   INTERNAL_ERROR (0x01):  The endpoint encountered an internal error),
    CONTENT#6763(      and cannot continue with the connection.),
      BREAK#6764,
    CONTENT#6765(   CONNECTION_REFUSED (0x02):  The server refused to accept a new),
    CONTENT#6766(      connection.),
      BREAK#6767,
    CONTENT#6768(   FLOW_CONTROL_ERROR (0x03):  An endpoint received more data than it),
    CONTENT#6769(      permitted in its advertised data limits; see Section 4.),
      BREAK#6770,
    CONTENT#6771(   STREAM_LIMIT_ERROR (0x04):  An endpoint received a frame for a stream),
    CONTENT#6772(      identifier that exceeded its advertised stream limit for the),
    CONTENT#6773(      corresponding stream type.),
      BREAK#6774,
    CONTENT#6775(   STREAM_STATE_ERROR (0x05):  An endpoint received a frame for a stream),
    CONTENT#6776(      that was not in a state that permitted that frame; see Section 3.),
      BREAK#6777,
    CONTENT#6778(   FINAL_SIZE_ERROR (0x06):  (1) An endpoint received a STREAM frame),
    CONTENT#6779(      containing data that exceeded the previously established final),
    CONTENT#6780(      size, (2) an endpoint received a STREAM frame or a RESET_STREAM),
    CONTENT#6781(      frame containing a final size that was lower than the size of),
    CONTENT#6782(      stream data that was already received, or (3) an endpoint received),
    CONTENT#6783(      a STREAM frame or a RESET_STREAM frame containing a different),
    CONTENT#6784(      final size to the one already established.),
      BREAK#6785,
    CONTENT#6786(   FRAME_ENCODING_ERROR (0x07):  An endpoint received a frame that was),
    CONTENT#6787(      badly formatted -- for instance, a frame of an unknown type or an),
    CONTENT#6788(      ACK frame that has more acknowledgment ranges than the remainder),
    CONTENT#6789(      of the packet could carry.),
      BREAK#6790,
    CONTENT#6791(   TRANSPORT_PARAMETER_ERROR (0x08):  An endpoint received transport),
    CONTENT#6792(      parameters that were badly formatted, included an invalid value,),
    CONTENT#6793(      omitted a mandatory transport parameter, included a forbidden),
    CONTENT#6794(      transport parameter, or were otherwise in error.),
      BREAK#6795,
    CONTENT#6796(   CONNECTION_ID_LIMIT_ERROR (0x09):  The number of connection IDs),
    CONTENT#6797(      provided by the peer exceeds the advertised),
    CONTENT#6798(      active_connection_id_limit.),
      BREAK#6799,
    CONTENT#6800(   PROTOCOL_VIOLATION (0x0a):  An endpoint detected an error with),
    CONTENT#6801(      protocol compliance that was not covered by more specific error),
    CONTENT#6802(      codes.),
      BREAK#6803,
    CONTENT#6804(   INVALID_TOKEN (0x0b):  A server received a client Initial that),
    CONTENT#6805(      contained an invalid Token field.),
      BREAK#6806,
    CONTENT#6807(   APPLICATION_ERROR (0x0c):  The application or application protocol),
    CONTENT#6808(      caused the connection to be closed.),
      BREAK#6809,
    CONTENT#6810(   CRYPTO_BUFFER_EXCEEDED (0x0d):  An endpoint has received more data in),
    CONTENT#6811(      CRYPTO frames than it can buffer.),
      BREAK#6812,
    CONTENT#6813(   KEY_UPDATE_ERROR (0x0e):  An endpoint detected errors in performing),
    CONTENT#6814(      key updates; see Section 6 of [QUIC-TLS].),
      BREAK#6815,
    CONTENT#6816(   AEAD_LIMIT_REACHED (0x0f):  An endpoint has reached the),
    CONTENT#6817(      confidentiality or integrity limit for the AEAD algorithm used by),
    CONTENT#6818(      the given connection.),
      BREAK#6819,
    CONTENT#6820(   NO_VIABLE_PATH (0x10):  An endpoint has determined that the network),
    CONTENT#6821(      path is incapable of supporting QUIC.  An endpoint is unlikely to),
    CONTENT#6822(      receive a CONNECTION_CLOSE frame carrying this code except when),
    CONTENT#6823(      the path does not support a large enough MTU.),
      BREAK#6824,
    CONTENT#6825(   CRYPTO_ERROR (0x0100-0x01ff):  The cryptographic handshake failed.  A),
    CONTENT#6826(      range of 256 values is reserved for carrying error codes specific),
    CONTENT#6827(      to the cryptographic handshake that is used.  Codes for errors),
    CONTENT#6828(      occurring when TLS is used for the cryptographic handshake are),
    CONTENT#6829(      described in Section 4.8 of [QUIC-TLS].),
      BREAK#6830,
    CONTENT#6831(   See Section 22.5 for details on registering new error codes.),
      BREAK#6832,
    CONTENT#6833(   In defining these error codes, several principles are applied.  Error),
    CONTENT#6834(   conditions that might require specific action on the part of a),
    CONTENT#6835(   recipient are given unique codes.  Errors that represent common),
    CONTENT#6836(   conditions are given specific codes.  Absent either of these),
    CONTENT#6837(   conditions, error codes are used to identify a general function of),
    CONTENT#6838(   the stack, like flow control or transport parameter handling.),
    CONTENT#6839(   Finally, generic errors are provided for conditions where),
    CONTENT#6840(   implementations are unable or unwilling to use more specific codes.),
      BREAK#6841,
    SECTION#6842(id=20.2, title=Application Protocol Error Codes),
      BREAK#6843,
    CONTENT#6844(   The management of application error codes is left to application),
    CONTENT#6845(   protocols.  Application protocol error codes are used for the),
    CONTENT#6846(   RESET_STREAM frame (Section 19.4), the STOP_SENDING frame),
    CONTENT#6847(   (Section 19.5), and the CONNECTION_CLOSE frame with a type of 0x1d),
    CONTENT#6848(   (Section 19.19).),
      BREAK#6849,
    SECTION#6850(id=21, title=Security Considerations),
      BREAK#6851,
    CONTENT#6852(   The goal of QUIC is to provide a secure transport connection.),
    CONTENT#6853(   Section 21.1 provides an overview of those properties; subsequent),
    CONTENT#6854(   sections discuss constraints and caveats regarding these properties,),
    CONTENT#6855(   including descriptions of known attacks and countermeasures.),
      BREAK#6856,
    SECTION#6857(id=21.1, title=Overview of Security Properties),
      BREAK#6858,
    CONTENT#6859(   A complete security analysis of QUIC is outside the scope of this),
    CONTENT#6860(   document.  This section provides an informal description of the),
    CONTENT#6861(   desired security properties as an aid to implementers and to help),
    CONTENT#6862(   guide protocol analysis.),
      BREAK#6863,
    CONTENT#6864(   QUIC assumes the threat model described in [SEC-CONS] and provides),
    CONTENT#6865(   protections against many of the attacks that arise from that model.),
      BREAK#6866,
    CONTENT#6867(   For this purpose, attacks are divided into passive and active),
    CONTENT#6868(   attacks.  Passive attackers have the ability to read packets from the),
    CONTENT#6869(   network, while active attackers also have the ability to write),
    CONTENT#6870(   packets into the network.  However, a passive attack could involve an),
    CONTENT#6871(   attacker with the ability to cause a routing change or other),
    CONTENT#6872(   modification in the path taken by packets that comprise a connection.),
      BREAK#6873,
    CONTENT#6874(   Attackers are additionally categorized as either on-path attackers or),
    CONTENT#6875(   off-path attackers.  An on-path attacker can read, modify, or remove),
    CONTENT#6876(   any packet it observes such that the packet no longer reaches its),
    CONTENT#6877(   destination, while an off-path attacker observes the packets but),
    CONTENT#6878(   cannot prevent the original packet from reaching its intended),
    CONTENT#6879(   destination.  Both types of attackers can also transmit arbitrary),
    CONTENT#6880(   packets.  This definition differs from that of Section 3.5 of),
    CONTENT#6881(   [SEC-CONS] in that an off-path attacker is able to observe packets.),
      BREAK#6882,
    CONTENT#6883(   Properties of the handshake, protected packets, and connection),
    CONTENT#6884(   migration are considered separately.),
      BREAK#6885,
    SECTION#6886(id=21.1.1, title=Handshake),
      BREAK#6887,
    CONTENT#6888(   The QUIC handshake incorporates the TLS 1.3 handshake and inherits),
    CONTENT#6889(   the cryptographic properties described in Appendix E.1 of [TLS13].),
    CONTENT#6890(   Many of the security properties of QUIC depend on the TLS handshake),
    CONTENT#6891(   providing these properties.  Any attack on the TLS handshake could),
    CONTENT#6892(   affect QUIC.),
      BREAK#6893,
    CONTENT#6894(   Any attack on the TLS handshake that compromises the secrecy or),
    CONTENT#6895(   uniqueness of session keys, or the authentication of the),
    CONTENT#6896(   participating peers, affects other security guarantees provided by),
    CONTENT#6897(   QUIC that depend on those keys.  For instance, migration (Section 9)),
    CONTENT#6898(   depends on the efficacy of confidentiality protections, both for the),
    CONTENT#6899(   negotiation of keys using the TLS handshake and for QUIC packet),
    CONTENT#6900(   protection, to avoid linkability across network paths.),
      BREAK#6901,
    CONTENT#6902(   An attack on the integrity of the TLS handshake might allow an),
    CONTENT#6903(   attacker to affect the selection of application protocol or QUIC),
    CONTENT#6904(   version.),
      BREAK#6905,
    CONTENT#6906(   In addition to the properties provided by TLS, the QUIC handshake),
    CONTENT#6907(   provides some defense against DoS attacks on the handshake.),
      BREAK#6908,
    SECTION#6909(id=21.1.1.1, title=Anti-Amplification),
      BREAK#6910,
    CONTENT#6911(   Address validation (Section 8) is used to verify that an entity that),
    CONTENT#6912(   claims a given address is able to receive packets at that address.),
    CONTENT#6913(   Address validation limits amplification attack targets to addresses),
    CONTENT#6914(   for which an attacker can observe packets.),
      BREAK#6915,
    CONTENT#6916(   Prior to address validation, endpoints are limited in what they are),
    CONTENT#6917(   able to send.  Endpoints cannot send data toward an unvalidated),
    CONTENT#6918(   address in excess of three times the data received from that address.),
      BREAK#6919,
    CONTENT#6920(      |  Note: The anti-amplification limit only applies when an),
    CONTENT#6921(      |  endpoint responds to packets received from an unvalidated),
    CONTENT#6922(      |  address.  The anti-amplification limit does not apply to),
    CONTENT#6923(      |  clients when establishing a new connection or when initiating),
    CONTENT#6924(      |  connection migration.),
      BREAK#6925,
    SECTION#6926(id=21.1.1.2, title=Server-Side DoS),
      BREAK#6927,
    CONTENT#6928(   Computing the server's first flight for a full handshake is),
    CONTENT#6929(   potentially expensive, requiring both a signature and a key exchange),
    CONTENT#6930(   computation.  In order to prevent computational DoS attacks, the),
    CONTENT#6931(   Retry packet provides a cheap token exchange mechanism that allows),
    CONTENT#6932(   servers to validate a client's IP address prior to doing any),
    CONTENT#6933(   expensive computations at the cost of a single round trip.  After a),
    CONTENT#6934(   successful handshake, servers can issue new tokens to a client, which),
    CONTENT#6935(   will allow new connection establishment without incurring this cost.),
      BREAK#6936,
    SECTION#6937(id=21.1.1.3, title=On-Path Handshake Termination),
      BREAK#6938,
    CONTENT#6939(   An on-path or off-path attacker can force a handshake to fail by),
    CONTENT#6940(   replacing or racing Initial packets.  Once valid Initial packets have),
    CONTENT#6941(   been exchanged, subsequent Handshake packets are protected with the),
    CONTENT#6942(   Handshake keys, and an on-path attacker cannot force handshake),
    CONTENT#6943(   failure other than by dropping packets to cause endpoints to abandon),
    CONTENT#6944(   the attempt.),
      BREAK#6945,
    CONTENT#6946(   An on-path attacker can also replace the addresses of packets on),
    CONTENT#6947(   either side and therefore cause the client or server to have an),
    CONTENT#6948(   incorrect view of the remote addresses.  Such an attack is),
    CONTENT#6949(   indistinguishable from the functions performed by a NAT.),
      BREAK#6950,
    SECTION#6951(id=21.1.1.4, title=Parameter Negotiation),
      BREAK#6952,
    CONTENT#6953(   The entire handshake is cryptographically protected, with the Initial),
    CONTENT#6954(   packets being encrypted with per-version keys and the Handshake and),
    CONTENT#6955(   later packets being encrypted with keys derived from the TLS key),
    CONTENT#6956(   exchange.  Further, parameter negotiation is folded into the TLS),
    CONTENT#6957(   transcript and thus provides the same integrity guarantees as),
    CONTENT#6958(   ordinary TLS negotiation.  An attacker can observe the client's),
    CONTENT#6959(   transport parameters (as long as it knows the version-specific salt)),
    CONTENT#6960(   but cannot observe the server's transport parameters and cannot),
    CONTENT#6961(   influence parameter negotiation.),
      BREAK#6962,
    CONTENT#6963(   Connection IDs are unencrypted but integrity protected in all),
    CONTENT#6964(   packets.),
      BREAK#6965,
    CONTENT#6966(   This version of QUIC does not incorporate a version negotiation),
    CONTENT#6967(   mechanism; implementations of incompatible versions will simply fail),
    CONTENT#6968(   to establish a connection.),
      BREAK#6969,
    SECTION#6970(id=21.1.2, title=Protected Packets),
      BREAK#6971,
    CONTENT#6972(   Packet protection (Section 12.1) applies authenticated encryption to),
    CONTENT#6973(   all packets except Version Negotiation packets, though Initial and),
    CONTENT#6974(   Retry packets have limited protection due to the use of version-),
    CONTENT#6975(   specific keying material; see [QUIC-TLS] for more details.  This),
    CONTENT#6976(   section considers passive and active attacks against protected),
    CONTENT#6977(   packets.),
      BREAK#6978,
    CONTENT#6979(   Both on-path and off-path attackers can mount a passive attack in),
    CONTENT#6980(   which they save observed packets for an offline attack against packet),
    CONTENT#6981(   protection at a future time; this is true for any observer of any),
    CONTENT#6982(   packet on any network.),
      BREAK#6983,
    CONTENT#6984(   An attacker that injects packets without being able to observe valid),
    CONTENT#6985(   packets for a connection is unlikely to be successful, since packet),
    CONTENT#6986(   protection ensures that valid packets are only generated by endpoints),
    CONTENT#6987(   that possess the key material established during the handshake; see),
    CONTENT#6988(   Sections 7 and 21.1.1.  Similarly, any active attacker that observes),
    CONTENT#6989(   packets and attempts to insert new data or modify existing data in),
    CONTENT#6990(   those packets should not be able to generate packets deemed valid by),
    CONTENT#6991(   the receiving endpoint, other than Initial packets.),
      BREAK#6992,
    CONTENT#6993(   A spoofing attack, in which an active attacker rewrites unprotected),
    CONTENT#6994(   parts of a packet that it forwards or injects, such as the source or),
    CONTENT#6995(   destination address, is only effective if the attacker can forward),
    CONTENT#6996(   packets to the original endpoint.  Packet protection ensures that the),
    CONTENT#6997(   packet payloads can only be processed by the endpoints that completed),
    CONTENT#6998(   the handshake, and invalid packets are ignored by those endpoints.),
      BREAK#6999,
    CONTENT#7000(   An attacker can also modify the boundaries between packets and UDP),
    CONTENT#7001(   datagrams, causing multiple packets to be coalesced into a single),
    CONTENT#7002(   datagram or splitting coalesced packets into multiple datagrams.),
    CONTENT#7003(   Aside from datagrams containing Initial packets, which require),
    CONTENT#7004(   padding, modification of how packets are arranged in datagrams has no),
    CONTENT#7005(   functional effect on a connection, although it might change some),
    CONTENT#7006(   performance characteristics.),
      BREAK#7007,
    SECTION#7008(id=21.1.3, title=Connection Migration),
      BREAK#7009,
    CONTENT#7010(   Connection migration (Section 9) provides endpoints with the ability),
    CONTENT#7011(   to transition between IP addresses and ports on multiple paths, using),
    CONTENT#7012(   one path at a time for transmission and receipt of non-probing),
    CONTENT#7013(   frames.  Path validation (Section 8.2) establishes that a peer is),
    CONTENT#7014(   both willing and able to receive packets sent on a particular path.),
    CONTENT#7015(   This helps reduce the effects of address spoofing by limiting the),
    CONTENT#7016(   number of packets sent to a spoofed address.),
      BREAK#7017,
    CONTENT#7018(   This section describes the intended security properties of connection),
    CONTENT#7019(   migration under various types of DoS attacks.),
      BREAK#7020,
    SECTION#7021(id=21.1.3.1, title=On-Path Active Attacks),
      BREAK#7022,
    CONTENT#7023(   An attacker that can cause a packet it observes to no longer reach),
    CONTENT#7024(   its intended destination is considered an on-path attacker.  When an),
    CONTENT#7025(   attacker is present between a client and server, endpoints are),
    CONTENT#7026(   required to send packets through the attacker to establish),
    CONTENT#7027(   connectivity on a given path.),
      BREAK#7028,
    CONTENT#7029(   An on-path attacker can:),
      BREAK#7030,
    CONTENT#7031(   *  Inspect packets),
      BREAK#7032,
    CONTENT#7033(   *  Modify IP and UDP packet headers),
      BREAK#7034,
    CONTENT#7035(   *  Inject new packets),
      BREAK#7036,
    CONTENT#7037(   *  Delay packets),
      BREAK#7038,
    CONTENT#7039(   *  Reorder packets),
      BREAK#7040,
    CONTENT#7041(   *  Drop packets),
      BREAK#7042,
    CONTENT#7043(   *  Split and merge datagrams along packet boundaries),
      BREAK#7044,
    CONTENT#7045(   An on-path attacker cannot:),
      BREAK#7046,
    CONTENT#7047(   *  Modify an authenticated portion of a packet and cause the),
    CONTENT#7048(      recipient to accept that packet),
      BREAK#7049,
    CONTENT#7050(   An on-path attacker has the opportunity to modify the packets that it),
    CONTENT#7051(   observes; however, any modifications to an authenticated portion of a),
    CONTENT#7052(   packet will cause it to be dropped by the receiving endpoint as),
    CONTENT#7053(   invalid, as packet payloads are both authenticated and encrypted.),
      BREAK#7054,
    CONTENT#7055(   QUIC aims to constrain the capabilities of an on-path attacker as),
    CONTENT#7056(   follows:),
      BREAK#7057,
    CONTENT#7058(   1.  An on-path attacker can prevent the use of a path for a),
    CONTENT#7059(       connection, causing the connection to fail if it cannot use a),
    CONTENT#7060(       different path that does not contain the attacker.  This can be),
    CONTENT#7061(       achieved by dropping all packets, modifying them so that they),
    CONTENT#7062(       fail to decrypt, or other methods.),
      BREAK#7063,
    CONTENT#7064(   2.  An on-path attacker can prevent migration to a new path for which),
    CONTENT#7065(       the attacker is also on-path by causing path validation to fail),
    CONTENT#7066(       on the new path.),
      BREAK#7067,
    CONTENT#7068(   3.  An on-path attacker cannot prevent a client from migrating to a),
    CONTENT#7069(       path for which the attacker is not on-path.),
      BREAK#7070,
    CONTENT#7071(   4.  An on-path attacker can reduce the throughput of a connection by),
    CONTENT#7072(       delaying packets or dropping them.),
      BREAK#7073,
    CONTENT#7074(   5.  An on-path attacker cannot cause an endpoint to accept a packet),
    CONTENT#7075(       for which it has modified an authenticated portion of that),
    CONTENT#7076(       packet.),
      BREAK#7077,
    SECTION#7078(id=21.1.3.2, title=Off-Path Active Attacks),
      BREAK#7079,
    CONTENT#7080(   An off-path attacker is not directly on the path between a client and),
    CONTENT#7081(   server but could be able to obtain copies of some or all packets sent),
    CONTENT#7082(   between the client and the server.  It is also able to send copies of),
    CONTENT#7083(   those packets to either endpoint.),
      BREAK#7084,
    CONTENT#7085(   An off-path attacker can:),
      BREAK#7086,
    CONTENT#7087(   *  Inspect packets),
      BREAK#7088,
    CONTENT#7089(   *  Inject new packets),
      BREAK#7090,
    CONTENT#7091(   *  Reorder injected packets),
      BREAK#7092,
    CONTENT#7093(   An off-path attacker cannot:),
      BREAK#7094,
    CONTENT#7095(   *  Modify packets sent by endpoints),
      BREAK#7096,
    CONTENT#7097(   *  Delay packets),
      BREAK#7098,
    CONTENT#7099(   *  Drop packets),
      BREAK#7100,
    CONTENT#7101(   *  Reorder original packets),
      BREAK#7102,
    CONTENT#7103(   An off-path attacker can create modified copies of packets that it),
    CONTENT#7104(   has observed and inject those copies into the network, potentially),
    CONTENT#7105(   with spoofed source and destination addresses.),
      BREAK#7106,
    CONTENT#7107(   For the purposes of this discussion, it is assumed that an off-path),
    CONTENT#7108(   attacker has the ability to inject a modified copy of a packet into),
    CONTENT#7109(   the network that will reach the destination endpoint prior to the),
    CONTENT#7110(   arrival of the original packet observed by the attacker.  In other),
    CONTENT#7111(   words, an attacker has the ability to consistently "win" a race with),
    CONTENT#7112(   the legitimate packets between the endpoints, potentially causing the),
    CONTENT#7113(   original packet to be ignored by the recipient.),
      BREAK#7114,
    CONTENT#7115(   It is also assumed that an attacker has the resources necessary to),
    CONTENT#7116(   affect NAT state.  In particular, an attacker can cause an endpoint),
    CONTENT#7117(   to lose its NAT binding and then obtain the same port for use with),
    CONTENT#7118(   its own traffic.),
      BREAK#7119,
    CONTENT#7120(   QUIC aims to constrain the capabilities of an off-path attacker as),
    CONTENT#7121(   follows:),
      BREAK#7122,
    CONTENT#7123(   1.  An off-path attacker can race packets and attempt to become a),
    CONTENT#7124(       "limited" on-path attacker.),
      BREAK#7125,
    CONTENT#7126(   2.  An off-path attacker can cause path validation to succeed for),
    CONTENT#7127(       forwarded packets with the source address listed as the off-path),
    CONTENT#7128(       attacker as long as it can provide improved connectivity between),
    CONTENT#7129(       the client and the server.),
      BREAK#7130,
    CONTENT#7131(   3.  An off-path attacker cannot cause a connection to close once the),
    CONTENT#7132(       handshake has completed.),
      BREAK#7133,
    CONTENT#7134(   4.  An off-path attacker cannot cause migration to a new path to fail),
    CONTENT#7135(       if it cannot observe the new path.),
      BREAK#7136,
    CONTENT#7137(   5.  An off-path attacker can become a limited on-path attacker during),
    CONTENT#7138(       migration to a new path for which it is also an off-path),
    CONTENT#7139(       attacker.),
      BREAK#7140,
    CONTENT#7141(   6.  An off-path attacker can become a limited on-path attacker by),
    CONTENT#7142(       affecting shared NAT state such that it sends packets to the),
    CONTENT#7143(       server from the same IP address and port that the client),
    CONTENT#7144(       originally used.),
      BREAK#7145,
    SECTION#7146(id=21.1.3.3, title=Limited On-Path Active Attacks),
      BREAK#7147,
    CONTENT#7148(   A limited on-path attacker is an off-path attacker that has offered),
    CONTENT#7149(   improved routing of packets by duplicating and forwarding original),
    CONTENT#7150(   packets between the server and the client, causing those packets to),
    CONTENT#7151(   arrive before the original copies such that the original packets are),
    CONTENT#7152(   dropped by the destination endpoint.),
      BREAK#7153,
    CONTENT#7154(   A limited on-path attacker differs from an on-path attacker in that),
    CONTENT#7155(   it is not on the original path between endpoints, and therefore the),
    CONTENT#7156(   original packets sent by an endpoint are still reaching their),
    CONTENT#7157(   destination.  This means that a future failure to route copied),
    CONTENT#7158(   packets to the destination faster than their original path will not),
    CONTENT#7159(   prevent the original packets from reaching the destination.),
      BREAK#7160,
    CONTENT#7161(   A limited on-path attacker can:),
      BREAK#7162,
    CONTENT#7163(   *  Inspect packets),
      BREAK#7164,
    CONTENT#7165(   *  Inject new packets),
      BREAK#7166,
    CONTENT#7167(   *  Modify unencrypted packet headers),
      BREAK#7168,
    CONTENT#7169(   *  Reorder packets),
      BREAK#7170,
    CONTENT#7171(   A limited on-path attacker cannot:),
      BREAK#7172,
    CONTENT#7173(   *  Delay packets so that they arrive later than packets sent on the),
    CONTENT#7174(      original path),
      BREAK#7175,
    CONTENT#7176(   *  Drop packets),
      BREAK#7177,
    CONTENT#7178(   *  Modify the authenticated and encrypted portion of a packet and),
    CONTENT#7179(      cause the recipient to accept that packet),
      BREAK#7180,
    CONTENT#7181(   A limited on-path attacker can only delay packets up to the point),
    CONTENT#7182(   that the original packets arrive before the duplicate packets,),
    CONTENT#7183(   meaning that it cannot offer routing with worse latency than the),
    CONTENT#7184(   original path.  If a limited on-path attacker drops packets, the),
    CONTENT#7185(   original copy will still arrive at the destination endpoint.),
      BREAK#7186,
    CONTENT#7187(   QUIC aims to constrain the capabilities of a limited off-path),
    CONTENT#7188(   attacker as follows:),
      BREAK#7189,
    CONTENT#7190(   1.  A limited on-path attacker cannot cause a connection to close),
    CONTENT#7191(       once the handshake has completed.),
      BREAK#7192,
    CONTENT#7193(   2.  A limited on-path attacker cannot cause an idle connection to),
    CONTENT#7194(       close if the client is first to resume activity.),
      BREAK#7195,
    CONTENT#7196(   3.  A limited on-path attacker can cause an idle connection to be),
    CONTENT#7197(       deemed lost if the server is the first to resume activity.),
      BREAK#7198,
    CONTENT#7199(   Note that these guarantees are the same guarantees provided for any),
    CONTENT#7200(   NAT, for the same reasons.),
      BREAK#7201,
    SECTION#7202(id=21.2, title=Handshake Denial of Service),
      BREAK#7203,
    CONTENT#7204(   As an encrypted and authenticated transport, QUIC provides a range of),
    CONTENT#7205(   protections against denial of service.  Once the cryptographic),
    CONTENT#7206(   handshake is complete, QUIC endpoints discard most packets that are),
    CONTENT#7207(   not authenticated, greatly limiting the ability of an attacker to),
    CONTENT#7208(   interfere with existing connections.),
      BREAK#7209,
    CONTENT#7210(   Once a connection is established, QUIC endpoints might accept some),
    CONTENT#7211(   unauthenticated ICMP packets (see Section 14.2.1), but the use of),
    CONTENT#7212(   these packets is extremely limited.  The only other type of packet),
    CONTENT#7213(   that an endpoint might accept is a stateless reset (Section 10.3),),
    CONTENT#7214(   which relies on the token being kept secret until it is used.),
      BREAK#7215,
    CONTENT#7216(   During the creation of a connection, QUIC only provides protection),
    CONTENT#7217(   against attacks from off the network path.  All QUIC packets contain),
    CONTENT#7218(   proof that the recipient saw a preceding packet from its peer.),
      BREAK#7219,
    CONTENT#7220(   Addresses cannot change during the handshake, so endpoints can),
    CONTENT#7221(   discard packets that are received on a different network path.),
      BREAK#7222,
    CONTENT#7223(   The Source and Destination Connection ID fields are the primary means),
    CONTENT#7224(   of protection against an off-path attack during the handshake; see),
    CONTENT#7225(   Section 8.1.  These are required to match those set by a peer.),
    CONTENT#7226(   Except for Initial and Stateless Resets, an endpoint only accepts),
    CONTENT#7227(   packets that include a Destination Connection ID field that matches a),
    CONTENT#7228(   value the endpoint previously chose.  This is the only protection),
    CONTENT#7229(   offered for Version Negotiation packets.),
      BREAK#7230,
    CONTENT#7231(   The Destination Connection ID field in an Initial packet is selected),
    CONTENT#7232(   by a client to be unpredictable, which serves an additional purpose.),
    CONTENT#7233(   The packets that carry the cryptographic handshake are protected with),
    CONTENT#7234(   a key that is derived from this connection ID and a salt specific to),
    CONTENT#7235(   the QUIC version.  This allows endpoints to use the same process for),
    CONTENT#7236(   authenticating packets that they receive as they use after the),
    CONTENT#7237(   cryptographic handshake completes.  Packets that cannot be),
    CONTENT#7238(   authenticated are discarded.  Protecting packets in this fashion),
    CONTENT#7239(   provides a strong assurance that the sender of the packet saw the),
    CONTENT#7240(   Initial packet and understood it.),
      BREAK#7241,
    CONTENT#7242(   These protections are not intended to be effective against an),
    CONTENT#7243(   attacker that is able to receive QUIC packets prior to the connection),
    CONTENT#7244(   being established.  Such an attacker can potentially send packets),
    CONTENT#7245(   that will be accepted by QUIC endpoints.  This version of QUIC),
    CONTENT#7246(   attempts to detect this sort of attack, but it expects that endpoints),
    CONTENT#7247(   will fail to establish a connection rather than recovering.  For the),
    CONTENT#7248(   most part, the cryptographic handshake protocol [QUIC-TLS] is),
    CONTENT#7249(   responsible for detecting tampering during the handshake.),
      BREAK#7250,
    CONTENT#7251(   Endpoints are permitted to use other methods to detect and attempt to),
    CONTENT#7252(   recover from interference with the handshake.  Invalid packets can be),
    CONTENT#7253(   identified and discarded using other methods, but no specific method),
    CONTENT#7254(   is mandated in this document.),
      BREAK#7255,
    SECTION#7256(id=21.3, title=Amplification Attack),
      BREAK#7257,
    CONTENT#7258(   An attacker might be able to receive an address validation token),
    CONTENT#7259(   (Section 8) from a server and then release the IP address it used to),
    CONTENT#7260(   acquire that token.  At a later time, the attacker can initiate a),
    CONTENT#7261(   0-RTT connection with a server by spoofing this same address, which),
    CONTENT#7262(   might now address a different (victim) endpoint.  The attacker can),
    CONTENT#7263(   thus potentially cause the server to send an initial congestion),
    CONTENT#7264(   window's worth of data towards the victim.),
      BREAK#7265,
    CONTENT#7266(   Servers SHOULD provide mitigations for this attack by limiting the),
    CONTENT#7267(   usage and lifetime of address validation tokens; see Section 8.1.3.),
      BREAK#7268,
    SECTION#7269(id=21.4, title=Optimistic ACK Attack),
      BREAK#7270,
    CONTENT#7271(   An endpoint that acknowledges packets it has not received might cause),
    CONTENT#7272(   a congestion controller to permit sending at rates beyond what the),
    CONTENT#7273(   network supports.  An endpoint MAY skip packet numbers when sending),
    CONTENT#7274(   packets to detect this behavior.  An endpoint can then immediately),
    CONTENT#7275(   close the connection with a connection error of type),
    CONTENT#7276(   PROTOCOL_VIOLATION; see Section 10.2.),
      BREAK#7277,
    SECTION#7278(id=21.5, title=Request Forgery Attacks),
      BREAK#7279,
    CONTENT#7280(   A request forgery attack occurs where an endpoint causes its peer to),
    CONTENT#7281(   issue a request towards a victim, with the request controlled by the),
    CONTENT#7282(   endpoint.  Request forgery attacks aim to provide an attacker with),
    CONTENT#7283(   access to capabilities of its peer that might otherwise be),
    CONTENT#7284(   unavailable to the attacker.  For a networking protocol, a request),
    CONTENT#7285(   forgery attack is often used to exploit any implicit authorization),
    CONTENT#7286(   conferred on the peer by the victim due to the peer's location in the),
    CONTENT#7287(   network.),
      BREAK#7288,
    CONTENT#7289(   For request forgery to be effective, an attacker needs to be able to),
    CONTENT#7290(   influence what packets the peer sends and where these packets are),
    CONTENT#7291(   sent.  If an attacker can target a vulnerable service with a),
    CONTENT#7292(   controlled payload, that service might perform actions that are),
    CONTENT#7293(   attributed to the attacker's peer but are decided by the attacker.),
      BREAK#7294,
    CONTENT#7295(   For example, cross-site request forgery [CSRF] exploits on the Web),
    CONTENT#7296(   cause a client to issue requests that include authorization cookies),
    CONTENT#7297(   [COOKIE], allowing one site access to information and actions that),
    CONTENT#7298(   are intended to be restricted to a different site.),
      BREAK#7299,
    CONTENT#7300(   As QUIC runs over UDP, the primary attack modality of concern is one),
    CONTENT#7301(   where an attacker can select the address to which its peer sends UDP),
    CONTENT#7302(   datagrams and can control some of the unprotected content of those),
    CONTENT#7303(   packets.  As much of the data sent by QUIC endpoints is protected,),
    CONTENT#7304(   this includes control over ciphertext.  An attack is successful if an),
    CONTENT#7305(   attacker can cause a peer to send a UDP datagram to a host that will),
    CONTENT#7306(   perform some action based on content in the datagram.),
      BREAK#7307,
    CONTENT#7308(   This section discusses ways in which QUIC might be used for request),
    CONTENT#7309(   forgery attacks.),
      BREAK#7310,
    CONTENT#7311(   This section also describes limited countermeasures that can be),
    CONTENT#7312(   implemented by QUIC endpoints.  These mitigations can be employed),
    CONTENT#7313(   unilaterally by a QUIC implementation or deployment, without),
    CONTENT#7314(   potential targets for request forgery attacks taking action.),
    CONTENT#7315(   However, these countermeasures could be insufficient if UDP-based),
    CONTENT#7316(   services do not properly authorize requests.),
      BREAK#7317,
    CONTENT#7318(   Because the migration attack described in Section 21.5.4 is quite),
    CONTENT#7319(   powerful and does not have adequate countermeasures, QUIC server),
    CONTENT#7320(   implementations should assume that attackers can cause them to),
    CONTENT#7321(   generate arbitrary UDP payloads to arbitrary destinations.  QUIC),
    CONTENT#7322(   servers SHOULD NOT be deployed in networks that do not deploy ingress),
    CONTENT#7323(   filtering [BCP38] and also have inadequately secured UDP endpoints.),
      BREAK#7324,
    CONTENT#7325(   Although it is not generally possible to ensure that clients are not),
    CONTENT#7326(   co-located with vulnerable endpoints, this version of QUIC does not),
    CONTENT#7327(   allow servers to migrate, thus preventing spoofed migration attacks),
    CONTENT#7328(   on clients.  Any future extension that allows server migration MUST),
    CONTENT#7329(   also define countermeasures for forgery attacks.),
      BREAK#7330,
    SECTION#7331(id=21.5.1, title=Control Options for Endpoints),
      BREAK#7332,
    CONTENT#7333(   QUIC offers some opportunities for an attacker to influence or),
    CONTENT#7334(   control where its peer sends UDP datagrams:),
      BREAK#7335,
    CONTENT#7336(   *  initial connection establishment (Section 7), where a server is),
    CONTENT#7337(      able to choose where a client sends datagrams -- for example, by),
    CONTENT#7338(      populating DNS records;),
      BREAK#7339,
    CONTENT#7340(   *  preferred addresses (Section 9.6), where a server is able to),
    CONTENT#7341(      choose where a client sends datagrams;),
      BREAK#7342,
    CONTENT#7343(   *  spoofed connection migrations (Section 9.3.1), where a client is),
    CONTENT#7344(      able to use source address spoofing to select where a server sends),
    CONTENT#7345(      subsequent datagrams; and),
      BREAK#7346,
    CONTENT#7347(   *  spoofed packets that cause a server to send a Version Negotiation),
    CONTENT#7348(      packet (Section 21.5.5).),
      BREAK#7349,
    CONTENT#7350(   In all cases, the attacker can cause its peer to send datagrams to a),
    CONTENT#7351(   victim that might not understand QUIC.  That is, these packets are),
    CONTENT#7352(   sent by the peer prior to address validation; see Section 8.),
      BREAK#7353,
    CONTENT#7354(   Outside of the encrypted portion of packets, QUIC offers an endpoint),
    CONTENT#7355(   several options for controlling the content of UDP datagrams that its),
    CONTENT#7356(   peer sends.  The Destination Connection ID field offers direct),
    CONTENT#7357(   control over bytes that appear early in packets sent by the peer; see),
    CONTENT#7358(   Section 5.1.  The Token field in Initial packets offers a server),
    CONTENT#7359(   control over other bytes of Initial packets; see Section 17.2.2.),
      BREAK#7360,
    CONTENT#7361(   There are no measures in this version of QUIC to prevent indirect),
    CONTENT#7362(   control over the encrypted portions of packets.  It is necessary to),
    CONTENT#7363(   assume that endpoints are able to control the contents of frames that),
    CONTENT#7364(   a peer sends, especially those frames that convey application data,),
    CONTENT#7365(   such as STREAM frames.  Though this depends to some degree on details),
    CONTENT#7366(   of the application protocol, some control is possible in many),
    CONTENT#7367(   protocol usage contexts.  As the attacker has access to packet),
    CONTENT#7368(   protection keys, they are likely to be capable of predicting how a),
    CONTENT#7369(   peer will encrypt future packets.  Successful control over datagram),
    CONTENT#7370(   content then only requires that the attacker be able to predict the),
    CONTENT#7371(   packet number and placement of frames in packets with some amount of),
    CONTENT#7372(   reliability.),
      BREAK#7373,
    CONTENT#7374(   This section assumes that limiting control over datagram content is),
    CONTENT#7375(   not feasible.  The focus of the mitigations in subsequent sections is),
    CONTENT#7376(   on limiting the ways in which datagrams that are sent prior to),
    CONTENT#7377(   address validation can be used for request forgery.),
      BREAK#7378,
    SECTION#7379(id=21.5.2, title=Request Forgery with Client Initial Packets),
      BREAK#7380,
    CONTENT#7381(   An attacker acting as a server can choose the IP address and port on),
    CONTENT#7382(   which it advertises its availability, so Initial packets from clients),
    CONTENT#7383(   are assumed to be available for use in this sort of attack.  The),
    CONTENT#7384(   address validation implicit in the handshake ensures that -- for a),
    CONTENT#7385(   new connection -- a client will not send other types of packets to a),
    CONTENT#7386(   destination that does not understand QUIC or is not willing to accept),
    CONTENT#7387(   a QUIC connection.),
      BREAK#7388,
    CONTENT#7389(   Initial packet protection (Section 5.2 of [QUIC-TLS]) makes it),
    CONTENT#7390(   difficult for servers to control the content of Initial packets sent),
    CONTENT#7391(   by clients.  A client choosing an unpredictable Destination),
    CONTENT#7392(   Connection ID ensures that servers are unable to control any of the),
    CONTENT#7393(   encrypted portion of Initial packets from clients.),
      BREAK#7394,
    CONTENT#7395(   However, the Token field is open to server control and does allow a),
    CONTENT#7396(   server to use clients to mount request forgery attacks.  The use of),
    CONTENT#7397(   tokens provided with the NEW_TOKEN frame (Section 8.1.3) offers the),
    CONTENT#7398(   only option for request forgery during connection establishment.),
      BREAK#7399,
    CONTENT#7400(   Clients, however, are not obligated to use the NEW_TOKEN frame.),
    CONTENT#7401(   Request forgery attacks that rely on the Token field can be avoided),
    CONTENT#7402(   if clients send an empty Token field when the server address has),
    CONTENT#7403(   changed from when the NEW_TOKEN frame was received.),
      BREAK#7404,
    CONTENT#7405(   Clients could avoid using NEW_TOKEN if the server address changes.),
    CONTENT#7406(   However, not including a Token field could adversely affect),
    CONTENT#7407(   performance.  Servers could rely on NEW_TOKEN to enable the sending),
    CONTENT#7408(   of data in excess of the three-times limit on sending data; see),
    CONTENT#7409(   Section 8.1.  In particular, this affects cases where clients use),
    CONTENT#7410(   0-RTT to request data from servers.),
      BREAK#7411,
    CONTENT#7412(   Sending a Retry packet (Section 17.2.5) offers a server the option to),
    CONTENT#7413(   change the Token field.  After sending a Retry, the server can also),
    CONTENT#7414(   control the Destination Connection ID field of subsequent Initial),
    CONTENT#7415(   packets from the client.  This also might allow indirect control over),
    CONTENT#7416(   the encrypted content of Initial packets.  However, the exchange of a),
    CONTENT#7417(   Retry packet validates the server's address, thereby preventing the),
    CONTENT#7418(   use of subsequent Initial packets for request forgery.),
      BREAK#7419,
    SECTION#7420(id=21.5.3, title=Request Forgery with Preferred Addresses),
      BREAK#7421,
    CONTENT#7422(   Servers can specify a preferred address, which clients then migrate),
    CONTENT#7423(   to after confirming the handshake; see Section 9.6.  The Destination),
    CONTENT#7424(   Connection ID field of packets that the client sends to a preferred),
    CONTENT#7425(   address can be used for request forgery.),
      BREAK#7426,
    CONTENT#7427(   A client MUST NOT send non-probing frames to a preferred address),
    CONTENT#7428(   prior to validating that address; see Section 8.  This greatly),
    CONTENT#7429(   reduces the options that a server has to control the encrypted),
    CONTENT#7430(   portion of datagrams.),
      BREAK#7431,
    CONTENT#7432(   This document does not offer any additional countermeasures that are),
    CONTENT#7433(   specific to the use of preferred addresses and can be implemented by),
    CONTENT#7434(   endpoints.  The generic measures described in Section 21.5.6 could be),
    CONTENT#7435(   used as further mitigation.),
      BREAK#7436,
    SECTION#7437(id=21.5.4, title=Request Forgery with Spoofed Migration),
      BREAK#7438,
    CONTENT#7439(   Clients are able to present a spoofed source address as part of an),
    CONTENT#7440(   apparent connection migration to cause a server to send datagrams to),
    CONTENT#7441(   that address.),
      BREAK#7442,
    CONTENT#7443(   The Destination Connection ID field in any packets that a server),
    CONTENT#7444(   subsequently sends to this spoofed address can be used for request),
    CONTENT#7445(   forgery.  A client might also be able to influence the ciphertext.),
      BREAK#7446,
    CONTENT#7447(   A server that only sends probing packets (Section 9.1) to an address),
    CONTENT#7448(   prior to address validation provides an attacker with only limited),
    CONTENT#7449(   control over the encrypted portion of datagrams.  However,),
    CONTENT#7450(   particularly for NAT rebinding, this can adversely affect),
    CONTENT#7451(   performance.  If the server sends frames carrying application data,),
    CONTENT#7452(   an attacker might be able to control most of the content of),
    CONTENT#7453(   datagrams.),
      BREAK#7454,
    CONTENT#7455(   This document does not offer specific countermeasures that can be),
    CONTENT#7456(   implemented by endpoints, aside from the generic measures described),
    CONTENT#7457(   in Section 21.5.6.  However, countermeasures for address spoofing at),
    CONTENT#7458(   the network level -- in particular, ingress filtering [BCP38] -- are),
    CONTENT#7459(   especially effective against attacks that use spoofing and originate),
    CONTENT#7460(   from an external network.),
      BREAK#7461,
    SECTION#7462(id=21.5.5, title=Request Forgery with Version Negotiation),
      BREAK#7463,
    CONTENT#7464(   Clients that are able to present a spoofed source address on a packet),
    CONTENT#7465(   can cause a server to send a Version Negotiation packet),
    CONTENT#7466(   (Section 17.2.1) to that address.),
      BREAK#7467,
    CONTENT#7468(   The absence of size restrictions on the connection ID fields for),
    CONTENT#7469(   packets of an unknown version increases the amount of data that the),
    CONTENT#7470(   client controls from the resulting datagram.  The first byte of this),
    CONTENT#7471(   packet is not under client control and the next four bytes are zero,),
    CONTENT#7472(   but the client is able to control up to 512 bytes starting from the),
    CONTENT#7473(   fifth byte.),
      BREAK#7474,
    CONTENT#7475(   No specific countermeasures are provided for this attack, though),
    CONTENT#7476(   generic protections (Section 21.5.6) could apply.  In this case,),
    CONTENT#7477(   ingress filtering [BCP38] is also effective.),
      BREAK#7478,
    SECTION#7479(id=21.5.6, title=Generic Request Forgery Countermeasures),
      BREAK#7480,
    CONTENT#7481(   The most effective defense against request forgery attacks is to),
    CONTENT#7482(   modify vulnerable services to use strong authentication.  However,),
    CONTENT#7483(   this is not always something that is within the control of a QUIC),
    CONTENT#7484(   deployment.  This section outlines some other steps that QUIC),
    CONTENT#7485(   endpoints could take unilaterally.  These additional steps are all),
    CONTENT#7486(   discretionary because, depending on circumstances, they could),
    CONTENT#7487(   interfere with or prevent legitimate uses.),
      BREAK#7488,
    CONTENT#7489(   Services offered over loopback interfaces often lack proper),
    CONTENT#7490(   authentication.  Endpoints MAY prevent connection attempts or),
    CONTENT#7491(   migration to a loopback address.  Endpoints SHOULD NOT allow),
    CONTENT#7492(   connections or migration to a loopback address if the same service),
    CONTENT#7493(   was previously available at a different interface or if the address),
    CONTENT#7494(   was provided by a service at a non-loopback address.  Endpoints that),
    CONTENT#7495(   depend on these capabilities could offer an option to disable these),
    CONTENT#7496(   protections.),
      BREAK#7497,
    CONTENT#7498(   Similarly, endpoints could regard a change in address to a link-local),
    CONTENT#7499(   address [RFC4291] or an address in a private-use range [RFC1918] from),
    CONTENT#7500(   a global, unique-local [RFC4193], or non-private address as a),
    CONTENT#7501(   potential attempt at request forgery.  Endpoints could refuse to use),
    CONTENT#7502(   these addresses entirely, but that carries a significant risk of),
    CONTENT#7503(   interfering with legitimate uses.  Endpoints SHOULD NOT refuse to use),
    CONTENT#7504(   an address unless they have specific knowledge about the network),
    CONTENT#7505(   indicating that sending datagrams to unvalidated addresses in a given),
    CONTENT#7506(   range is not safe.),
      BREAK#7507,
    CONTENT#7508(   Endpoints MAY choose to reduce the risk of request forgery by not),
    CONTENT#7509(   including values from NEW_TOKEN frames in Initial packets or by only),
    CONTENT#7510(   sending probing frames in packets prior to completing address),
    CONTENT#7511(   validation.  Note that this does not prevent an attacker from using),
    CONTENT#7512(   the Destination Connection ID field for an attack.),
      BREAK#7513,
    CONTENT#7514(   Endpoints are not expected to have specific information about the),
    CONTENT#7515(   location of servers that could be vulnerable targets of a request),
    CONTENT#7516(   forgery attack.  However, it might be possible over time to identify),
    CONTENT#7517(   specific UDP ports that are common targets of attacks or particular),
    CONTENT#7518(   patterns in datagrams that are used for attacks.  Endpoints MAY),
    CONTENT#7519(   choose to avoid sending datagrams to these ports or not send),
    CONTENT#7520(   datagrams that match these patterns prior to validating the),
    CONTENT#7521(   destination address.  Endpoints MAY retire connection IDs containing),
    CONTENT#7522(   patterns known to be problematic without using them.),
      BREAK#7523,
    CONTENT#7524(      |  Note: Modifying endpoints to apply these protections is more),
    CONTENT#7525(      |  efficient than deploying network-based protections, as),
    CONTENT#7526(      |  endpoints do not need to perform any additional processing when),
    CONTENT#7527(      |  sending to an address that has been validated.),
      BREAK#7528,
    SECTION#7529(id=21.6, title=Slowloris Attacks),
      BREAK#7530,
    CONTENT#7531(   The attacks commonly known as Slowloris [SLOWLORIS] try to keep many),
    CONTENT#7532(   connections to the target endpoint open and hold them open as long as),
    CONTENT#7533(   possible.  These attacks can be executed against a QUIC endpoint by),
    CONTENT#7534(   generating the minimum amount of activity necessary to avoid being),
    CONTENT#7535(   closed for inactivity.  This might involve sending small amounts of),
    CONTENT#7536(   data, gradually opening flow control windows in order to control the),
    CONTENT#7537(   sender rate, or manufacturing ACK frames that simulate a high loss),
    CONTENT#7538(   rate.),
      BREAK#7539,
    CONTENT#7540(   QUIC deployments SHOULD provide mitigations for the Slowloris),
    CONTENT#7541(   attacks, such as increasing the maximum number of clients the server),
    CONTENT#7542(   will allow, limiting the number of connections a single IP address is),
    CONTENT#7543(   allowed to make, imposing restrictions on the minimum transfer speed),
    CONTENT#7544(   a connection is allowed to have, and restricting the length of time),
    CONTENT#7545(   an endpoint is allowed to stay connected.),
      BREAK#7546,
    SECTION#7547(id=21.7, title=Stream Fragmentation and Reassembly Attacks),
      BREAK#7548,
    CONTENT#7549(   An adversarial sender might intentionally not send portions of the),
    CONTENT#7550(   stream data, causing the receiver to commit resources for the unsent),
    CONTENT#7551(   data.  This could cause a disproportionate receive buffer memory),
    CONTENT#7552(   commitment and/or the creation of a large and inefficient data),
    CONTENT#7553(   structure at the receiver.),
      BREAK#7554,
    CONTENT#7555(   An adversarial receiver might intentionally not acknowledge packets),
    CONTENT#7556(   containing stream data in an attempt to force the sender to store the),
    CONTENT#7557(   unacknowledged stream data for retransmission.),
      BREAK#7558,
    CONTENT#7559(   The attack on receivers is mitigated if flow control windows),
    CONTENT#7560(   correspond to available memory.  However, some receivers will),
    CONTENT#7561(   overcommit memory and advertise flow control offsets in the aggregate),
    CONTENT#7562(   that exceed actual available memory.  The overcommitment strategy can),
    CONTENT#7563(   lead to better performance when endpoints are well behaved, but),
    CONTENT#7564(   renders endpoints vulnerable to the stream fragmentation attack.),
      BREAK#7565,
    CONTENT#7566(   QUIC deployments SHOULD provide mitigations for stream fragmentation),
    CONTENT#7567(   attacks.  Mitigations could consist of avoiding overcommitting),
    CONTENT#7568(   memory, limiting the size of tracking data structures, delaying),
    CONTENT#7569(   reassembly of STREAM frames, implementing heuristics based on the age),
    CONTENT#7570(   and duration of reassembly holes, or some combination of these.),
      BREAK#7571,
    SECTION#7572(id=21.8, title=Stream Commitment Attack),
      BREAK#7573,
    CONTENT#7574(   An adversarial endpoint can open a large number of streams,),
    CONTENT#7575(   exhausting state on an endpoint.  The adversarial endpoint could),
    CONTENT#7576(   repeat the process on a large number of connections, in a manner),
    CONTENT#7577(   similar to SYN flooding attacks in TCP.),
      BREAK#7578,
    CONTENT#7579(   Normally, clients will open streams sequentially, as explained in),
    CONTENT#7580(   Section 2.1.  However, when several streams are initiated at short),
    CONTENT#7581(   intervals, loss or reordering can cause STREAM frames that open),
    CONTENT#7582(   streams to be received out of sequence.  On receiving a higher-),
    CONTENT#7583(   numbered stream ID, a receiver is required to open all intervening),
    CONTENT#7584(   streams of the same type; see Section 3.2.  Thus, on a new),
    CONTENT#7585(   connection, opening stream 4000000 opens 1 million and 1 client-),
    CONTENT#7586(   initiated bidirectional streams.),
      BREAK#7587,
    CONTENT#7588(   The number of active streams is limited by the),
    CONTENT#7589(   initial_max_streams_bidi and initial_max_streams_uni transport),
    CONTENT#7590(   parameters as updated by any received MAX_STREAMS frames, as),
    CONTENT#7591(   explained in Section 4.6.  If chosen judiciously, these limits),
    CONTENT#7592(   mitigate the effect of the stream commitment attack.  However,),
    CONTENT#7593(   setting the limit too low could affect performance when applications),
    CONTENT#7594(   expect to open a large number of streams.),
      BREAK#7595,
    SECTION#7596(id=21.9, title=Peer Denial of Service),
      BREAK#7597,
    CONTENT#7598(   QUIC and TLS both contain frames or messages that have legitimate),
    CONTENT#7599(   uses in some contexts, but these frames or messages can be abused to),
    CONTENT#7600(   cause a peer to expend processing resources without having any),
    CONTENT#7601(   observable impact on the state of the connection.),
      BREAK#7602,
    CONTENT#7603(   Messages can also be used to change and revert state in small or),
    CONTENT#7604(   inconsequential ways, such as by sending small increments to flow),
    CONTENT#7605(   control limits.),
      BREAK#7606,
    CONTENT#7607(   If processing costs are disproportionately large in comparison to),
    CONTENT#7608(   bandwidth consumption or effect on state, then this could allow a),
    CONTENT#7609(   malicious peer to exhaust processing capacity.),
      BREAK#7610,
    CONTENT#7611(   While there are legitimate uses for all messages, implementations),
    CONTENT#7612(   SHOULD track cost of processing relative to progress and treat),
    CONTENT#7613(   excessive quantities of any non-productive packets as indicative of),
    CONTENT#7614(   an attack.  Endpoints MAY respond to this condition with a connection),
    CONTENT#7615(   error or by dropping packets.),
      BREAK#7616,
    SECTION#7617(id=21.10, title=Explicit Congestion Notification Attacks),
      BREAK#7618,
    CONTENT#7619(   An on-path attacker could manipulate the value of ECN fields in the),
    CONTENT#7620(   IP header to influence the sender's rate.  [RFC3168] discusses),
    CONTENT#7621(   manipulations and their effects in more detail.),
      BREAK#7622,
    CONTENT#7623(   A limited on-path attacker can duplicate and send packets with),
    CONTENT#7624(   modified ECN fields to affect the sender's rate.  If duplicate),
    CONTENT#7625(   packets are discarded by a receiver, an attacker will need to race),
    CONTENT#7626(   the duplicate packet against the original to be successful in this),
    CONTENT#7627(   attack.  Therefore, QUIC endpoints ignore the ECN field in an IP),
    CONTENT#7628(   packet unless at least one QUIC packet in that IP packet is),
    CONTENT#7629(   successfully processed; see Section 13.4.),
      BREAK#7630,
    SECTION#7631(id=21.11, title=Stateless Reset Oracle),
      BREAK#7632,
    CONTENT#7633(   Stateless resets create a possible denial-of-service attack analogous),
    CONTENT#7634(   to a TCP reset injection.  This attack is possible if an attacker is),
    CONTENT#7635(   able to cause a stateless reset token to be generated for a),
    CONTENT#7636(   connection with a selected connection ID.  An attacker that can cause),
    CONTENT#7637(   this token to be generated can reset an active connection with the),
    CONTENT#7638(   same connection ID.),
      BREAK#7639,
    CONTENT#7640(   If a packet can be routed to different instances that share a static),
    CONTENT#7641(   key -- for example, by changing an IP address or port -- then an),
    CONTENT#7642(   attacker can cause the server to send a stateless reset.  To defend),
    CONTENT#7643(   against this style of denial of service, endpoints that share a),
    CONTENT#7644(   static key for stateless resets (see Section 10.3.2) MUST be arranged),
    CONTENT#7645(   so that packets with a given connection ID always arrive at an),
    CONTENT#7646(   instance that has connection state, unless that connection is no),
    CONTENT#7647(   longer active.),
      BREAK#7648,
    CONTENT#7649(   More generally, servers MUST NOT generate a stateless reset if a),
    CONTENT#7650(   connection with the corresponding connection ID could be active on),
    CONTENT#7651(   any endpoint using the same static key.),
      BREAK#7652,
    CONTENT#7653(   In the case of a cluster that uses dynamic load balancing, it is),
    CONTENT#7654(   possible that a change in load-balancer configuration could occur),
    CONTENT#7655(   while an active instance retains connection state.  Even if an),
    CONTENT#7656(   instance retains connection state, the change in routing and),
    CONTENT#7657(   resulting stateless reset will result in the connection being),
    CONTENT#7658(   terminated.  If there is no chance of the packet being routed to the),
    CONTENT#7659(   correct instance, it is better to send a stateless reset than wait),
    CONTENT#7660(   for the connection to time out.  However, this is acceptable only if),
    CONTENT#7661(   the routing cannot be influenced by an attacker.),
      BREAK#7662,
    SECTION#7663(id=21.12, title=Version Downgrade),
      BREAK#7664,
    CONTENT#7665(   This document defines QUIC Version Negotiation packets (Section 6),),
    CONTENT#7666(   which can be used to negotiate the QUIC version used between two),
    CONTENT#7667(   endpoints.  However, this document does not specify how this),
    CONTENT#7668(   negotiation will be performed between this version and subsequent),
    CONTENT#7669(   future versions.  In particular, Version Negotiation packets do not),
    CONTENT#7670(   contain any mechanism to prevent version downgrade attacks.  Future),
    CONTENT#7671(   versions of QUIC that use Version Negotiation packets MUST define a),
    CONTENT#7672(   mechanism that is robust against version downgrade attacks.),
      BREAK#7673,
    SECTION#7674(id=21.13, title=Targeted Attacks by Routing),
      BREAK#7675,
    CONTENT#7676(   Deployments should limit the ability of an attacker to target a new),
    CONTENT#7677(   connection to a particular server instance.  Ideally, routing),
    CONTENT#7678(   decisions are made independently of client-selected values, including),
    CONTENT#7679(   addresses.  Once an instance is selected, a connection ID can be),
    CONTENT#7680(   selected so that later packets are routed to the same instance.),
      BREAK#7681,
    SECTION#7682(id=21.14, title=Traffic Analysis),
      BREAK#7683,
    CONTENT#7684(   The length of QUIC packets can reveal information about the length of),
    CONTENT#7685(   the content of those packets.  The PADDING frame is provided so that),
    CONTENT#7686(   endpoints have some ability to obscure the length of packet content;),
    CONTENT#7687(   see Section 19.1.),
      BREAK#7688,
    CONTENT#7689(   Defeating traffic analysis is challenging and the subject of active),
    CONTENT#7690(   research.  Length is not the only way that information might leak.),
    CONTENT#7691(   Endpoints might also reveal sensitive information through other side),
    CONTENT#7692(   channels, such as the timing of packets.),
      BREAK#7693,
    SECTION#7694(id=22, title=IANA Considerations),
      BREAK#7695,
    CONTENT#7696(   This document establishes several registries for the management of),
    CONTENT#7697(   codepoints in QUIC.  These registries operate on a common set of),
    CONTENT#7698(   policies as defined in Section 22.1.),
      BREAK#7699,
    SECTION#7700(id=22.1, title=Registration Policies for QUIC Registries),
      BREAK#7701,
    CONTENT#7702(   All QUIC registries allow for both provisional and permanent),
    CONTENT#7703(   registration of codepoints.  This section documents policies that are),
    CONTENT#7704(   common to these registries.),
      BREAK#7705,
    SECTION#7706(id=22.1.1, title=Provisional Registrations),
      BREAK#7707,
    CONTENT#7708(   Provisional registrations of codepoints are intended to allow for),
    CONTENT#7709(   private use and experimentation with extensions to QUIC.  Provisional),
    CONTENT#7710(   registrations only require the inclusion of the codepoint value and),
    CONTENT#7711(   contact information.  However, provisional registrations could be),
    CONTENT#7712(   reclaimed and reassigned for another purpose.),
      BREAK#7713,
    CONTENT#7714(   Provisional registrations require Expert Review, as defined in),
    CONTENT#7715(   Section 4.5 of [RFC8126].  The designated expert or experts are),
    CONTENT#7716(   advised that only registrations for an excessive proportion of),
    CONTENT#7717(   remaining codepoint space or the very first unassigned value (see),
    CONTENT#7718(   Section 22.1.2) can be rejected.),
      BREAK#7719,
    CONTENT#7720(   Provisional registrations will include a Date field that indicates),
    CONTENT#7721(   when the registration was last updated.  A request to update the date),
    CONTENT#7722(   on any provisional registration can be made without review from the),
    CONTENT#7723(   designated expert(s).),
      BREAK#7724,
    CONTENT#7725(   All QUIC registries include the following fields to support),
    CONTENT#7726(   provisional registration:),
      BREAK#7727,
    CONTENT#7728(   Value:  The assigned codepoint.),
    CONTENT#7729(   Status:  "permanent" or "provisional".),
    CONTENT#7730(   Specification:  A reference to a publicly available specification for),
    CONTENT#7731(      the value.),
    CONTENT#7732(   Date:  The date of the last update to the registration.),
    CONTENT#7733(   Change Controller:  The entity that is responsible for the definition),
    CONTENT#7734(      of the registration.),
    CONTENT#7735(   Contact:  Contact details for the registrant.),
    CONTENT#7736(   Notes:  Supplementary notes about the registration.),
      BREAK#7737,
    CONTENT#7738(   Provisional registrations MAY omit the Specification and Notes),
    CONTENT#7739(   fields, plus any additional fields that might be required for a),
    CONTENT#7740(   permanent registration.  The Date field is not required as part of),
    CONTENT#7741(   requesting a registration, as it is set to the date the registration),
    CONTENT#7742(   is created or updated.),
      BREAK#7743,
    SECTION#7744(id=22.1.2, title=Selecting Codepoints),
      BREAK#7745,
    CONTENT#7746(   New requests for codepoints from QUIC registries SHOULD use a),
    CONTENT#7747(   randomly selected codepoint that excludes both existing allocations),
    CONTENT#7748(   and the first unallocated codepoint in the selected space.  Requests),
    CONTENT#7749(   for multiple codepoints MAY use a contiguous range.  This minimizes),
    CONTENT#7750(   the risk that differing semantics are attributed to the same),
    CONTENT#7751(   codepoint by different implementations.),
      BREAK#7752,
    CONTENT#7753(   The use of the first unassigned codepoint is reserved for allocation),
    CONTENT#7754(   using the Standards Action policy; see Section 4.9 of [RFC8126].  The),
    CONTENT#7755(   early codepoint assignment process [EARLY-ASSIGN] can be used for),
    CONTENT#7756(   these values.),
      BREAK#7757,
    CONTENT#7758(   For codepoints that are encoded in variable-length integers),
    CONTENT#7759(   (Section 16), such as frame types, codepoints that encode to four or),
    CONTENT#7760(   eight bytes (that is, values 2^14 and above) SHOULD be used unless),
    CONTENT#7761(   the usage is especially sensitive to having a longer encoding.),
      BREAK#7762,
    CONTENT#7763(   Applications to register codepoints in QUIC registries MAY include a),
    CONTENT#7764(   requested codepoint as part of the registration.  IANA MUST allocate),
    CONTENT#7765(   the selected codepoint if the codepoint is unassigned and the),
    CONTENT#7766(   requirements of the registration policy are met.),
      BREAK#7767,
    SECTION#7768(id=22.1.3, title=Reclaiming Provisional Codepoints),
      BREAK#7769,
    CONTENT#7770(   A request might be made to remove an unused provisional registration),
    CONTENT#7771(   from the registry to reclaim space in a registry, or a portion of the),
    CONTENT#7772(   registry (such as the 64-16383 range for codepoints that use),
    CONTENT#7773(   variable-length encodings).  This SHOULD be done only for the),
    CONTENT#7774(   codepoints with the earliest recorded date, and entries that have),
    CONTENT#7775(   been updated less than a year prior SHOULD NOT be reclaimed.),
      BREAK#7776,
    CONTENT#7777(   A request to remove a codepoint MUST be reviewed by the designated),
    CONTENT#7778(   experts.  The experts MUST attempt to determine whether the codepoint),
    CONTENT#7779(   is still in use.  Experts are advised to contact the listed contacts),
    CONTENT#7780(   for the registration, plus as wide a set of protocol implementers as),
    CONTENT#7781(   possible in order to determine whether any use of the codepoint is),
    CONTENT#7782(   known.  The experts are also advised to allow at least four weeks for),
    CONTENT#7783(   responses.),
      BREAK#7784,
    CONTENT#7785(   If any use of the codepoints is identified by this search or a),
    CONTENT#7786(   request to update the registration is made, the codepoint MUST NOT be),
    CONTENT#7787(   reclaimed.  Instead, the date on the registration is updated.  A note),
    CONTENT#7788(   might be added for the registration recording relevant information),
    CONTENT#7789(   that was learned.),
      BREAK#7790,
    CONTENT#7791(   If no use of the codepoint was identified and no request was made to),
    CONTENT#7792(   update the registration, the codepoint MAY be removed from the),
    CONTENT#7793(   registry.),
      BREAK#7794,
    CONTENT#7795(   This review and consultation process also applies to requests to),
    CONTENT#7796(   change a provisional registration into a permanent registration,),
    CONTENT#7797(   except that the goal is not to determine whether there is no use of),
    CONTENT#7798(   the codepoint but to determine that the registration is an accurate),
    CONTENT#7799(   representation of any deployed usage.),
      BREAK#7800,
    SECTION#7801(id=22.1.4, title=Permanent Registrations),
      BREAK#7802,
    CONTENT#7803(   Permanent registrations in QUIC registries use the Specification),
    CONTENT#7804(   Required policy (Section 4.6 of [RFC8126]), unless otherwise),
    CONTENT#7805(   specified.  The designated expert or experts verify that a),
    CONTENT#7806(   specification exists and is readily accessible.  Experts are),
    CONTENT#7807(   encouraged to be biased towards approving registrations unless they),
    CONTENT#7808(   are abusive, frivolous, or actively harmful (not merely aesthetically),
    CONTENT#7809(   displeasing or architecturally dubious).  The creation of a registry),
    CONTENT#7810(   MAY specify additional constraints on permanent registrations.),
      BREAK#7811,
    CONTENT#7812(   The creation of a registry MAY identify a range of codepoints where),
    CONTENT#7813(   registrations are governed by a different registration policy.  For),
    CONTENT#7814(   instance, the "QUIC Frame Types" registry (Section 22.4) has a),
    CONTENT#7815(   stricter policy for codepoints in the range from 0 to 63.),
      BREAK#7816,
    CONTENT#7817(   Any stricter requirements for permanent registrations do not prevent),
    CONTENT#7818(   provisional registrations for affected codepoints.  For instance, a),
    CONTENT#7819(   provisional registration for a frame type of 61 could be requested.),
      BREAK#7820,
    CONTENT#7821(   All registrations made by Standards Track publications MUST be),
    CONTENT#7822(   permanent.),
      BREAK#7823,
    CONTENT#7824(   All registrations in this document are assigned a permanent status),
    CONTENT#7825(   and list a change controller of the IETF and a contact of the QUIC),
    CONTENT#7826(   Working Group (quic@ietf.org).),
      BREAK#7827,
    SECTION#7828(id=22.2, title=QUIC Versions Registry),
      BREAK#7829,
    CONTENT#7830(   IANA has added a registry for "QUIC Versions" under a "QUIC" heading.),
      BREAK#7831,
    CONTENT#7832(   The "QUIC Versions" registry governs a 32-bit space; see Section 15.),
    CONTENT#7833(   This registry follows the registration policy from Section 22.1.),
    CONTENT#7834(   Permanent registrations in this registry are assigned using the),
    CONTENT#7835(   Specification Required policy (Section 4.6 of [RFC8126]).),
      BREAK#7836,
    CONTENT#7837(   The codepoint of 0x00000001 for the protocol is assigned with),
    CONTENT#7838(   permanent status to the protocol defined in this document.  The),
    CONTENT#7839(   codepoint of 0x00000000 is permanently reserved; the note for this),
    CONTENT#7840(   codepoint indicates that this version is reserved for version),
    CONTENT#7841(   negotiation.),
      BREAK#7842,
    CONTENT#7843(   All codepoints that follow the pattern 0x?a?a?a?a are reserved, MUST),
    CONTENT#7844(   NOT be assigned by IANA, and MUST NOT appear in the listing of),
    CONTENT#7845(   assigned values.),
      BREAK#7846,
    SECTION#7847(id=22.3, title=QUIC Transport Parameters Registry),
      BREAK#7848,
    CONTENT#7849(   IANA has added a registry for "QUIC Transport Parameters" under a),
    CONTENT#7850(   "QUIC" heading.),
      BREAK#7851,
    CONTENT#7852(   The "QUIC Transport Parameters" registry governs a 62-bit space.),
    CONTENT#7853(   This registry follows the registration policy from Section 22.1.),
    CONTENT#7854(   Permanent registrations in this registry are assigned using the),
    CONTENT#7855(   Specification Required policy (Section 4.6 of [RFC8126]), except for),
    CONTENT#7856(   values between 0x00 and 0x3f (in hexadecimal), inclusive, which are),
    CONTENT#7857(   assigned using Standards Action or IESG Approval as defined in),
    CONTENT#7858(   Sections 4.9 and 4.10 of [RFC8126].),
      BREAK#7859,
    CONTENT#7860(   In addition to the fields listed in Section 22.1.1, permanent),
    CONTENT#7861(   registrations in this registry MUST include the following field:),
      BREAK#7862,
    CONTENT#7863(   Parameter Name:  A short mnemonic for the parameter.),
      BREAK#7864,
    CONTENT#7865(   The initial contents of this registry are shown in Table 6.),
      BREAK#7866,
    CONTENT#7867(      +=======+=====================================+===============+),
    CONTENT#7868(      | Value | Parameter Name                      | Specification |),
    CONTENT#7869(      +=======+=====================================+===============+),
    CONTENT#7870(      | 0x00  | original_destination_connection_id  | Section 18.2  |),
    CONTENT#7871(      +-------+-------------------------------------+---------------+),
    CONTENT#7872(      | 0x01  | max_idle_timeout                    | Section 18.2  |),
    CONTENT#7873(      +-------+-------------------------------------+---------------+),
    CONTENT#7874(      | 0x02  | stateless_reset_token               | Section 18.2  |),
    CONTENT#7875(      +-------+-------------------------------------+---------------+),
    CONTENT#7876(      | 0x03  | max_udp_payload_size                | Section 18.2  |),
    CONTENT#7877(      +-------+-------------------------------------+---------------+),
    CONTENT#7878(      | 0x04  | initial_max_data                    | Section 18.2  |),
    CONTENT#7879(      +-------+-------------------------------------+---------------+),
    CONTENT#7880(      | 0x05  | initial_max_stream_data_bidi_local  | Section 18.2  |),
    CONTENT#7881(      +-------+-------------------------------------+---------------+),
    CONTENT#7882(      | 0x06  | initial_max_stream_data_bidi_remote | Section 18.2  |),
    CONTENT#7883(      +-------+-------------------------------------+---------------+),
    CONTENT#7884(      | 0x07  | initial_max_stream_data_uni         | Section 18.2  |),
    CONTENT#7885(      +-------+-------------------------------------+---------------+),
    CONTENT#7886(      | 0x08  | initial_max_streams_bidi            | Section 18.2  |),
    CONTENT#7887(      +-------+-------------------------------------+---------------+),
    CONTENT#7888(      | 0x09  | initial_max_streams_uni             | Section 18.2  |),
    CONTENT#7889(      +-------+-------------------------------------+---------------+),
    CONTENT#7890(      | 0x0a  | ack_delay_exponent                  | Section 18.2  |),
    CONTENT#7891(      +-------+-------------------------------------+---------------+),
    CONTENT#7892(      | 0x0b  | max_ack_delay                       | Section 18.2  |),
    CONTENT#7893(      +-------+-------------------------------------+---------------+),
    CONTENT#7894(      | 0x0c  | disable_active_migration            | Section 18.2  |),
    CONTENT#7895(      +-------+-------------------------------------+---------------+),
    CONTENT#7896(      | 0x0d  | preferred_address                   | Section 18.2  |),
    CONTENT#7897(      +-------+-------------------------------------+---------------+),
    CONTENT#7898(      | 0x0e  | active_connection_id_limit          | Section 18.2  |),
    CONTENT#7899(      +-------+-------------------------------------+---------------+),
    CONTENT#7900(      | 0x0f  | initial_source_connection_id        | Section 18.2  |),
    CONTENT#7901(      +-------+-------------------------------------+---------------+),
    CONTENT#7902(      | 0x10  | retry_source_connection_id          | Section 18.2  |),
    CONTENT#7903(      +-------+-------------------------------------+---------------+),
      BREAK#7904,
    CONTENT#7905(        Table 6: Initial QUIC Transport Parameters Registry Entries),
      BREAK#7906,
    CONTENT#7907(   Each value of the form "31 * N + 27" for integer values of N (that),
    CONTENT#7908(   is, 27, 58, 89, ...) are reserved; these values MUST NOT be assigned),
    CONTENT#7909(   by IANA and MUST NOT appear in the listing of assigned values.),
      BREAK#7910,
    SECTION#7911(id=22.4, title=QUIC Frame Types Registry),
      BREAK#7912,
    CONTENT#7913(   IANA has added a registry for "QUIC Frame Types" under a "QUIC"),
    CONTENT#7914(   heading.),
      BREAK#7915,
    CONTENT#7916(   The "QUIC Frame Types" registry governs a 62-bit space.  This),
    CONTENT#7917(   registry follows the registration policy from Section 22.1.),
    CONTENT#7918(   Permanent registrations in this registry are assigned using the),
    CONTENT#7919(   Specification Required policy (Section 4.6 of [RFC8126]), except for),
    CONTENT#7920(   values between 0x00 and 0x3f (in hexadecimal), inclusive, which are),
    CONTENT#7921(   assigned using Standards Action or IESG Approval as defined in),
    CONTENT#7922(   Sections 4.9 and 4.10 of [RFC8126].),
      BREAK#7923,
    CONTENT#7924(   In addition to the fields listed in Section 22.1.1, permanent),
    CONTENT#7925(   registrations in this registry MUST include the following field:),
      BREAK#7926,
    CONTENT#7927(   Frame Type Name:  A short mnemonic for the frame type.),
      BREAK#7928,
    CONTENT#7929(   In addition to the advice in Section 22.1, specifications for new),
    CONTENT#7930(   permanent registrations SHOULD describe the means by which an),
    CONTENT#7931(   endpoint might determine that it can send the identified type of),
    CONTENT#7932(   frame.  An accompanying transport parameter registration is expected),
    CONTENT#7933(   for most registrations; see Section 22.3.  Specifications for),
    CONTENT#7934(   permanent registrations also need to describe the format and assigned),
    CONTENT#7935(   semantics of any fields in the frame.),
      BREAK#7936,
    CONTENT#7937(   The initial contents of this registry are tabulated in Table 3.  Note),
    CONTENT#7938(   that the registry does not include the "Pkts" and "Spec" columns from),
    CONTENT#7939(   Table 3.),
      BREAK#7940,
    SECTION#7941(id=22.5, title=QUIC Transport Error Codes Registry),
      BREAK#7942,
    CONTENT#7943(   IANA has added a registry for "QUIC Transport Error Codes" under a),
    CONTENT#7944(   "QUIC" heading.),
      BREAK#7945,
    CONTENT#7946(   The "QUIC Transport Error Codes" registry governs a 62-bit space.),
    CONTENT#7947(   This space is split into three ranges that are governed by different),
    CONTENT#7948(   policies.  Permanent registrations in this registry are assigned),
    CONTENT#7949(   using the Specification Required policy (Section 4.6 of [RFC8126]),),
    CONTENT#7950(   except for values between 0x00 and 0x3f (in hexadecimal), inclusive,),
    CONTENT#7951(   which are assigned using Standards Action or IESG Approval as defined),
    CONTENT#7952(   in Sections 4.9 and 4.10 of [RFC8126].),
      BREAK#7953,
    CONTENT#7954(   In addition to the fields listed in Section 22.1.1, permanent),
    CONTENT#7955(   registrations in this registry MUST include the following fields:),
      BREAK#7956,
    CONTENT#7957(   Code:  A short mnemonic for the parameter.),
      BREAK#7958,
    CONTENT#7959(   Description:  A brief description of the error code semantics, which),
    CONTENT#7960(      MAY be a summary if a specification reference is provided.),
      BREAK#7961,
    CONTENT#7962(   The initial contents of this registry are shown in Table 7.),
      BREAK#7963,
    CONTENT#7964(   +=======+===========================+================+==============+),
    CONTENT#7965(   |Value  | Code                      |Description     |Specification |),
    CONTENT#7966(   +=======+===========================+================+==============+),
    CONTENT#7967(   |0x00   | NO_ERROR                  |No error        |Section 20    |),
    CONTENT#7968(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7969(   |0x01   | INTERNAL_ERROR            |Implementation  |Section 20    |),
    CONTENT#7970(   |       |                           |error           |              |),
    CONTENT#7971(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7972(   |0x02   | CONNECTION_REFUSED        |Server refuses a|Section 20    |),
    CONTENT#7973(   |       |                           |connection      |              |),
    CONTENT#7974(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7975(   |0x03   | FLOW_CONTROL_ERROR        |Flow control    |Section 20    |),
    CONTENT#7976(   |       |                           |error           |              |),
    CONTENT#7977(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7978(   |0x04   | STREAM_LIMIT_ERROR        |Too many streams|Section 20    |),
    CONTENT#7979(   |       |                           |opened          |              |),
    CONTENT#7980(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7981(   |0x05   | STREAM_STATE_ERROR        |Frame received  |Section 20    |),
    CONTENT#7982(   |       |                           |in invalid      |              |),
    CONTENT#7983(   |       |                           |stream state    |              |),
    CONTENT#7984(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7985(   |0x06   | FINAL_SIZE_ERROR          |Change to final |Section 20    |),
    CONTENT#7986(   |       |                           |size            |              |),
    CONTENT#7987(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7988(   |0x07   | FRAME_ENCODING_ERROR      |Frame encoding  |Section 20    |),
    CONTENT#7989(   |       |                           |error           |              |),
    CONTENT#7990(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7991(   |0x08   | TRANSPORT_PARAMETER_ERROR |Error in        |Section 20    |),
    CONTENT#7992(   |       |                           |transport       |              |),
    CONTENT#7993(   |       |                           |parameters      |              |),
    CONTENT#7994(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7995(   |0x09   | CONNECTION_ID_LIMIT_ERROR |Too many        |Section 20    |),
    CONTENT#7996(   |       |                           |connection IDs  |              |),
    CONTENT#7997(   |       |                           |received        |              |),
    CONTENT#7998(   +-------+---------------------------+----------------+--------------+),
    CONTENT#7999(   |0x0a   | PROTOCOL_VIOLATION        |Generic protocol|Section 20    |),
    CONTENT#8000(   |       |                           |violation       |              |),
    CONTENT#8001(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8002(   |0x0b   | INVALID_TOKEN             |Invalid Token   |Section 20    |),
    CONTENT#8003(   |       |                           |received        |              |),
    CONTENT#8004(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8005(   |0x0c   | APPLICATION_ERROR         |Application     |Section 20    |),
    CONTENT#8006(   |       |                           |error           |              |),
    CONTENT#8007(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8008(   |0x0d   | CRYPTO_BUFFER_EXCEEDED    |CRYPTO data     |Section 20    |),
    CONTENT#8009(   |       |                           |buffer          |              |),
    CONTENT#8010(   |       |                           |overflowed      |              |),
    CONTENT#8011(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8012(   |0x0e   | KEY_UPDATE_ERROR          |Invalid packet  |Section 20    |),
    CONTENT#8013(   |       |                           |protection      |              |),
    CONTENT#8014(   |       |                           |update          |              |),
    CONTENT#8015(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8016(   |0x0f   | AEAD_LIMIT_REACHED        |Excessive use of|Section 20    |),
    CONTENT#8017(   |       |                           |packet          |              |),
    CONTENT#8018(   |       |                           |protection keys |              |),
    CONTENT#8019(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8020(   |0x10   | NO_VIABLE_PATH            |No viable       |Section 20    |),
    CONTENT#8021(   |       |                           |network path    |              |),
    CONTENT#8022(   |       |                           |exists          |              |),
    CONTENT#8023(   +-------+---------------------------+----------------+--------------+),
    CONTENT#8024(   |0x0100-| CRYPTO_ERROR              |TLS alert code  |Section 20    |),
    CONTENT#8025(   |0x01ff |                           |                |              |),
    CONTENT#8026(   +-------+---------------------------+----------------+--------------+),
      BREAK#8027,
    CONTENT#8028(        Table 7: Initial QUIC Transport Error Codes Registry Entries),
      BREAK#8029,
    SECTION#8030(id=23, title=References),
      BREAK#8031,
    SECTION#8032(id=23.1, title=Normative References),
      BREAK#8033,
    CONTENT#8034(   [BCP38]    Ferguson, P. and D. Senie, "Network Ingress Filtering:),
    CONTENT#8035(              Defeating Denial of Service Attacks which employ IP Source),
    CONTENT#8036(              Address Spoofing", BCP 38, RFC 2827, May 2000.),
      BREAK#8037,
    CONTENT#8038(              <https://www.rfc-editor.org/info/bcp38>),
      BREAK#8039,
    CONTENT#8040(   [DPLPMTUD] Fairhurst, G., Jones, T., Tüxen, M., Rüngeler, I., and T.),
    CONTENT#8041(              Völker, "Packetization Layer Path MTU Discovery for),
    CONTENT#8042(              Datagram Transports", RFC 8899, DOI 10.17487/RFC8899,),
    CONTENT#8043(              September 2020, <https://www.rfc-editor.org/info/rfc8899>.),
      BREAK#8044,
    CONTENT#8045(   [EARLY-ASSIGN]),
    CONTENT#8046(              Cotton, M., "Early IANA Allocation of Standards Track Code),
    CONTENT#8047(              Points", BCP 100, RFC 7120, DOI 10.17487/RFC7120, January),
    CONTENT#8048(              2014, <https://www.rfc-editor.org/info/rfc7120>.),
      BREAK#8049,
    CONTENT#8050(   [IPv4]     Postel, J., "Internet Protocol", STD 5, RFC 791,),
    CONTENT#8051(              DOI 10.17487/RFC0791, September 1981,),
    CONTENT#8052(              <https://www.rfc-editor.org/info/rfc791>.),
      BREAK#8053,
    CONTENT#8054(   [QUIC-INVARIANTS]),
    CONTENT#8055(              Thomson, M., "Version-Independent Properties of QUIC",),
    CONTENT#8056(              RFC 8999, DOI 10.17487/RFC8999, May 2021,),
    CONTENT#8057(              <https://www.rfc-editor.org/info/rfc8999>.),
      BREAK#8058,
    CONTENT#8059(   [QUIC-RECOVERY]),
    CONTENT#8060(              Iyengar, J., Ed. and I. Swett, Ed., "QUIC Loss Detection),
    CONTENT#8061(              and Congestion Control", RFC 9002, DOI 10.17487/RFC9002,),
    CONTENT#8062(              May 2021, <https://www.rfc-editor.org/info/rfc9002>.),
      BREAK#8063,
    CONTENT#8064(   [QUIC-TLS] Thomson, M., Ed. and S. Turner, Ed., "Using TLS to Secure),
    CONTENT#8065(              QUIC", RFC 9001, DOI 10.17487/RFC9001, May 2021,),
    CONTENT#8066(              <https://www.rfc-editor.org/info/rfc9001>.),
      BREAK#8067,
    CONTENT#8068(   [RFC1191]  Mogul, J. and S. Deering, "Path MTU discovery", RFC 1191,),
    CONTENT#8069(              DOI 10.17487/RFC1191, November 1990,),
    CONTENT#8070(              <https://www.rfc-editor.org/info/rfc1191>.),
      BREAK#8071,
    CONTENT#8072(   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate),
    CONTENT#8073(              Requirement Levels", BCP 14, RFC 2119,),
    CONTENT#8074(              DOI 10.17487/RFC2119, March 1997,),
    CONTENT#8075(              <https://www.rfc-editor.org/info/rfc2119>.),
      BREAK#8076,
    CONTENT#8077(   [RFC3168]  Ramakrishnan, K., Floyd, S., and D. Black, "The Addition),
    CONTENT#8078(              of Explicit Congestion Notification (ECN) to IP",),
    CONTENT#8079(              RFC 3168, DOI 10.17487/RFC3168, September 2001,),
    CONTENT#8080(              <https://www.rfc-editor.org/info/rfc3168>.),
      BREAK#8081,
    CONTENT#8082(   [RFC3629]  Yergeau, F., "UTF-8, a transformation format of ISO),
    CONTENT#8083(              10646", STD 63, RFC 3629, DOI 10.17487/RFC3629, November),
    CONTENT#8084(              2003, <https://www.rfc-editor.org/info/rfc3629>.),
      BREAK#8085,
    CONTENT#8086(   [RFC6437]  Amante, S., Carpenter, B., Jiang, S., and J. Rajahalme,),
    CONTENT#8087(              "IPv6 Flow Label Specification", RFC 6437,),
    CONTENT#8088(              DOI 10.17487/RFC6437, November 2011,),
    CONTENT#8089(              <https://www.rfc-editor.org/info/rfc6437>.),
      BREAK#8090,
    CONTENT#8091(   [RFC8085]  Eggert, L., Fairhurst, G., and G. Shepherd, "UDP Usage),
    CONTENT#8092(              Guidelines", BCP 145, RFC 8085, DOI 10.17487/RFC8085,),
    CONTENT#8093(              March 2017, <https://www.rfc-editor.org/info/rfc8085>.),
      BREAK#8094,
    CONTENT#8095(   [RFC8126]  Cotton, M., Leiba, B., and T. Narten, "Guidelines for),
    CONTENT#8096(              Writing an IANA Considerations Section in RFCs", BCP 26,),
    CONTENT#8097(              RFC 8126, DOI 10.17487/RFC8126, June 2017,),
    CONTENT#8098(              <https://www.rfc-editor.org/info/rfc8126>.),
      BREAK#8099,
    CONTENT#8100(   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC),
    CONTENT#8101(              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,),
    CONTENT#8102(              May 2017, <https://www.rfc-editor.org/info/rfc8174>.),
      BREAK#8103,
    CONTENT#8104(   [RFC8201]  McCann, J., Deering, S., Mogul, J., and R. Hinden, Ed.,),
    CONTENT#8105(              "Path MTU Discovery for IP version 6", STD 87, RFC 8201,),
    CONTENT#8106(              DOI 10.17487/RFC8201, July 2017,),
    CONTENT#8107(              <https://www.rfc-editor.org/info/rfc8201>.),
      BREAK#8108,
    CONTENT#8109(   [RFC8311]  Black, D., "Relaxing Restrictions on Explicit Congestion),
    CONTENT#8110(              Notification (ECN) Experimentation", RFC 8311,),
    CONTENT#8111(              DOI 10.17487/RFC8311, January 2018,),
    CONTENT#8112(              <https://www.rfc-editor.org/info/rfc8311>.),
      BREAK#8113,
    CONTENT#8114(   [TLS13]    Rescorla, E., "The Transport Layer Security (TLS) Protocol),
    CONTENT#8115(              Version 1.3", RFC 8446, DOI 10.17487/RFC8446, August 2018,),
    CONTENT#8116(              <https://www.rfc-editor.org/info/rfc8446>.),
      BREAK#8117,
    CONTENT#8118(   [UDP]      Postel, J., "User Datagram Protocol", STD 6, RFC 768,),
    CONTENT#8119(              DOI 10.17487/RFC0768, August 1980,),
    CONTENT#8120(              <https://www.rfc-editor.org/info/rfc768>.),
      BREAK#8121,
    SECTION#8122(id=23.2, title=Informative References),
      BREAK#8123,
    CONTENT#8124(   [AEAD]     McGrew, D., "An Interface and Algorithms for Authenticated),
    CONTENT#8125(              Encryption", RFC 5116, DOI 10.17487/RFC5116, January 2008,),
    CONTENT#8126(              <https://www.rfc-editor.org/info/rfc5116>.),
      BREAK#8127,
    CONTENT#8128(   [ALPN]     Friedl, S., Popov, A., Langley, A., and E. Stephan,),
    CONTENT#8129(              "Transport Layer Security (TLS) Application-Layer Protocol),
    CONTENT#8130(              Negotiation Extension", RFC 7301, DOI 10.17487/RFC7301,),
    CONTENT#8131(              July 2014, <https://www.rfc-editor.org/info/rfc7301>.),
      BREAK#8132,
    CONTENT#8133(   [ALTSVC]   Nottingham, M., McManus, P., and J. Reschke, "HTTP),
    CONTENT#8134(              Alternative Services", RFC 7838, DOI 10.17487/RFC7838,),
    CONTENT#8135(              April 2016, <https://www.rfc-editor.org/info/rfc7838>.),
      BREAK#8136,
    CONTENT#8137(   [COOKIE]   Barth, A., "HTTP State Management Mechanism", RFC 6265,),
    CONTENT#8138(              DOI 10.17487/RFC6265, April 2011,),
    CONTENT#8139(              <https://www.rfc-editor.org/info/rfc6265>.),
      BREAK#8140,
    CONTENT#8141(   [CSRF]     Barth, A., Jackson, C., and J. Mitchell, "Robust defenses),
    CONTENT#8142(              for cross-site request forgery", Proceedings of the 15th),
    CONTENT#8143(              ACM conference on Computer and communications security -),
    CONTENT#8144(              CCS '08, DOI 10.1145/1455770.1455782, 2008,),
    CONTENT#8145(              <https://doi.org/10.1145/1455770.1455782>.),
      BREAK#8146,
    CONTENT#8147(   [EARLY-DESIGN]),
    CONTENT#8148(              Roskind, J., "QUIC: Multiplexed Stream Transport Over),
    CONTENT#8149(              UDP", 2 December 2013, <https://docs.google.com/document/),
    CONTENT#8150(              d/1RNHkx_VvKWyWg6Lr8SZ-saqsQx7rFV-ev2jRFUoVD34/),
    CONTENT#8151(              edit?usp=sharing>.),
      BREAK#8152,
    CONTENT#8153(   [GATEWAY]  Hätönen, S., Nyrhinen, A., Eggert, L., Strowes, S.,),
    CONTENT#8154(              Sarolahti, P., and M. Kojo, "An experimental study of home),
    CONTENT#8155(              gateway characteristics", Proceedings of the 10th ACM),
    CONTENT#8156(              SIGCOMM conference on Internet measurement - IMC '10,),
    CONTENT#8157(              DOI 10.1145/1879141.1879174, November 2010,),
    CONTENT#8158(              <https://doi.org/10.1145/1879141.1879174>.),
      BREAK#8159,
    CONTENT#8160(   [HTTP2]    Belshe, M., Peon, R., and M. Thomson, Ed., "Hypertext),
    CONTENT#8161(              Transfer Protocol Version 2 (HTTP/2)", RFC 7540,),
    CONTENT#8162(              DOI 10.17487/RFC7540, May 2015,),
    CONTENT#8163(              <https://www.rfc-editor.org/info/rfc7540>.),
      BREAK#8164,
    CONTENT#8165(   [IPv6]     Deering, S. and R. Hinden, "Internet Protocol, Version 6),
    CONTENT#8166(              (IPv6) Specification", STD 86, RFC 8200,),
    CONTENT#8167(              DOI 10.17487/RFC8200, July 2017,),
    CONTENT#8168(              <https://www.rfc-editor.org/info/rfc8200>.),
      BREAK#8169,
    CONTENT#8170(   [QUIC-MANAGEABILITY]),
    CONTENT#8171(              Kuehlewind, M. and B. Trammell, "Manageability of the QUIC),
    CONTENT#8172(              Transport Protocol", Work in Progress, Internet-Draft,),
    CONTENT#8173(              draft-ietf-quic-manageability-11, 21 April 2021,),
    CONTENT#8174(              <https://tools.ietf.org/html/draft-ietf-quic-),
    CONTENT#8175(              manageability-11>.),
      BREAK#8176,
    CONTENT#8177(   [RANDOM]   Eastlake 3rd, D., Schiller, J., and S. Crocker,),
    CONTENT#8178(              "Randomness Requirements for Security", BCP 106, RFC 4086,),
    CONTENT#8179(              DOI 10.17487/RFC4086, June 2005,),
    CONTENT#8180(              <https://www.rfc-editor.org/info/rfc4086>.),
      BREAK#8181,
    CONTENT#8182(   [RFC1812]  Baker, F., Ed., "Requirements for IP Version 4 Routers",),
    CONTENT#8183(              RFC 1812, DOI 10.17487/RFC1812, June 1995,),
    CONTENT#8184(              <https://www.rfc-editor.org/info/rfc1812>.),
      BREAK#8185,
    CONTENT#8186(   [RFC1918]  Rekhter, Y., Moskowitz, B., Karrenberg, D., de Groot, G.),
    CONTENT#8187(              J., and E. Lear, "Address Allocation for Private),
    CONTENT#8188(              Internets", BCP 5, RFC 1918, DOI 10.17487/RFC1918,),
    CONTENT#8189(              February 1996, <https://www.rfc-editor.org/info/rfc1918>.),
      BREAK#8190,
    CONTENT#8191(   [RFC2018]  Mathis, M., Mahdavi, J., Floyd, S., and A. Romanow, "TCP),
    CONTENT#8192(              Selective Acknowledgment Options", RFC 2018,),
    CONTENT#8193(              DOI 10.17487/RFC2018, October 1996,),
    CONTENT#8194(              <https://www.rfc-editor.org/info/rfc2018>.),
      BREAK#8195,
    CONTENT#8196(   [RFC2104]  Krawczyk, H., Bellare, M., and R. Canetti, "HMAC: Keyed-),
    CONTENT#8197(              Hashing for Message Authentication", RFC 2104,),
    CONTENT#8198(              DOI 10.17487/RFC2104, February 1997,),
    CONTENT#8199(              <https://www.rfc-editor.org/info/rfc2104>.),
      BREAK#8200,
    CONTENT#8201(   [RFC3449]  Balakrishnan, H., Padmanabhan, V., Fairhurst, G., and M.),
    CONTENT#8202(              Sooriyabandara, "TCP Performance Implications of Network),
    CONTENT#8203(              Path Asymmetry", BCP 69, RFC 3449, DOI 10.17487/RFC3449,),
    CONTENT#8204(              December 2002, <https://www.rfc-editor.org/info/rfc3449>.),
      BREAK#8205,
    CONTENT#8206(   [RFC4193]  Hinden, R. and B. Haberman, "Unique Local IPv6 Unicast),
    CONTENT#8207(              Addresses", RFC 4193, DOI 10.17487/RFC4193, October 2005,),
    CONTENT#8208(              <https://www.rfc-editor.org/info/rfc4193>.),
      BREAK#8209,
    CONTENT#8210(   [RFC4291]  Hinden, R. and S. Deering, "IP Version 6 Addressing),
    CONTENT#8211(              Architecture", RFC 4291, DOI 10.17487/RFC4291, February),
    CONTENT#8212(              2006, <https://www.rfc-editor.org/info/rfc4291>.),
      BREAK#8213,
    CONTENT#8214(   [RFC4443]  Conta, A., Deering, S., and M. Gupta, Ed., "Internet),
    CONTENT#8215(              Control Message Protocol (ICMPv6) for the Internet),
    CONTENT#8216(              Protocol Version 6 (IPv6) Specification", STD 89,),
    CONTENT#8217(              RFC 4443, DOI 10.17487/RFC4443, March 2006,),
    CONTENT#8218(              <https://www.rfc-editor.org/info/rfc4443>.),
      BREAK#8219,
    CONTENT#8220(   [RFC4787]  Audet, F., Ed. and C. Jennings, "Network Address),
    CONTENT#8221(              Translation (NAT) Behavioral Requirements for Unicast),
    CONTENT#8222(              UDP", BCP 127, RFC 4787, DOI 10.17487/RFC4787, January),
    CONTENT#8223(              2007, <https://www.rfc-editor.org/info/rfc4787>.),
      BREAK#8224,
    CONTENT#8225(   [RFC5681]  Allman, M., Paxson, V., and E. Blanton, "TCP Congestion),
    CONTENT#8226(              Control", RFC 5681, DOI 10.17487/RFC5681, September 2009,),
    CONTENT#8227(              <https://www.rfc-editor.org/info/rfc5681>.),
      BREAK#8228,
    CONTENT#8229(   [RFC5869]  Krawczyk, H. and P. Eronen, "HMAC-based Extract-and-Expand),
    CONTENT#8230(              Key Derivation Function (HKDF)", RFC 5869,),
    CONTENT#8231(              DOI 10.17487/RFC5869, May 2010,),
    CONTENT#8232(              <https://www.rfc-editor.org/info/rfc5869>.),
      BREAK#8233,
    CONTENT#8234(   [RFC7983]  Petit-Huguenin, M. and G. Salgueiro, "Multiplexing Scheme),
    CONTENT#8235(              Updates for Secure Real-time Transport Protocol (SRTP)),
    CONTENT#8236(              Extension for Datagram Transport Layer Security (DTLS)",),
    CONTENT#8237(              RFC 7983, DOI 10.17487/RFC7983, September 2016,),
    CONTENT#8238(              <https://www.rfc-editor.org/info/rfc7983>.),
      BREAK#8239,
    CONTENT#8240(   [RFC8087]  Fairhurst, G. and M. Welzl, "The Benefits of Using),
    CONTENT#8241(              Explicit Congestion Notification (ECN)", RFC 8087,),
    CONTENT#8242(              DOI 10.17487/RFC8087, March 2017,),
    CONTENT#8243(              <https://www.rfc-editor.org/info/rfc8087>.),
      BREAK#8244,
    CONTENT#8245(   [RFC8981]  Gont, F., Krishnan, S., Narten, T., and R. Draves,),
    CONTENT#8246(              "Temporary Address Extensions for Stateless Address),
    CONTENT#8247(              Autoconfiguration in IPv6", RFC 8981,),
    CONTENT#8248(              DOI 10.17487/RFC8981, February 2021,),
    CONTENT#8249(              <https://www.rfc-editor.org/info/rfc8981>.),
      BREAK#8250,
    CONTENT#8251(   [SEC-CONS] Rescorla, E. and B. Korver, "Guidelines for Writing RFC),
    CONTENT#8252(              Text on Security Considerations", BCP 72, RFC 3552,),
    CONTENT#8253(              DOI 10.17487/RFC3552, July 2003,),
    CONTENT#8254(              <https://www.rfc-editor.org/info/rfc3552>.),
      BREAK#8255,
    CONTENT#8256(   [SLOWLORIS]),
    CONTENT#8257(              "RSnake" Hansen, R., "Welcome to Slowloris - the low),
    CONTENT#8258(              bandwidth, yet greedy and poisonous HTTP client!", June),
    CONTENT#8259(              2009, <https://web.archive.org/web/20150315054838/),
    CONTENT#8260(              http://ha.ckers.org/slowloris/>.),
      BREAK#8261,
    SECTION#8262(id=A, title=Pseudocode),
      BREAK#8263,
    CONTENT#8264(   The pseudocode in this section describes sample algorithms.  These),
    CONTENT#8265(   algorithms are intended to be correct and clear, rather than being),
    CONTENT#8266(   optimally performant.),
      BREAK#8267,
    CONTENT#8268(   The pseudocode segments in this section are licensed as Code),
    CONTENT#8269(   Components; see the Copyright Notice.),
      BREAK#8270,
    SECTION#8271(id=A.1, title=Sample Variable-Length Integer Decoding),
      BREAK#8272,
    CONTENT#8273(   The pseudocode in Figure 45 shows how a variable-length integer can),
    CONTENT#8274(   be read from a stream of bytes.  The function ReadVarint takes a),
    CONTENT#8275(   single argument -- a sequence of bytes, which can be read in network),
    CONTENT#8276(   byte order.),
      BREAK#8277,
    CONTENT#8278(   ReadVarint(data):),
    CONTENT#8279(     // The length of variable-length integers is encoded in the),
    CONTENT#8280(     // first two bits of the first byte.),
    CONTENT#8281(     v = data.next_byte()),
    CONTENT#8282(     prefix = v >> 6),
    CONTENT#8283(     length = 1 << prefix),
      BREAK#8284,
    CONTENT#8285(     // Once the length is known, remove these bits and read any),
    CONTENT#8286(     // remaining bytes.),
    CONTENT#8287(     v = v & 0x3f),
    CONTENT#8288(     repeat length-1 times:),
    CONTENT#8289(       v = (v << 8) + data.next_byte()),
    CONTENT#8290(     return v),
      BREAK#8291,
    CONTENT#8292(        Figure 45: Sample Variable-Length Integer Decoding Algorithm),
      BREAK#8293,
    CONTENT#8294(   For example, the eight-byte sequence 0xc2197c5eff14e88c decodes to),
    CONTENT#8295(   the decimal value 151,288,809,941,952,652; the four-byte sequence),
    CONTENT#8296(   0x9d7f3e7d decodes to 494,878,333; the two-byte sequence 0x7bbd),
    CONTENT#8297(   decodes to 15,293; and the single byte 0x25 decodes to 37 (as does),
    CONTENT#8298(   the two-byte sequence 0x4025).),
      BREAK#8299,
    SECTION#8300(id=A.2, title=Sample Packet Number Encoding Algorithm),
      BREAK#8301,
    CONTENT#8302(   The pseudocode in Figure 46 shows how an implementation can select an),
    CONTENT#8303(   appropriate size for packet number encodings.),
      BREAK#8304,
    CONTENT#8305(   The EncodePacketNumber function takes two arguments:),
      BREAK#8306,
    CONTENT#8307(   *  full_pn is the full packet number of the packet being sent.),
      BREAK#8308,
    CONTENT#8309(   *  largest_acked is the largest packet number that has been),
    CONTENT#8310(      acknowledged by the peer in the current packet number space, if),
    CONTENT#8311(      any.),
      BREAK#8312,
    CONTENT#8313(   EncodePacketNumber(full_pn, largest_acked):),
      BREAK#8314,
    CONTENT#8315(     // The number of bits must be at least one more),
    CONTENT#8316(     // than the base-2 logarithm of the number of contiguous),
    CONTENT#8317(     // unacknowledged packet numbers, including the new packet.),
    CONTENT#8318(     if largest_acked is None:),
    CONTENT#8319(       num_unacked = full_pn + 1),
    CONTENT#8320(     else:),
    CONTENT#8321(       num_unacked = full_pn - largest_acked),
      BREAK#8322,
    CONTENT#8323(     min_bits = log(num_unacked, 2) + 1),
    CONTENT#8324(     num_bytes = ceil(min_bits / 8)),
      BREAK#8325,
    CONTENT#8326(     // Encode the integer value and truncate to),
    CONTENT#8327(     // the num_bytes least significant bytes.),
    CONTENT#8328(     return encode(full_pn, num_bytes)),
      BREAK#8329,
    CONTENT#8330(             Figure 46: Sample Packet Number Encoding Algorithm),
      BREAK#8331,
    CONTENT#8332(   For example, if an endpoint has received an acknowledgment for packet),
    CONTENT#8333(   0xabe8b3 and is sending a packet with a number of 0xac5c02, there are),
    CONTENT#8334(   29,519 (0x734f) outstanding packet numbers.  In order to represent at),
    CONTENT#8335(   least twice this range (59,038 packets, or 0xe69e), 16 bits are),
    CONTENT#8336(   required.),
      BREAK#8337,
    CONTENT#8338(   In the same state, sending a packet with a number of 0xace8fe uses),
    CONTENT#8339(   the 24-bit encoding, because at least 18 bits are required to),
    CONTENT#8340(   represent twice the range (131,222 packets, or 0x020096).),
      BREAK#8341,
    SECTION#8342(id=A.3, title=Sample Packet Number Decoding Algorithm),
      BREAK#8343,
    CONTENT#8344(   The pseudocode in Figure 47 includes an example algorithm for),
    CONTENT#8345(   decoding packet numbers after header protection has been removed.),
      BREAK#8346,
    CONTENT#8347(   The DecodePacketNumber function takes three arguments:),
      BREAK#8348,
    CONTENT#8349(   *  largest_pn is the largest packet number that has been successfully),
    CONTENT#8350(      processed in the current packet number space.),
      BREAK#8351,
    CONTENT#8352(   *  truncated_pn is the value of the Packet Number field.),
      BREAK#8353,
    CONTENT#8354(   *  pn_nbits is the number of bits in the Packet Number field (8, 16,),
    CONTENT#8355(      24, or 32).),
      BREAK#8356,
    CONTENT#8357(   DecodePacketNumber(largest_pn, truncated_pn, pn_nbits):),
    CONTENT#8358(      expected_pn  = largest_pn + 1),
    CONTENT#8359(      pn_win       = 1 << pn_nbits),
    CONTENT#8360(      pn_hwin      = pn_win / 2),
    CONTENT#8361(      pn_mask      = pn_win - 1),
    CONTENT#8362(      // The incoming packet number should be greater than),
    CONTENT#8363(      // expected_pn - pn_hwin and less than or equal to),
    CONTENT#8364(      // expected_pn + pn_hwin),
    CONTENT#8365(      //),
    CONTENT#8366(      // This means we cannot just strip the trailing bits from),
    CONTENT#8367(      // expected_pn and add the truncated_pn because that might),
    CONTENT#8368(      // yield a value outside the window.),
    CONTENT#8369(      //),
    CONTENT#8370(      // The following code calculates a candidate value and),
    CONTENT#8371(      // makes sure it's within the packet number window.),
    CONTENT#8372(      // Note the extra checks to prevent overflow and underflow.),
    CONTENT#8373(      candidate_pn = (expected_pn & ~pn_mask) | truncated_pn),
    CONTENT#8374(      if candidate_pn <= expected_pn - pn_hwin and),
    CONTENT#8375(         candidate_pn < (1 << 62) - pn_win:),
    CONTENT#8376(         return candidate_pn + pn_win),
    CONTENT#8377(      if candidate_pn > expected_pn + pn_hwin and),
    CONTENT#8378(         candidate_pn >= pn_win:),
    CONTENT#8379(         return candidate_pn - pn_win),
    CONTENT#8380(      return candidate_pn),
      BREAK#8381,
    CONTENT#8382(             Figure 47: Sample Packet Number Decoding Algorithm),
      BREAK#8383,
    CONTENT#8384(   For example, if the highest successfully authenticated packet had a),
    CONTENT#8385(   packet number of 0xa82f30ea, then a packet containing a 16-bit value),
    CONTENT#8386(   of 0x9b32 will be decoded as 0xa82f9b32.),
      BREAK#8387,
    SECTION#8388(id=A.4, title=Sample ECN Validation Algorithm),
      BREAK#8389,
    CONTENT#8390(   Each time an endpoint commences sending on a new network path, it),
    CONTENT#8391(   determines whether the path supports ECN; see Section 13.4.  If the),
    CONTENT#8392(   path supports ECN, the goal is to use ECN.  Endpoints might also),
    CONTENT#8393(   periodically reassess a path that was determined to not support ECN.),
      BREAK#8394,
    CONTENT#8395(   This section describes one method for testing new paths.  This),
    CONTENT#8396(   algorithm is intended to show how a path might be tested for ECN),
    CONTENT#8397(   support.  Endpoints can implement different methods.),
      BREAK#8398,
    CONTENT#8399(   The path is assigned an ECN state that is one of "testing",),
    CONTENT#8400(   "unknown", "failed", or "capable".  On paths with a "testing" or),
    CONTENT#8401(   "capable" state, the endpoint sends packets with an ECT marking --),
    CONTENT#8402(   ECT(0) by default; otherwise, the endpoint sends unmarked packets.),
      BREAK#8403,
    CONTENT#8404(   To start testing a path, the ECN state is set to "testing", and),
    CONTENT#8405(   existing ECN counts are remembered as a baseline.),
      BREAK#8406,
    CONTENT#8407(   The testing period runs for a number of packets or a limited time, as),
    CONTENT#8408(   determined by the endpoint.  The goal is not to limit the duration of),
    CONTENT#8409(   the testing period but to ensure that enough marked packets are sent),
    CONTENT#8410(   for received ECN counts to provide a clear indication of how the path),
    CONTENT#8411(   treats marked packets.  Section 13.4.2 suggests limiting this to ten),
    CONTENT#8412(   packets or three times the PTO.),
      BREAK#8413,
    CONTENT#8414(   After the testing period ends, the ECN state for the path becomes),
    CONTENT#8415(   "unknown".  From the "unknown" state, successful validation of the),
    CONTENT#8416(   ECN counts in an ACK frame (see Section 13.4.2.1) causes the ECN),
    CONTENT#8417(   state for the path to become "capable", unless no marked packet has),
    CONTENT#8418(   been acknowledged.),
      BREAK#8419,
    CONTENT#8420(   If validation of ECN counts fails at any time, the ECN state for the),
    CONTENT#8421(   affected path becomes "failed".  An endpoint can also mark the ECN),
    CONTENT#8422(   state for a path as "failed" if marked packets are all declared lost),
    CONTENT#8423(   or if they are all ECN-CE marked.),
      BREAK#8424,
    CONTENT#8425(   Following this algorithm ensures that ECN is rarely disabled for),
    CONTENT#8426(   paths that properly support ECN.  Any path that incorrectly modifies),
    CONTENT#8427(   markings will cause ECN to be disabled.  For those rare cases where),
    CONTENT#8428(   marked packets are discarded by the path, the short duration of the),
    CONTENT#8429(   testing period limits the number of losses incurred.),
      BREAK#8430,
      BREAK#8432,
    CONTENT#8433(   The original design and rationale behind this protocol draw),
    CONTENT#8434(   significantly from work by Jim Roskind [EARLY-DESIGN].),
      BREAK#8435,
    CONTENT#8436(   The IETF QUIC Working Group received an enormous amount of support),
    CONTENT#8437(   from many people.  The following people provided substantive),
    CONTENT#8438(   contributions to this document:),
      BREAK#8439,
    CONTENT#8440(   *  Alessandro Ghedini),
    CONTENT#8441(   *  Alyssa Wilk),
    CONTENT#8442(   *  Antoine Delignat-Lavaud),
    CONTENT#8443(   *  Brian Trammell),
    CONTENT#8444(   *  Christian Huitema),
    CONTENT#8445(   *  Colin Perkins),
    CONTENT#8446(   *  David Schinazi),
    CONTENT#8447(   *  Dmitri Tikhonov),
    CONTENT#8448(   *  Eric Kinnear),
    CONTENT#8449(   *  Eric Rescorla),
    CONTENT#8450(   *  Gorry Fairhurst),
    CONTENT#8451(   *  Ian Swett),
    CONTENT#8452(   *  Igor Lubashev),
    CONTENT#8453(   *  奥 一穂 (Kazuho Oku)),
    CONTENT#8454(   *  Lars Eggert),
    CONTENT#8455(   *  Lucas Pardue),
    CONTENT#8456(   *  Magnus Westerlund),
    CONTENT#8457(   *  Marten Seemann),
    CONTENT#8458(   *  Martin Duke),
    CONTENT#8459(   *  Mike Bishop),
    CONTENT#8460(   *  Mikkel Fahnøe Jørgensen),
    CONTENT#8461(   *  Mirja Kühlewind),
    CONTENT#8462(   *  Nick Banks),
    CONTENT#8463(   *  Nick Harper),
    CONTENT#8464(   *  Patrick McManus),
    CONTENT#8465(   *  Roberto Peon),
    CONTENT#8466(   *  Ryan Hamilton),
    CONTENT#8467(   *  Subodh Iyengar),
    CONTENT#8468(   *  Tatsuhiro Tsujikawa),
    CONTENT#8469(   *  Ted Hardie),
    CONTENT#8470(   *  Tom Jones),
    CONTENT#8471(   *  Victor Vasiliev),
      BREAK#8472,
      BREAK#8474,
    CONTENT#8475(   Jana Iyengar (editor)),
    CONTENT#8476(   Fastly),
      BREAK#8477,
    CONTENT#8478(   Email: jri.ietf@gmail.com),
      BREAK#8479,
      BREAK#8480,
    CONTENT#8481(   Martin Thomson (editor)),
    CONTENT#8482(   Mozilla),
      BREAK#8483,
    CONTENT#8484(   Email: mt@lowentropy.net),
]
