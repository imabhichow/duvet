on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

name: ci

env:
  CARGO_INCREMENTAL: 0
  CARGO_NET_RETRY: 10
  RUSTUP_MAX_RETRIES: 10
  RUST_BACKTRACE: 1
  SCCACHE_CACHE_SIZE: 300M
  SCCACHE_DIR: ${{ github.workspace }}/.sccache
  SCCACHE_IDLE_TIMEOUT: 0
  # Pin the nightly toolchain to prevent breakage.
  # This should be occasionally updated.
  RUST_NIGHTLY_TOOLCHAIN: nightly-2020-11-09

jobs:
  env:
    runs-on: ubuntu-latest
    outputs:
      rust-versions: ${{ steps.definitions.outputs.versions }}
      msrv: ${{ steps.definitions.outputs.msrv }}
    steps:
      - uses: actions/checkout@v2
      - name: Evaluate definitions
        id: definitions
        run: |
          export MSRV=$(cat rust-toolchain | awk '{$1=$1};1')
          echo "::set-output name=msrv::$MSRV"
          export RAW_VERSIONS="stable beta $RUST_NIGHTLY_TOOLCHAIN $MSRV"
          export VERSIONS=$(echo $RAW_VERSIONS | jq -scR 'rtrimstr("\n")|split(" ")|.')
          echo "::set-output name=versions::$VERSIONS"

  rustfmt:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true
          components: rustfmt

      - name: Run cargo fmt
        uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  clippy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: stable
          profile: minimal
          override: true
          components: clippy

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo clippy
        uses: actions-rs/clippy-check@v1
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          args: --all-features --all-targets -- -D warnings
        env:
          RUSTC_WRAPPER: sccache

      - name: Stop sccache
        run: sccache --stop-server

  udeps:
    runs-on: ubuntu-latest
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          profile: minimal
          override: true

      - uses: actions-rs/install@v0.1
        with:
          crate: cargo-udeps
          use-tool-cache: true
          version: latest

      - uses: actions/checkout@v2

      - name: Run cargo udeps
        run: cargo udeps --workspace --all-targets

  test:
    runs-on: ${{ matrix.os }}
    needs: env
    strategy:
      matrix:
        rust: ${{ fromJson(needs.env.outputs.rust-versions) }}
        os: [ubuntu-latest, macOS-latest, windows-latest]
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ matrix.rust }}
          override: true

      - uses: actions/checkout@v2
        with:
          lfs: true

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: Run cargo test
        uses: actions-rs/cargo@v1
        with:
          command: test
        env:
          RUSTC_WRAPPER: sccache

      - name: Stop sccache
        run: sccache --stop-server

  miri:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        crate: [bach]
    steps:
      - uses: actions-rs/toolchain@v1
        id: toolchain
        with:
          toolchain: ${{ env.RUST_NIGHTLY_TOOLCHAIN }}
          override: true
          components: miri

      - uses: actions/checkout@v2

      - name: Install sccache
        uses: actions-rs/install@v0.1
        with:
          crate: sccache
          use-tool-cache: true
          version: latest

      - name: Generate Cargo.lock
        run: cargo update

      - name: Cache cargo registry
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ~/.cargo/registry/cache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-cargo-registry-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-cargo-registry-

      - name: Cache sccache output
        uses: actions/cache@v2
        continue-on-error: true
        with:
          path: ${{ github.workspace }}/.sccache
          key: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-sccache-${{ hashFiles('**/Cargo.*') }}
          restore-keys: ${{ runner.os }}-${{ steps.toolchain.outputs.rustc_hash }}-${{ github.job }}-${{ matrix.crate }}-sccache-

      - name: Start sccache
        run: sccache --start-server

      - name: ${{ matrix.crate }}
        run: cd ${{ matrix.crate }} && cargo miri test
        env:
          RUSTC_WRAPPER: sccache
          # needed to read corpus files from filesystem
          MIRIFLAGS: -Zmiri-disable-isolation

      - name: Stop sccache
        run: sccache --stop-server
